--- origsrc/libthreadar-1.5.0/src/Makefile.am	2024-08-22 05:50:05.000000000 +0900
+++ src/libthreadar-1.5.0/src/Makefile.am	2024-09-03 00:20:21.981286000 +0900
@@ -40,7 +40,7 @@ dist_noinst_DATA = exceptions.hpp libthr
 install-data-local:
 	mkdir -p $(DESTDIR)$(pkgincludedir)
 	cp ../config.h $(DESTDIR)$(pkgincludedir)/libthreadar_config.h
-	for file in $(dist_noinst_DATA) ; do sed -e 's%#include \"config.h\"%MY_CONFIG_FILE_H%g' -e "s%#include \"%#include \"$(pkgincludedir)/%g" -e "s%MY_CONFIG_FILE_H%#include \"$(pkgincludedir)/libthreadar_config.h\"%g" "$$file" > $(DESTDIR)$(pkgincludedir)/"$$file"  ; done
+	for file in $(dist_noinst_DATA) ; do sed -e 's%#include \"config.h\"%MY_CONFIG_FILE_H%g' -e "s%#include \"%#include \"$(pkgincludedir)/%g" -e "s%MY_CONFIG_FILE_H%#include \"$(pkgincludedir)/libthreadar_config.h\"%g" "$(srcdir)/$$file" > $(DESTDIR)$(pkgincludedir)/"$$file"  ; done
 	for file in $(DESTDIR)$(pkgincludedir)/* ; do sed -e 's%HAVE_%LIBTHREADAR_HAS_%g' -e 's%VERSION%LIBTHREADAR_VERSION%g' -e 's%_AVAILABLE%_AVAILABLE_FOR_LIBTHREDAR%g' -e 's%ENABLE_NLS%LIBTHREADAR_ENABLE_NLS%g' -e 's%PACKAGE_%LIBTHREADAR_PACKAGE_%g' "$$file" > "$$file.tmp" && mv "$$file.tmp" "$$file" ; done
 	egrep 'LIBTHREADAR' $(DESTDIR)$(pkgincludedir)/libthreadar_config.h | grep -v "#undef" >  $(DESTDIR)$(pkgincludedir)/config.h.tmp
 	mv  $(DESTDIR)$(pkgincludedir)/config.h.tmp  $(DESTDIR)$(pkgincludedir)/libthreadar_config.h
@@ -62,6 +62,6 @@ clean-local:
 
 ALL_SOURCES = exceptions.cpp libthreadar.cpp mutex.cpp semaphore.cpp thread.cpp barrier.cpp freezer.cpp condition.cpp thread_signal.cpp
 
-libthreadar_la_LDFLAGS = -version-info $(LIBTHREADAR_VERSION_IN)
+libthreadar_la_LDFLAGS = -no-undefined -version-info $(LIBTHREADAR_VERSION_IN)
 libthreadar_la_SOURCES = $(ALL_SOURCES)
 
--- origsrc/libthreadar-1.5.0/src/thread_signal.cpp	2024-08-22 05:50:05.000000000 +0900
+++ src/libthreadar-1.5.0/src/thread_signal.cpp	2024-09-02 23:56:50.073696200 +0900
@@ -120,8 +120,9 @@ namespace libthreadar
 		    if(sigemptyset(& sigac.sa_mask) != 0)
 			throw exception_system("Error calling sigemptyset(): ", errno);
 		    sigac.sa_flags = 0;
+#if !defined(__CYGWIN__)
 		    sigac.sa_restorer = nullptr;
-
+#endif
 		    if(sigaction(awaking_signal, &sigac, nullptr) != 0)
 			throw exception_system("Error calling sigaction(): ", errno);
 		    initialized = true;

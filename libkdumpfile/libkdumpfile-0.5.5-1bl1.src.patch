--- origsrc/libkdumpfile-0.5.5/python/Makefile.am	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/python/Makefile.am	2025-01-06 07:55:25.755856700 +0900
@@ -21,7 +21,7 @@
 
 AM_CPPFLAGS = -I$(top_builddir)/include
 AM_CFLAGS = $(PYTHON_CFLAGS)
-AM_LDFLAGS = -module -avoid-version
+AM_LDFLAGS = -no-undefined -module -avoid-version
 
 installed_list = installed.list
 
--- origsrc/libkdumpfile-0.5.5/python/setup.py	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/python/setup.py	2025-01-06 07:56:08.316967500 +0900
@@ -38,10 +38,12 @@ setup(name='libkdumpfile',
       ext_modules=[
           Extension('_addrxlat', [os.path.join(srcdir, 'addrxlat.c')],
                     include_dirs=[include_dir],
-                    extra_objects=[addrxlat_la]),
+                    extra_objects=[addrxlat_la],
+                    extra_link_args=['-no-undefined']),
           Extension('_kdumpfile', [os.path.join(srcdir, 'kdumpfile.c')],
                     include_dirs=[include_dir],
-                    extra_objects=[kdumpfile_la]),
+                    extra_objects=[kdumpfile_la],
+                    extra_link_args=['-no-undefined']),
       ],
       cmdclass={
           'build_ext': libtoolize.build_ext,
--- origsrc/libkdumpfile-0.5.5/src/addrxlat/Makefile.am	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/src/addrxlat/Makefile.am	2025-01-06 07:56:34.482500200 +0900
@@ -36,7 +36,7 @@ libaddrxlat_la_SOURCES = \
 	s390x.c \
 	x86_64.c
 
-libaddrxlat_la_LDFLAGS = -version-info 4:4:1
+libaddrxlat_la_LDFLAGS = -no-undefined -version-info 4:4:1
 
 if HAVE_LD_VERSION_SCRIPT
 libaddrxlat_la_LDFLAGS += -Wl,--version-script=$(srcdir)/libaddrxlat.map
--- origsrc/libkdumpfile-0.5.5/src/addrxlat/aarch64.c	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/src/addrxlat/aarch64.c	2025-01-06 08:07:40.416339100 +0900
@@ -32,7 +32,9 @@
 #include <string.h>
 
 #include "addrxlat-priv.h"
+#if defined(__linux__)
 #include <linux/version.h>
+#endif
 
 /** Maximum virtual address bits (architectural limit). */
 #define VA_MAX_BITS	52
@@ -321,6 +323,7 @@ linux_page_offset(struct os_init_data *c
 			? top
 			: half;
 	} else if (status == ADDRXLAT_ERR_NODATA) {
+#if defined(__linux__)
 		/* Fall back to checking kernel version number. */
 		clear_error(ctl->ctx);
 		if (opt_isset(ctl->popt, version_code)) {
@@ -329,6 +332,7 @@ linux_page_offset(struct os_init_data *c
 				: half;
 			status = ADDRXLAT_OK;
 		}
+#endif
 	}
 
 	return status;
--- origsrc/libkdumpfile-0.5.5/src/addrxlat/riscv64.c	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/src/addrxlat/riscv64.c	2025-01-06 08:06:01.290112600 +0900
@@ -32,7 +32,9 @@
 #include <string.h>
 
 #include "addrxlat-priv.h"
+#if defined(__linux__)
 #include <linux/version.h>
+#endif
 
 /** Maximum physical address bits (architectural limit) */
 #define PHYSADDR_BITS_MAX	56
--- origsrc/libkdumpfile-0.5.5/src/kdumpfile/Makefile.am	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/src/kdumpfile/Makefile.am	2025-01-06 07:56:50.545878000 +0900
@@ -64,7 +64,7 @@ libkdumpfile_la_LIBADD = \
 	$(SNAPPY_LIBS)	\
 	$(ZSTD_LIBS)
 
-libkdumpfile_la_LDFLAGS = -version-info 12:0:0
+libkdumpfile_la_LDFLAGS = -no-undefined -version-info 12:0:0
 
 if HAVE_LD_VERSION_SCRIPT
 libkdumpfile_la_LDFLAGS += -Wl,--version-script=$(srcdir)/libkdumpfile.map
--- origsrc/libkdumpfile-0.5.5/src/kdumpfile/elfdump.c	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/src/kdumpfile/elfdump.c	2025-01-06 08:09:03.601821500 +0900
@@ -38,7 +38,9 @@
 #include <elf.h>
 
 #include <sys/statfs.h>
+#if defined(__linux__)
 #include <linux/magic.h>
+#endif
 
 /* This definition is missing from older version of <elf.h> */
 #ifndef EM_AARCH64
@@ -1579,10 +1581,12 @@ open_common(kdump_ctx_t *ctx)
 		if (fstatfs(ctx->shared->fcache->info[0].fd, &stfs) < 0)
 			return set_error(ctx, KDUMP_ERR_SYSTEM,
 					 "Cannot determine filesystem");
+#if defined(PROC_SUPER_MAGIC)
 		if (stfs.f_type == PROC_SUPER_MAGIC) {
 			read_current_vmcoreinfo(ctx);
 			clear_error(ctx);
 		}
+#endif
 	}
 
 	return KDUMP_OK;
--- origsrc/libkdumpfile-0.5.5/src/kdumpfile/ia32.c	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/src/kdumpfile/ia32.c	2025-01-06 08:09:34.515229600 +0900
@@ -36,7 +36,9 @@
 #include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
+#if defined(__linux__)
 #include <linux/version.h>
+#endif
 
 #define ELF_NGREG 17
 
--- origsrc/libkdumpfile-0.5.5/src/kdumpfile/test-blob.c	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/src/kdumpfile/test-blob.c	2025-01-06 08:13:24.671021900 +0900
@@ -64,8 +64,10 @@ main(int argc, char **argv)
 
 	ret = TEST_OK;
 
+#if defined(M_PERTURB)
 	/* Make sure freed regions are overwritten */
 	mallopt(M_PERTURB, 1);
+#endif
 
 	ctx = kdump_new();
 	if (!ctx) {
--- origsrc/libkdumpfile-0.5.5/src/kdumpfile/test-clone-attr.c	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/src/kdumpfile/test-clone-attr.c	2025-01-06 08:13:34.668723700 +0900
@@ -116,8 +116,10 @@ main(int argc, char **argv)
 
 	ret = TEST_OK;
 
+#if defined(M_PERTURB)
 	/* Make sure freed regions are overwritten */
 	mallopt(M_PERTURB, 1);
+#endif
 
 	/* Set up a dictionary with these attributes:
 	 *  a = 1
--- origsrc/libkdumpfile-0.5.5/src/kdumpfile/test-fcache.c	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/src/kdumpfile/test-fcache.c	2025-01-06 08:14:09.551774200 +0900
@@ -456,7 +456,11 @@ main(int argc, char **argv)
 		return TEST_ERR;
 	}
 
+#if defined(RTLD_NEXT)
 	orig_mmap = dlsym(RTLD_NEXT, STR_MMAP);
+#else
+	orig_mmap = NULL;
+#endif
 	if (!orig_mmap) {
 		fprintf(stderr, "Cannot get original mmap() address: %s\n",
 			dlerror());
--- origsrc/libkdumpfile-0.5.5/src/kdumpfile/util.c	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/src/kdumpfile/util.c	2025-01-06 08:10:59.012447400 +0900
@@ -32,7 +32,9 @@
 
 #include "kdumpfile-priv.h"
 
+#if defined(__linux__)
 #include <linux/version.h>
+#endif
 #include <string.h>
 #include <stdlib.h>
 #include <stdio.h>
@@ -474,8 +476,10 @@ linux_ver_revalidate(kdump_ctx_t *ctx, s
 		}
 	}
 
+#if defined(__linux__)
 	val.number = KERNEL_VERSION(a, b, c);
 	return set_attr(ctx, attr, ATTR_DEFAULT, &val);
+#endif
  err:
 	return set_error(ctx, KDUMP_ERR_CORRUPT, "Invalid kernel version: %s",
 			 attr_value(rel)->string);
--- origsrc/libkdumpfile-0.5.5/src/kdumpfile/x86_64.c	2024-12-26 05:12:07.000000000 +0900
+++ src/libkdumpfile-0.5.5/src/kdumpfile/x86_64.c	2025-01-06 08:11:26.265824800 +0900
@@ -36,7 +36,9 @@
 #include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
+#if defined(__linux__)
 #include <linux/version.h>
+#endif
 
 #define ELF_NGREG 27
 

--- origsrc/olm-3.2.6/CMakeLists.txt	2021-09-17 06:16:56.000000000 +0900
+++ src/olm-3.2.6/CMakeLists.txt	2021-09-21 10:43:11.926156700 +0900
@@ -24,7 +24,10 @@ endif()
 set(CMAKE_CXX_VISIBILITY_PRESET hidden)
 set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
 
-add_library(olm
+find_package(pkgconfig)
+pkg_check_modules(CURVE25519_DONNA curve25519-donna)
+
+set(OLM_SRC
     src/account.cpp
     src/base64.cpp
     src/cipher.cpp
@@ -47,8 +50,14 @@ add_library(olm
     src/pickle_encoding.c
 
     lib/crypto-algorithms/aes.c
-    lib/crypto-algorithms/sha256.c
-    lib/curve25519-donna/curve25519-donna.c)
+    lib/crypto-algorithms/sha256.c)
+if (NOT CURVE25519_DONNA_FOUND)
+    set(OLM_SRC ${OLM_SRC} lib/curve25519-donna/curve25519-donna.c)
+endif()
+add_library(olm ${OLM_SRC})
+if (CURVE25519_DONNA_FOUND)
+    target_link_libraries(olm ${CURVE25519_DONNA_LIBRARIES})
+endif()
 add_library(Olm::Olm ALIAS olm)
 
 # restrict the exported symbols
@@ -83,6 +92,7 @@ configure_file(${PROJECT_NAME}.pc.in ${P
 set(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/Olm)
 install(TARGETS olm
     EXPORT olm-targets
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
     INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
--- origsrc/olm-3.2.6/include/olm/megolm.h	2021-09-17 06:16:56.000000000 +0900
+++ src/olm-3.2.6/include/olm/megolm.h	2021-09-21 10:55:06.832315000 +0900
@@ -23,6 +23,8 @@
 #include <stdint.h>
 #include <stdlib.h>
 
+#include "olm/olm_export.h"
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -59,25 +61,25 @@ extern const struct _olm_cipher *megolm_
  * initialize the megolm ratchet. random_data should be at least
  * MEGOLM_RATCHET_LENGTH bytes of randomness.
  */
-void megolm_init(Megolm *megolm, uint8_t const *random_data, uint32_t counter);
+OLM_EXPORT void megolm_init(Megolm *megolm, uint8_t const *random_data, uint32_t counter);
 
 /** Returns the number of bytes needed to store a megolm */
-size_t megolm_pickle_length(const Megolm *megolm);
+OLM_EXPORT size_t megolm_pickle_length(const Megolm *megolm);
 
 /**
  * Pickle the megolm. Returns a pointer to the next free space in the buffer.
  */
-uint8_t * megolm_pickle(const Megolm *megolm, uint8_t *pos);
+OLM_EXPORT uint8_t * megolm_pickle(const Megolm *megolm, uint8_t *pos);
 
 /**
  * Unpickle the megolm. Returns a pointer to the next item in the buffer.
  */
-const uint8_t * megolm_unpickle(Megolm *megolm, const uint8_t *pos,
+OLM_EXPORT const uint8_t * megolm_unpickle(Megolm *megolm, const uint8_t *pos,
                                 const uint8_t *end);
 
 
 /** advance the ratchet by one step */
-void megolm_advance(Megolm *megolm);
+OLM_EXPORT void megolm_advance(Megolm *megolm);
 
 /**
  * get the key data in the ratchet. The returned data is
@@ -86,7 +88,7 @@ void megolm_advance(Megolm *megolm);
 #define megolm_get_data(megolm) ((const uint8_t *)((megolm)->data))
 
 /** advance the ratchet to a given count */
-void megolm_advance_to(Megolm *megolm, uint32_t advance_to);
+OLM_EXPORT void megolm_advance_to(Megolm *megolm, uint32_t advance_to);
 
 #ifdef __cplusplus
 } // extern "C"
--- origsrc/olm-3.2.6/include/olm/olm_export.h	2021-09-17 06:16:56.000000000 +0900
+++ src/olm-3.2.6/include/olm/olm_export.h	2021-09-21 10:43:30.786605200 +0900
@@ -9,15 +9,15 @@
 #  ifndef OLM_EXPORT
 #    ifdef olm_EXPORTS
         /* We are building this library */
-#      define OLM_EXPORT __attribute__((visibility("default")))
+#      define OLM_EXPORT __declspec(dllexport)
 #    else
         /* We are using this library */
-#      define OLM_EXPORT __attribute__((visibility("default")))
+#      define OLM_EXPORT __declspec(dllimport)
 #    endif
 #  endif
 
 #  ifndef OLM_NO_EXPORT
-#    define OLM_NO_EXPORT __attribute__((visibility("hidden")))
+#    define OLM_NO_EXPORT 
 #  endif
 #endif
 
--- origsrc/olm-3.2.6/include/olm/pickle_encoding.h	2021-09-17 06:16:56.000000000 +0900
+++ src/olm-3.2.6/include/olm/pickle_encoding.h	2021-09-21 10:53:21.149034500 +0900
@@ -21,6 +21,7 @@
 #include <stddef.h>
 #include <stdint.h>
 
+#include "olm/olm_export.h"
 #include "olm/error.h"
 
 #ifdef __cplusplus
@@ -31,7 +32,7 @@ extern "C" {
 /**
  * Get the number of bytes needed to encode a pickle of the length given
  */
-size_t _olm_enc_output_length(size_t raw_length);
+OLM_EXPORT size_t _olm_enc_output_length(size_t raw_length);
 
 /**
  * Get the point in the output buffer that the raw pickle should be written to.
@@ -41,7 +42,7 @@ size_t _olm_enc_output_length(size_t raw
  * base-64 encoding would otherwise overwrite the end of the input before it
  * was encoded.)
  */
- uint8_t *_olm_enc_output_pos(uint8_t * output, size_t raw_length);
+OLM_EXPORT uint8_t *_olm_enc_output_pos(uint8_t * output, size_t raw_length);
 
 /**
  * Encrypt and encode the given pickle in-situ.
@@ -51,7 +52,7 @@ size_t _olm_enc_output_length(size_t raw
  *
  * Returns the number of bytes in the encoded pickle.
  */
-size_t _olm_enc_output(
+OLM_EXPORT size_t _olm_enc_output(
     uint8_t const * key, size_t key_length,
     uint8_t *pickle, size_t raw_length
 );
@@ -62,7 +63,7 @@ size_t _olm_enc_output(
  * Returns the number of bytes in the decoded pickle, or olm_error() on error,
  * in which case *last_error will be updated, if last_error is non-NULL.
  */
-size_t _olm_enc_input(
+OLM_EXPORT size_t _olm_enc_input(
     uint8_t const * key, size_t key_length,
     uint8_t * input, size_t b64_length,
     enum OlmErrorCode * last_error

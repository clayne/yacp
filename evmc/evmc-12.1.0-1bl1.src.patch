--- origsrc/evmc-12.1.0/lib/instructions/CMakeLists.txt	2025-02-07 20:57:01.000000000 +0900
+++ src/evmc-12.1.0/lib/instructions/CMakeLists.txt	2025-02-10 16:52:45.531885100 +0900
@@ -3,7 +3,7 @@
 # Licensed under the Apache License, Version 2.0.
 
 add_library(
-    instructions STATIC
+    instructions SHARED
     ${EVMC_INCLUDE_DIR}/evmc/instructions.h
     instruction_metrics.c
     instruction_names.c
@@ -18,6 +18,10 @@ target_include_directories(instructions
     $<BUILD_INTERFACE:${EVMC_INCLUDE_DIR}>$<INSTALL_INTERFACE:include>
 )
 
+if (DEFINED SOVERSION)
+    set_target_properties(instructions PROPERTIES SOVERSION "${SOVERSION}")
+endif()
+
 if(EVMC_INSTALL)
-    install(TARGETS instructions EXPORT evmcTargets DESTINATION ${CMAKE_INSTALL_LIBDIR})
+    install(TARGETS instructions EXPORT evmcTargets RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 endif()
--- origsrc/evmc-12.1.0/lib/loader/CMakeLists.txt	2025-02-07 20:57:01.000000000 +0900
+++ src/evmc-12.1.0/lib/loader/CMakeLists.txt	2025-02-10 16:52:45.531885100 +0900
@@ -3,7 +3,7 @@
 # Licensed under the Apache License, Version 2.0.
 
 add_library(
-    loader STATIC
+    loader SHARED
     ${EVMC_INCLUDE_DIR}/evmc/loader.h
     loader.c
 )
@@ -15,6 +15,10 @@ set_target_properties(loader PROPERTIES
 )
 target_link_libraries(loader INTERFACE ${CMAKE_DL_LIBS} PUBLIC evmc::evmc)
 
+if (DEFINED SOVERSION)
+    set_target_properties(loader PROPERTIES SOVERSION "${SOVERSION}")
+endif()
+
 if(EVMC_INSTALL)
-    install(TARGETS loader EXPORT evmcTargets DESTINATION ${CMAKE_INSTALL_LIBDIR})
+    install(TARGETS loader EXPORT evmcTargets RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 endif()
--- origsrc/evmc-12.1.0/lib/tooling/CMakeLists.txt	2025-02-07 20:57:01.000000000 +0900
+++ src/evmc-12.1.0/lib/tooling/CMakeLists.txt	2025-02-10 16:52:45.547510900 +0900
@@ -2,7 +2,7 @@
 # Copyright 2021 The EVMC Authors.
 # Licensed under the Apache License, Version 2.0.
 
-add_library(tooling STATIC)
+add_library(tooling SHARED)
 add_library(evmc::tooling ALIAS tooling)
 target_compile_features(tooling PUBLIC cxx_std_17)
 target_link_libraries(tooling PUBLIC evmc::evmc_cpp evmc::mocked_host)
@@ -13,6 +13,14 @@ target_sources(
     run.cpp
 )
 
+if (CYGWIN)
+    set_target_properties(tooling PROPERTIES OUTPUT_NAME evmc-tooling)
+endif()
+
+if (DEFINED SOVERSION)
+    set_target_properties(tooling PROPERTIES SOVERSION "${SOVERSION}")
+endif()
+
 if(EVMC_INSTALL)
-    install(TARGETS tooling EXPORT evmcTargets ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
+    install(TARGETS tooling EXPORT evmcTargets RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 endif()
--- origsrc/evmc-12.1.0/test/unittests/CMakeLists.txt	2025-02-07 20:57:01.000000000 +0900
+++ src/evmc-12.1.0/test/unittests/CMakeLists.txt	2025-02-10 17:07:19.421692700 +0900
@@ -4,8 +4,11 @@
 
 include(GoogleTest)
 
-hunter_add_package(GTest)
-find_package(GTest CONFIG REQUIRED)
+if (HUNTER_ENABLED)
+    hunter_add_package(GTest)
+else()
+    find_package(GTest REQUIRED)
+endif()
 
 add_library(loader-mocked STATIC ${PROJECT_SOURCE_DIR}/lib/loader/loader.c)
 target_link_libraries(loader-mocked PRIVATE evmc::evmc)
--- origsrc/evmc-12.1.0/test/unittests/cpp_test.cpp	2025-02-07 20:57:01.000000000 +0900
+++ src/evmc-12.1.0/test/unittests/cpp_test.cpp	2025-02-10 17:13:34.307877700 +0900
@@ -953,13 +953,13 @@ TEST(cpp, revision_to_string)
 }
 
 
-#if defined(__GNUC__) && !defined(__APPLE__)
+#if defined(__GNUC__) && !defined(__APPLE__) && !defined(__CYGWIN__)
 extern "C" [[gnu::weak]] void __ubsan_handle_builtin_unreachable(void*);  // NOLINT
 #endif
 
 static bool has_ubsan() noexcept  // NOLINT(misc-use-anonymous-namespace)
 {
-#if defined(__GNUC__) && !defined(__APPLE__)
+#if defined(__GNUC__) && !defined(__APPLE__) && !defined(__CYGWIN__)
     return (__ubsan_handle_builtin_unreachable != nullptr);
 #else
     return false;
--- origsrc/evmc-12.1.0/tools/evmc/CMakeLists.txt	2025-02-07 20:57:01.000000000 +0900
+++ src/evmc-12.1.0/tools/evmc/CMakeLists.txt	2025-02-10 17:05:14.567915400 +0900
@@ -2,7 +2,11 @@
 # Copyright 2019-2020 The EVMC Authors.
 # Licensed under the Apache License, Version 2.0.
 
-hunter_add_package(CLI11)
+if (HUNTER_ENABLED)
+    hunter_add_package(CLI11)
+else()
+    find_package(CLI11 REQUIRED)
+endif()
 find_package(CLI11 REQUIRED)
 
 add_executable(evmc-tool main.cpp)
@@ -11,3 +15,6 @@ set_target_properties(evmc-tool PROPERTI
 set_source_files_properties(main.cpp PROPERTIES
     COMPILE_DEFINITIONS PROJECT_VERSION="${PROJECT_VERSION}")
 target_link_libraries(evmc-tool PRIVATE evmc::tooling evmc::loader CLI11::CLI11)
+if (EVMC_INSTALL)
+    install(TARGETS evmc-tool EXPORT evmcTargets RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+endif()
--- origsrc/evmc-12.1.0/tools/vmtester/CMakeLists.txt	2025-02-07 20:57:01.000000000 +0900
+++ src/evmc-12.1.0/tools/vmtester/CMakeLists.txt	2025-02-10 17:07:08.938908500 +0900
@@ -4,8 +4,11 @@
 
 include(GNUInstallDirs)
 
-hunter_add_package(GTest)
-find_package(GTest CONFIG REQUIRED)
+if (HUNTER_ENABLED)
+    hunter_add_package(GTest)
+else()
+    find_package(GTest REQUIRED)
+endif()
 
 # Disable support for std::tr1::tuple in GTest. This causes problems in Visual Studio 2015.
 set_target_properties(GTest::gtest PROPERTIES INTERFACE_COMPILE_DEFINITIONS GTEST_HAS_TR1_TUPLE=0)

--- origsrc/libE57Format-3.2.0/CMakeLists.txt	2024-06-28 01:44:47.000000000 +0900
+++ src/libE57Format-3.2.0/CMakeLists.txt	2025-03-24 10:19:49.822739800 +0900
@@ -237,6 +237,8 @@ if ( E57_BUILD_TEST )
     add_subdirectory( test )
 endif()
 
+include(GNUInstallDirs)
+
 # CMake package files
 set( E57_INSTALL_CMAKEDIR
     "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
@@ -259,3 +261,10 @@ install(
     DESTINATION
         "${E57_INSTALL_CMAKEDIR}"
 )
+
+set(prefix ${CMAKE_INSTALL_PREFIX})
+set(exec_prefix ${CMAKE_INSTALL_PREFIX})
+set(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+set(includedir ${CMAKE_INSTALL_PREFIX}/include)
+configure_file(${CMAKE_SOURCE_DIR}/libE57Format.pc.in ${CMAKE_BINARY_DIR}/libE57Format.pc @ONLY)
+install(FILES ${CMAKE_BINARY_DIR}/libE57Format.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/libE57Format-3.2.0/libE57Format.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/libE57Format-3.2.0/libE57Format.pc.in	2025-03-24 10:19:57.217329000 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: libE57Format
+Description: Library for reading & writing the E57 file format
+Version: @PROJECT_VERSION@
+Libs: -L${libdir} -lE57Format
+Cflags: -I${includedir}
--- origsrc/libE57Format-3.2.0/src/CheckedFile.cpp	2024-06-28 01:44:47.000000000 +0900
+++ src/libE57Format-3.2.0/src/CheckedFile.cpp	2025-03-24 07:09:33.154695000 +0900
@@ -47,7 +47,7 @@
 #else
 #error "no supported compiler defined"
 #endif
-#elif defined( __linux__ ) || defined( __EMSCRIPTEN__ )
+#elif defined( __linux__ ) || defined( __EMSCRIPTEN__ ) || defined(__CYGWIN__)
 #ifndef _LARGEFILE64_SOURCE
 #define _LARGEFILE64_SOURCE
 #endif
@@ -484,7 +484,7 @@ uint64_t CheckedFile::lseek64( int64_t o
 
 #if defined( _WIN32 )
    __int64 result = _lseeki64( fd_, offset, whence );
-#elif defined( __linux__ ) || defined( __EMSCRIPTEN__ )
+#elif defined( __linux__ ) || defined( __EMSCRIPTEN__ ) || defined(__CYGWIN__)
    int64_t result = ::lseek64( fd_, offset, whence );
 #elif defined( __APPLE__ ) || defined( __BSD )
    int64_t result = ::lseek( fd_, offset, whence );

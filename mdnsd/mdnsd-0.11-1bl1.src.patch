--- origsrc/mdnsd-0.11/Makefile.am	2022-01-10 02:09:45.000000000 +0900
+++ src/mdnsd-0.11/Makefile.am	2022-02-12 06:50:05.036234600 +0900
@@ -49,3 +49,6 @@ release: release-hook distcheck
 # Workaround for systemd unit file duing distcheck
 DISTCHECK_CONFIGURE_FLAGS = --with-systemd=$$dc_install_base/$(systemd)
 DISTCLEANFILES = lib/.libs/*
+
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = $(PACKAGE).pc
--- origsrc/mdnsd-0.11/configure.ac	2022-01-10 02:09:45.000000000 +0900
+++ src/mdnsd-0.11/configure.ac	2022-02-12 06:50:05.037176600 +0900
@@ -7,7 +7,7 @@ AM_SILENT_RULES([yes])
 
 AC_CONFIG_SRCDIR(src/mdnsd.c)
 AM_CONFIG_HEADER(config.h)
-AC_CONFIG_FILES([Makefile mdnsd.service examples/Makefile libmdnsd/Makefile man/Makefile src/Makefile])
+AC_CONFIG_FILES([mdnsd.pc Makefile mdnsd.service examples/Makefile libmdnsd/Makefile man/Makefile src/Makefile])
 AC_CONFIG_MACRO_DIR([m4])
 
 AC_PROG_CC
--- origsrc/mdnsd-0.11/libmdnsd/Makefile.am	2022-01-10 02:09:45.000000000 +0900
+++ src/mdnsd-0.11/libmdnsd/Makefile.am	2022-02-12 06:39:05.912405600 +0900
@@ -3,4 +3,4 @@ lib_LTLIBRARIES      = libmdnsd.la
 libmdnsd_la_SOURCES  = mdnsd.c mdnsd.h log.c 1035.c 1035.h sdtxt.c sdtxt.h xht.c xht.h
 libmdnsd_la_CFLAGS   = -std=gnu99 -W -Wall -Wextra -Wno-unused-parameter -Wno-unused-function
 libmdnsd_la_CPPFLAGS = -D_GNU_SOURCE -D_BSD_SOURCE -D_DEFAULT_SOURCE
-libmdnsd_la_LDFLAGS  = $(AM_LDFLAGS) -version-info 1:0:0
+libmdnsd_la_LDFLAGS  = -no-undefined $(AM_LDFLAGS) -version-info 1:0:0
--- origsrc/mdnsd-0.11/mdnsd.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/mdnsd-0.11/mdnsd.pc.in	2022-02-12 06:50:04.943097000 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: mdnsd
+Description: Embeddable Multicast DNS Daemon
+Version: @VERSION@
+Libs: -L${libdir} -lmdnsd
+Cflags: -I${includedir}
--- origsrc/mdnsd-0.11/src/mdnsd.c	2022-01-10 02:09:45.000000000 +0900
+++ src/mdnsd-0.11/src/mdnsd.c	2022-02-12 06:48:08.231304100 +0900
@@ -241,17 +241,21 @@ static int multicast_socket(struct iface
 	if (setsockopt(sd, IPPROTO_IP, IP_MULTICAST_IF, &imr, sizeof(imr)))
 		WARN("Failed setting IP_MULTICAST_IF %d: %s", iface->ifindex, strerror(errno));
 #else
+#if 0 // ina not found
 	if (setsockopt(sd, IPPROTO_IP, IP_MULTICAST_IF, &ina, sizeof(ina)))
 		WARN("Failed setting IP_MULTICAST_IF to %s: %s",
 		     inet_ntoa(ina), strerror(errno));
 #endif
+#endif
 
 	if (setsockopt(sd, IPPROTO_IP, IP_MULTICAST_LOOP, &on, sizeof(on)))
 		WARN("Failed disabling IP_MULTICAST_LOOP on %s: %s", iface->ifname, strerror(errno));
 
 	flag = 0;
+#if defined(IP_MULTICAST_ALL)
 	if (setsockopt(sd, IPPROTO_IP, IP_MULTICAST_ALL, &flag, sizeof(flag)))
 		WARN("Failed disabling IP_MULTICAST_LOOP on %s: %s", iface->ifname, strerror(errno));
+#endif
 
 	/*
 	 * All traffic on 224.0.0.* is link-local only, so the default
@@ -264,9 +268,11 @@ static int multicast_socket(struct iface
 	if (setsockopt(sd, IPPROTO_IP, IP_TTL, &unicast_ttl, sizeof(unicast_ttl)))
 		WARN("Failed setting IP_TTL to %d: %s", unicast_ttl, strerror(errno));
 
+#if defined(SO_BINDTODEVICE)
 	/* Filter inbound traffic from anyone (ANY) to port 5353 on ifname */
 	if (setsockopt(sd, SOL_SOCKET, SO_BINDTODEVICE, &iface->ifname, strlen(iface->ifname)))
 		WARN("Failed setting SO_BINDTODEVICE: %s", strerror(errno));
+#endif
 
 	memset(&sin, 0, sizeof(sin));
 	sin.sin_family = AF_INET;

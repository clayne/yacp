--- origsrc/valkey-8.1.3/cmake/Modules/ValkeySetup.cmake	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/cmake/Modules/ValkeySetup.cmake	2025-09-05 13:07:35.307651800 +0900
@@ -22,7 +22,7 @@ set(VALKEY_EXE_PERMISSIONS
     WORLD_EXECUTE
     WORLD_READ)
 
-set(VALKEY_SERVER_CFLAGS "")
+set(VALKEY_SERVER_CFLAGS "${CMAKE_C_FLAGS}")
 set(VALKEY_SERVER_LDFLAGS "")
 
 # ----------------------------------------------------
@@ -94,7 +94,7 @@ macro (valkey_build_and_install_bin targ
     endif ()
 
     # Enable all warnings + fail on warning
-    target_compile_options(${target} PRIVATE -Werror -Wall)
+    target_compile_options(${target} PRIVATE -Wall)
 
     # Install cli tool and create a redis symbolic link
     valkey_install_bin(${target})
@@ -296,11 +296,7 @@ if (BUILD_SANITIZER)
     endif ()
 endif ()
 
-include_directories("${CMAKE_SOURCE_DIR}/deps/hiredis")
-include_directories("${CMAKE_SOURCE_DIR}/deps/linenoise")
 include_directories("${CMAKE_SOURCE_DIR}/deps/lua/src")
-include_directories("${CMAKE_SOURCE_DIR}/deps/hdr_histogram")
-include_directories("${CMAKE_SOURCE_DIR}/deps/fpconv")
 
 add_subdirectory("${CMAKE_SOURCE_DIR}/deps")
 
--- origsrc/valkey-8.1.3/deps/CMakeLists.txt	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/deps/CMakeLists.txt	2025-09-05 13:02:54.037814200 +0900
@@ -17,10 +17,26 @@ if (USE_TLS) # Module or no module
         CACHE BOOL "Should we test SSL connections")
 endif ()
 
-add_subdirectory(hiredis)
-add_subdirectory(linenoise)
-add_subdirectory(fpconv)
-add_subdirectory(hdr_histogram)
+pkg_check_modules(HIREDIS hiredis)
+if (NOT HIREDIS_FOUND)
+    include_directories("${CMAKE_SOURCE_DIR}/deps/hiredis")
+    add_subdirectory(hiredis)
+endif()
+pkg_check_modules(LINENOISE linenoise)
+if (NOT LINENOISE_FOUND)
+    include_directories("${CMAKE_SOURCE_DIR}/deps/linenoise")
+    add_subdirectory(linenoise)
+endif()
+pkg_check_modules(FPCONV fpconv)
+if (NOT FPCONV_FOUND)
+    include_directories("${CMAKE_SOURCE_DIR}/deps/fpconv")
+    add_subdirectory(fpconv)
+endif ()
+pkg_check_modules(HDR_HISTOGRAM hdr_histogram)
+if (NOT HDR_HISTOGRAM_FOUND)
+    include_directories("${CMAKE_SOURCE_DIR}/deps/hdr_histogram")
+    add_subdirectory(hdr_histogram)
+endif()
 
 # Clear any cached variables passed to hiredis from the cache
 unset(BUILD_SHARED_LIBS CACHE)
--- origsrc/valkey-8.1.3/src/CMakeLists.txt	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/CMakeLists.txt	2025-09-05 13:07:24.766914100 +0900
@@ -16,6 +16,9 @@ valkey_build_and_install_bin(valkey-serv
 add_dependencies(valkey-server generate_commands_def)
 add_dependencies(valkey-server generate_fmtargs_h)
 add_dependencies(valkey-server release_header)
+if (HIREDIS_FOUND)
+    target_include_directories(valkey-server PRIVATE ${HIREDIS_INCLUDE_DIRS})
+endif ()
 
 if (VALKEY_RELEASE_BUILD)
     # Enable LTO for Release build
@@ -43,6 +46,9 @@ list(APPEND CLI_LIBS "linenoise")
 valkey_build_and_install_bin(valkey-cli "${VALKEY_CLI_SRCS}" "${VALKEY_SERVER_LDFLAGS}" "${CLI_LIBS}" "redis-cli")
 add_dependencies(valkey-cli generate_commands_def)
 add_dependencies(valkey-cli generate_fmtargs_h)
+if (HIREDIS_FOUND)
+    target_include_directories(valkey-cli PRIVATE ${HIREDIS_INCLUDE_DIRS})
+endif ()
 
 # Target: valkey-benchmark
 list(APPEND BENCH_LIBS "hdr_histogram")
@@ -50,6 +56,9 @@ valkey_build_and_install_bin(valkey-benc
                              "redis-benchmark")
 add_dependencies(valkey-benchmark generate_commands_def)
 add_dependencies(valkey-benchmark generate_fmtargs_h)
+if (HIREDIS_FOUND)
+    target_include_directories(valkey-benchmark PRIVATE ${HIREDIS_INCLUDE_DIRS})
+endif()
 
 # Targets: valkey-sentinel, valkey-check-aof and valkey-check-rdb are just symbolic links
 valkey_create_symlink("valkey-server" "valkey-sentinel")
--- origsrc/valkey-8.1.3/src/cli_common.c	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/cli_common.c	2025-09-04 23:39:04.154352800 +0900
@@ -37,7 +37,9 @@
 #include <fcntl.h>
 #include <errno.h>
 #include <hiredis.h>
+#if !defined(NO_SDSCOMPAT_H)
 #include <sdscompat.h> /* Use hiredis' sds compat header that maps sds calls to their hi_ variants */
+#endif
 #include <sds.h>       /* use sds.h from hiredis, so that only one set of sds functions will be present in the binary */
 #include <unistd.h>
 #include <string.h>
--- origsrc/valkey-8.1.3/src/cli_common.h	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/cli_common.h	2025-09-04 23:38:55.850601200 +0900
@@ -2,7 +2,9 @@
 #define __CLICOMMON_H
 
 #include <hiredis.h>
+#if !defined(NO_SDSCOMPAT_H)
 #include <sdscompat.h> /* Use hiredis' sds compat header that maps sds calls to their hi_ variants */
+#endif
 
 typedef struct cliSSLconfig {
     /* Requested SNI, or NULL */
--- origsrc/valkey-8.1.3/src/debug.c	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/debug.c	2025-09-05 08:49:49.422539900 +0900
@@ -33,7 +33,11 @@
 #include "crc64.h"
 #include "bio.h"
 #include "quicklist.h"
+#if defined(USE_SYSTEM_FPCONV)
+#include <fpconv.h>
+#else
 #include "fpconv_dtoa.h"
+#endif
 #include "cluster.h"
 #include "threads_mngr.h"
 #include "io_threads.h"
--- origsrc/valkey-8.1.3/src/fmacros.h	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/fmacros.h	2025-09-04 18:35:24.908672600 +0900
@@ -69,7 +69,7 @@
  *
  * NOTE: We do not use the poison pragma since it
  * will error on stdlib definitions in files as well*/
-#if (__GNUC__ && __GNUC__ >= 4) && !defined __APPLE__
+#if (__GNUC__ && __GNUC__ >= 4) && !defined __APPLE__ && !defined(__CYGWIN__)
 int sprintf(char *str, const char *format, ...)
     __attribute__((deprecated("please avoid use of unsafe C functions. prefer use of snprintf instead")));
 char *strcpy(char *restrict dest, const char *src)
--- origsrc/valkey-8.1.3/src/latency.c	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/latency.c	2025-09-04 14:09:52.165177300 +0900
@@ -34,7 +34,7 @@
  */
 
 #include "server.h"
-#include "hdr_histogram.h"
+#include <hdr/hdr_histogram.h>
 
 /* Dictionary type for latency events. */
 int dictStringKeyCompare(const void *key1, const void *key2) {
--- origsrc/valkey-8.1.3/src/lua/script_lua.c	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/lua/script_lua.c	2025-09-05 08:54:51.215395000 +0900
@@ -37,7 +37,11 @@
 #include "../resp_parser.h"
 #include "../version.h"
 
+#if defined(USE_SYSTEM_FPCONV)
+#include <fpconv.h>
+#else
 #include <fpconv_dtoa.h>
+#endif
 #include <lauxlib.h>
 #include <lualib.h>
 #include <ctype.h>
--- origsrc/valkey-8.1.3/src/module.c	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/module.c	2025-09-04 14:09:52.174324000 +0900
@@ -63,7 +63,7 @@
 #include "monotonic.h"
 #include "script.h"
 #include "call_reply.h"
-#include "hdr_histogram.h"
+#include <hdr/hdr_histogram.h>
 #include "crc16_slottable.h"
 #include "valkeymodule.h"
 #include "module.h"
--- origsrc/valkey-8.1.3/src/networking.c	2025-09-04 14:09:41.543791200 +0900
+++ src/valkey-8.1.3/src/networking.c	2025-09-05 08:45:17.470735200 +0900
@@ -33,7 +33,11 @@
 #include "script.h"
 #include "intset.h"
 #include "sds.h"
+#if defined(USE_SYSTEM_FPCONV)
+#include <fpconv.h>
+#else
 #include "fpconv_dtoa.h"
+#endif
 #include "fmtargs.h"
 #include "io_threads.h"
 #include "module.h"
--- origsrc/valkey-8.1.3/src/rdb.c	2025-09-04 14:09:40.384145300 +0900
+++ src/valkey-8.1.3/src/rdb.c	2025-09-05 08:46:05.393309900 +0900
@@ -36,7 +36,11 @@
 #include "lzf.h" /* LZF compression library */
 #include "zipmap.h"
 #include "endianconv.h"
+#if defined(USE_SYSTEM_FPCONV)
+#include <fpconv.h>
+#else
 #include "fpconv_dtoa.h"
+#endif
 #include "stream.h"
 #include "functions.h"
 #include "intset.h" /* Compact integer set structure */
--- origsrc/valkey-8.1.3/src/release.h	1970-01-01 09:00:00.000000000 +0900
+++ src/valkey-8.1.3/src/release.h	2025-09-05 13:07:53.778378500 +0900
@@ -0,0 +1,5 @@
+#define REDIS_GIT_SHA1 "00000000"
+#define REDIS_GIT_DIRTY "417601"
+#define REDIS_BUILD_ID "fd0vmware-1757045272"
+#include "version.h"
+#define REDIS_BUILD_ID_RAW SERVER_NAME VALKEY_VERSION REDIS_BUILD_ID REDIS_GIT_DIRTY REDIS_GIT_SHA1
--- origsrc/valkey-8.1.3/src/rio.c	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/rio.c	2025-09-05 08:52:05.531741200 +0900
@@ -46,7 +46,11 @@
 
 
 #include "fmacros.h"
+#if defined(USE_SYSTEM_FPCONV)
+#include <fpconv.h>
+#else
 #include "fpconv_dtoa.h"
+#endif
 #include <string.h>
 #include <stdio.h>
 #include <unistd.h>
--- origsrc/valkey-8.1.3/src/sentinel.c	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/sentinel.c	2025-09-04 20:16:05.890326300 +0900
@@ -29,10 +29,10 @@
  */
 
 #include "server.h"
-#include "hiredis.h"
+#include <hiredis.h>
 #if USE_OPENSSL == 1 /* BUILD_YES */
-#include "openssl/ssl.h"
-#include "hiredis_ssl.h"
+#include <openssl/ssl.h>
+#include <hiredis_ssl.h>
 #endif
 #include "async.h"
 
--- origsrc/valkey-8.1.3/src/server.c	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/server.c	2025-09-04 14:09:52.178355900 +0900
@@ -40,7 +40,7 @@
 #include "latency.h"
 #include "mt19937-64.h"
 #include "functions.h"
-#include "hdr_histogram.h"
+#include <hdr/hdr_histogram.h>
 #include "syscheck.h"
 #include "threads_mngr.h"
 #include "fmtargs.h"
--- origsrc/valkey-8.1.3/src/unit/CMakeLists.txt	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/unit/CMakeLists.txt	2025-09-05 13:02:39.017065500 +0900
@@ -22,6 +22,9 @@ endif ()
 add_library(valkeylib STATIC ${VALKEY_SERVER_SRCS})
 target_compile_options(valkeylib PRIVATE "${COMPILE_FLAGS}")
 target_compile_definitions(valkeylib PRIVATE "${COMPILE_DEFINITIONS}")
+if (HIREDIS_FOUND)
+    target_include_directories(valkeylib PRIVATE ${HIREDIS_INCLUDE_DIRS})
+endif ()
 
 add_executable(valkey-unit-tests ${UNIT_TEST_SRCS})
 target_compile_options(valkey-unit-tests PRIVATE "${COMPILE_FLAGS}")
@@ -49,6 +52,7 @@ target_link_libraries(
     lualib
     hdr_histogram
     hiredis
+    ${ALLOCATOR_LIB}
     ${VALKEY_SERVER_LDFLAGS})
 
 if (USE_TLS)
--- origsrc/valkey-8.1.3/src/util.c	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/util.c	2025-09-05 08:40:50.037802500 +0900
@@ -29,7 +29,11 @@
  */
 
 #include "fmacros.h"
+#if defined(USE_SYSTEM_FPCONV)
+#include <fpconv.h>
+#else
 #include "fpconv_dtoa.h"
+#endif
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
--- origsrc/valkey-8.1.3/src/valkey-benchmark.c	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/valkey-benchmark.c	2025-09-05 09:16:02.028765100 +0900
@@ -43,7 +43,9 @@
 #include <pthread.h>
 #include <stdatomic.h>
 
+#if !defined(NO_SDSCOMPAT_H)
 #include <sdscompat.h> /* Use hiredis' sds compat header that maps sds calls to their hi_ variants */
+#endif
 #include <sds.h>       /* Use hiredis sds. */
 #include "ae.h"
 #include <hiredis.h>
@@ -56,7 +58,7 @@
 #include "dict.h"
 #include "zmalloc.h"
 #include "crc16_slottable.h"
-#include "hdr_histogram.h"
+#include <hdr/hdr_histogram.h>
 #include "cli_common.h"
 #include "mt19937-64.h"
 
@@ -916,7 +918,9 @@ static void showLatencyReport(void) {
             /* After the 2 milliseconds latency to have percentages split
              * by decimals will just add a lot of noise to the output. */
             if (iter.highest_equivalent_value > 2000) {
+#if !defined(USE_SYSTEM_HDR_HISTOGRAM)
                 hdr_iter_linear_set_value_units_per_bucket(&iter, 1000);
+#endif
             }
             previous_cumulative_count = cumulative_count;
         }
--- origsrc/valkey-8.1.3/src/valkey-cli.c	2025-07-07 16:18:20.000000000 +0900
+++ src/valkey-8.1.3/src/valkey-cli.c	2025-09-05 08:39:58.348460800 +0900
@@ -56,7 +56,9 @@
 #include <openssl/err.h>
 #include <hiredis_ssl.h>
 #endif
+#if !defined(NO_SDSCOMPAT_H)
 #include <sdscompat.h> /* Use hiredis' sds compat header that maps sds calls to their hi_ variants */
+#endif
 #include <sds.h>       /* use sds.h from hiredis, so that only one set of sds functions will be present in the binary */
 #include "dict.h"
 #include "adlist.h"
@@ -3308,7 +3310,11 @@ static void repl(void) {
             if (argv == NULL) {
                 printf("Invalid argument(s)\n");
                 fflush(stdout);
+#if defined(USE_SYSTEM_LINENOISE)
+                if (history) linenoiseHistoryAdd(line);
+#else
                 if (history) linenoiseHistoryAdd(line, 0);
+#endif
                 if (historyfile) linenoiseHistorySave(historyfile);
                 linenoiseFree(line);
                 continue;
@@ -3337,7 +3343,11 @@ static void repl(void) {
             /* Always keep in-memory history. But for commands with sensitive information,
              * avoid writing them to the history file. */
             int is_sensitive = isSensitiveCommand(argc - skipargs, argv + skipargs);
+#if defined(USE_SYSTEM_LINENOISE)
+            if (history) linenoiseHistoryAdd(line);
+#else
             if (history) linenoiseHistoryAdd(line, is_sensitive);
+#endif
             if (!is_sensitive && historyfile) linenoiseHistorySave(historyfile);
 
             if (strcasecmp(argv[0], "quit") == 0 || strcasecmp(argv[0], "exit") == 0) {

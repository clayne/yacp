--- origsrc/folly-2023.12.11.00/CMake/folly-deps.cmake	2023-12-09 12:38:13.000000000 +0900
+++ src/folly-2023.12.11.00/CMake/folly-deps.cmake	2023-12-15 08:48:41.530988200 +0900
@@ -169,12 +169,14 @@ check_cxx_symbol_exists(swapcontext ucon
 cmake_pop_check_state()
 
 set(FOLLY_USE_SYMBOLIZER OFF)
-CHECK_INCLUDE_FILE_CXX(elf.h FOLLY_HAVE_ELF)
+if (NOT CYGWIN)
+  CHECK_INCLUDE_FILE_CXX(elf.h FOLLY_HAVE_ELF)
+endif()
 find_package(Backtrace)
 
 set(FOLLY_HAVE_BACKTRACE ${Backtrace_FOUND})
 set(FOLLY_HAVE_DWARF ${LIBDWARF_FOUND})
-if (NOT WIN32 AND NOT APPLE)
+if (NOT WIN32 AND NOT APPLE AND NOT CYGWIN)
   set(FOLLY_USE_SYMBOLIZER ON)
 endif()
 message(STATUS "Setting FOLLY_USE_SYMBOLIZER: ${FOLLY_USE_SYMBOLIZER}")
--- origsrc/folly-2023.12.11.00/CMakeLists.txt	2023-12-09 12:38:13.000000000 +0900
+++ src/folly-2023.12.11.00/CMakeLists.txt	2023-12-15 11:33:37.521400200 +0900
@@ -436,6 +436,9 @@ add_library(folly
   $<TARGET_OBJECTS:folly_base>
 )
 set_property(TARGET folly PROPERTY VERSION ${PACKAGE_VERSION})
+if (DEFINED SOVERSION)
+  set_property(TARGET folly PROPERTY SOVERSION "${SOVERSION}")
+endif()
 apply_folly_compile_options_to_target(folly)
 target_compile_features(folly INTERFACE cxx_generic_lambdas)
 
@@ -447,6 +450,9 @@ add_library(folly_test_util
   ${FOLLY_DIR}/test/JsonTestUtil.cpp
 )
 set_property(TARGET folly_test_util PROPERTY VERSION ${PACKAGE_VERSION})
+if (DEFINED SOVERSION)
+  set_property(TARGET folly_test_util PROPERTY SOVERSION "${SOVERSION}")
+endif()
 target_link_libraries(folly_test_util
   PUBLIC
     ${BOOST_LIBRARIES}
--- origsrc/folly-2023.12.11.00/folly/CMakeLists.txt	2023-12-09 12:38:13.000000000 +0900
+++ src/folly-2023.12.11.00/folly/CMakeLists.txt	2023-12-15 11:47:20.024991000 +0900
@@ -17,6 +17,9 @@ add_library(
     Benchmark.cpp
 )
 set_property(TARGET follybenchmark PROPERTY VERSION ${PACKAGE_VERSION})
+if (DEFINED SOVERSION)
+  set_property(TARGET follybenchmark PROPERTY SOVERSION "${SOVERSION}")
+endif()
 target_link_libraries(follybenchmark PUBLIC folly)
 apply_folly_compile_options_to_target(follybenchmark)
 install(
--- origsrc/folly-2023.12.11.00/folly/memory/Malloc.h	2023-12-09 12:38:13.000000000 +0900
+++ src/folly-2023.12.11.00/folly/memory/Malloc.h	2023-12-15 10:22:14.442068700 +0900
@@ -384,6 +384,7 @@ inline size_t goodMallocSize(size_t minS
     return 0;
   }
 
+#if defined(USE_JEMALLOC)
   if (!canNallocx()) {
     // No nallocx - no smarts
     return minSize;
@@ -393,6 +394,9 @@ inline size_t goodMallocSize(size_t minS
   // a goodMallocSize if you want minSize
   auto rv = nallocx(minSize, 0);
   return rv ? rv : minSize;
+#else
+  return minSize;
+#endif
 }
 
 // We always request "good" sizes for allocation, so jemalloc can
@@ -469,11 +473,15 @@ inline void* checkedRealloc(void* ptr, s
  * @param size Size to free
  */
 inline void sizedFree(void* ptr, size_t size) {
+#if defined(USE_JEMALLOC)
   if (canSdallocx()) {
     sdallocx(ptr, size, 0);
   } else {
     free(ptr);
   }
+#else
+  free(ptr);
+#endif
 }
 
 /**
--- origsrc/folly-2023.12.11.00/folly/portability/Stdlib.cpp	2023-12-09 12:38:13.000000000 +0900
+++ src/folly-2023.12.11.00/folly/portability/Stdlib.cpp	2023-12-15 09:32:56.263127300 +0900
@@ -146,6 +146,7 @@ int unsetenv(const char* name) {
 
 #include <string>
 #include <vector>
+#include <unistd.h>
 
 extern "C" int clearenv() {
   std::vector<std::string> data;
--- origsrc/folly-2023.12.11.00/folly/portability/SysSyscall.h	2023-12-09 12:38:13.000000000 +0900
+++ src/folly-2023.12.11.00/folly/portability/SysSyscall.h	2023-12-15 08:35:15.177964600 +0900
@@ -21,7 +21,7 @@
 #include <folly/CPortability.h>
 #include <folly/Portability.h>
 
-#if !defined(_WIN32)
+#if !defined(_WIN32) && !defined(__CYGWIN__)
 
 #include <unistd.h>
 
@@ -57,7 +57,7 @@ namespace detail {
 //  mimic: syscall(2), linux
 template <typename... A>
 FOLLY_ERASE long linux_syscall(long number, A... a) {
-#if defined(_WIN32) || (defined(__EMSCRIPTEN__) && !defined(syscall))
+#if defined(__CYGWIN__) || defined(_WIN32) || (defined(__EMSCRIPTEN__) && !defined(syscall))
   errno = ENOSYS;
   return -1;
 #else
--- origsrc/folly-2023.12.11.00/folly/system/ThreadId.cpp	2023-12-09 12:38:13.000000000 +0900
+++ src/folly-2023.12.11.00/folly/system/ThreadId.cpp	2023-12-15 09:36:30.082232700 +0900
@@ -51,6 +51,8 @@ uint64_t getOSThreadIDSlow() {
   return uint64_t(tid);
 #elif defined(__EMSCRIPTEN__)
   return 0;
+#elif defined(__CYGWIN__)
+  return uint64_t(pthread_self());
 #else
   return uint64_t(syscall(FOLLY_SYS_gettid));
 #endif

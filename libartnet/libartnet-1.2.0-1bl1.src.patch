--- origsrc/libartnet-1.2.0/artnet/Makefile.am	2023-07-16 04:32:49.000000000 +0900
+++ src/libartnet-1.2.0/artnet/Makefile.am	2023-10-25 11:09:28.440122200 +0900
@@ -9,9 +9,9 @@ pkgincludedir = $(includedir)/artnet
 lib_LTLIBRARIES = libartnet.la
 libartnet_la_SOURCES = artnet.c private.h misc.c network.c receive.c \
                        transmit.c tod.c
-libartnet_la_LDFLAGS = -version-info 1:0:0
+libartnet_la_LDFLAGS = -no-undefined -version-info 1:0:0
 
 if USING_WIN32
-libartnet_la_LDFLAGS += -no-undefined -liphlpapi -lnetapi32 -lws2_32 -ldpnet
+libartnet_la_LDFLAGS += -liphlpapi -lnetapi32 -lws2_32 -ldpnet
 endif
 
--- origsrc/libartnet-1.2.0/artnet/network.c	2023-07-16 04:32:49.000000000 +0900
+++ src/libartnet-1.2.0/artnet/network.c	2023-10-25 11:22:32.264453100 +0900
@@ -536,6 +536,7 @@ int artnet_net_start(node n) {
       artnet_net_close(sock);
       return ARTNET_ENET;
     }
+#if defined(SO_TIMESTAMP)
     int timestampOn = 1;
     if (setsockopt(sock,
                    SOL_SOCKET,
@@ -544,6 +545,7 @@ int artnet_net_start(node n) {
                    sizeof(timestampOn)) == -1) {
       artnet_error("Failed to enable timestamping on %s", artnet_net_last_error());
     }
+#endif
 
 #ifdef WIN32
     // ### LH - 22.08.2008
@@ -567,7 +569,7 @@ int artnet_net_start(node n) {
       artnet_net_close(sock);
       return ARTNET_ENET;
     }
-#else
+#elif defined(SO_REUSEPORT)
 // allow reusing 6454 port _ 
     if (setsockopt(sock,
                    SOL_SOCKET,
@@ -641,7 +643,9 @@ int artnet_net_recv(node n, artnet_packe
   struct msghdr   msg;
   struct iovec    iov;
   char            ctrl[CMSG_SPACE(sizeof(struct timeval))];
+#if defined(SCM_TIMESTAMP)
   struct cmsghdr *cmsg = (struct cmsghdr *) &ctrl;
+#endif
 
   msg.msg_control      = (char *) ctrl;
   msg.msg_controllen   = sizeof(ctrl);
@@ -654,12 +658,14 @@ int artnet_net_recv(node n, artnet_packe
   iov.iov_len          = sizeof(p->data);
 
   len = recvmsg(n->sd, &msg, 0);
+#if defined(SCM_TIMESTAMP)
   if (cmsg->cmsg_level == SOL_SOCKET &&
       cmsg->cmsg_type  == SCM_TIMESTAMP &&
       cmsg->cmsg_len   == CMSG_LEN(sizeof(p->timestamp)))
   {
     memcpy(&p->timestamp, CMSG_DATA(cmsg), sizeof(p->timestamp));
   }
+#endif
   /*len = recvfrom(n->sd,
                  (char*) &(p->data), // char* for win32
                  sizeof(p->data),

--- origsrc/forestdb-1.2/CMakeLists.txt	2016-05-25 05:35:54.000000000 +0900
+++ src/forestdb-1.2/CMakeLists.txt	2024-09-25 10:58:55.356504900 +0900
@@ -20,7 +20,7 @@ IF (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.
                     ERROR_QUIET
                     OUTPUT_STRIP_TRAILING_WHITESPACE)
 ELSE (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)
-    SET(FORESTDB_VERSION "unknown")
+    SET(FORESTDB_VERSION "1.2")
 ENDIF (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.git)
 
 include_directories(BEFORE ${PROJECT_SOURCE_DIR}/option)
@@ -123,9 +123,9 @@ if (COUCHBASE_SERVER_BUILD)
 else()
   # If building outside CB server build, set required flags for the selected compiler.
     if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
-        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -Qunused-arguments -g -fomit-frame-pointer -pthread")
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Qunused-arguments -g -fomit-frame-pointer -pthread")
     elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
-        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -g -fomit-frame-pointer -pthread")
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -fomit-frame-pointer -pthread")
     elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4716 /W0")
     endif()
@@ -190,6 +190,9 @@ target_link_libraries(forestdb ${PTHREAD
                       ${ASYNC_IO_LIB} ${MALLOC_LIBRARIES} ${LIBRT}
                       ${BACKTRACE_LIBRARIES} ${PLATFORM_LIBRARY} ${CRYPTO_LIB})
 
+if (DEFINED SOVERSION)
+            set_target_properties(forestdb PROPERTIES SOVERSION "${SOVERSION}")
+endif()
 
 # Create objects libraries for the different "tools" parts forestdb, which can be reused
 # by various targets.
@@ -255,3 +258,10 @@ endif()
 # add top-level testing dir
 enable_testing()
 add_subdirectory("${PROJECT_SOURCE_DIR}/tests")
+
+set(prefix ${CMAKE_INSTALL_PREFIX})
+set(exec_prefix ${CMAKE_INSTALL_PREFIX})
+set(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+set(includedir ${CMAKE_INSTALL_PREFIX}/include)
+configure_file(${CMAKE_SOURCE_DIR}/forestdb.pc.in ${CMAKE_BINARY_DIR}/forestdb.pc @ONLY)
+install(FILES ${CMAKE_BINARY_DIR}/forestdb.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/forestdb-1.2/forestdb.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/forestdb-1.2/forestdb.pc.in	2024-09-25 10:51:13.791328300 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: forestdb
+Description: Fast Key-Value Storage Engine Based on Hierarchical B+-Tree Trie
+Version: @FORESTDB_VERSION@
+Libs: -L${libdir} -lforestdb
+Cflags: -I${includedir}
--- origsrc/forestdb-1.2/src/filemgr_ops_linux.cc	2016-05-25 05:35:54.000000000 +0900
+++ src/forestdb-1.2/src/filemgr_ops_linux.cc	2024-09-25 10:54:21.505987900 +0900
@@ -17,6 +17,7 @@
 
 #include <sys/types.h>
 #include <sys/stat.h>
+#include <sys/ioctl.h>
 #include <unistd.h>
 #include <stdint.h>
 #include <fcntl.h>
--- origsrc/forestdb-1.2/utils/timing.cc	2016-05-25 05:35:54.000000000 +0900
+++ src/forestdb-1.2/utils/timing.cc	2024-09-25 11:00:02.447566700 +0900
@@ -261,7 +261,7 @@ ts_nsec get_monotonic_ts() {
     }
 
     ts = (double)time * timebase.numer / timebase.denom;
-#elif defined(__linux__) || defined(__sun) || defined(__FreeBSD__)
+#elif defined(__linux__) || defined(__sun) || defined(__FreeBSD__) || defined(__CYGWIN__)
     /* Linux and Solaris can use clock_gettime */
     struct timespec tm;
     if (clock_gettime(CLOCK_MONOTONIC, &tm) == -1) {

--- origsrc/cpu_features-0.6.0/CMakeLists.txt	2020-10-15 18:09:51.000000000 +0900
+++ src/cpu_features-0.6.0/CMakeLists.txt	2020-10-18 17:56:04.578032300 +0900
@@ -152,6 +152,9 @@ if(PROCESSOR_IS_X86)
   endif()
 endif()
 add_library(CpuFeature::cpu_features ALIAS cpu_features)
+if (CYGWIN)
+  set_target_properties(cpu_features PROPERTIES SOVERSION 0)
+endif()
 
 #
 # program : list_cpu_features
@@ -183,7 +186,8 @@ if(BUILD_TESTING)
   set(CMAKE_CXX_STANDARD_REQUIRED ON)
   set(CMAKE_CXX_EXTENSIONS OFF) # prefer use of -std11 instead of -gnustd11
 
-  if(NOT TARGET gtest OR NOT TARGET gmock_main)
+  option(USE_SYSTEM_GTEST "use system gtest" ON)
+  if((NOT USE_SYSTEM_GTEST) AND (NOT TARGET gtest OR NOT TARGET gmock_main))
     # Download and unpack googletest at configure time.
     configure_file(
       cmake/googletest.CMakeLists.txt.in
@@ -257,3 +261,10 @@ install(
   DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/CpuFeatures"
   COMPONENT Devel
 )
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/cpu_features.pc.in ${CMAKE_BINARY_DIR}/cpu_features.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/cpu_features.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/cpu_features-0.6.0/cpu_features.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/cpu_features-0.6.0/cpu_features.pc.in	2020-10-18 18:17:03.075696700 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: cpu_features
+Description: Cross platform C99 library to get cpu features at runtime
+Version: @PROJECT_VERSION@
+Libs: -L${libdir} -lcpu_features
+Cflags: -I${includedir}
--- origsrc/cpu_features-0.6.0/src/cpuinfo_x86.c	2020-10-15 18:09:51.000000000 +0900
+++ src/cpu_features-0.6.0/src/cpuinfo_x86.c	2020-10-18 17:49:54.504904700 +0900
@@ -97,7 +97,7 @@
 // microarchitectures.
 #if defined(CPU_FEATURES_OS_WINDOWS)
 #include <windows.h>  // IsProcessorFeaturePresent
-#elif defined(CPU_FEATURES_OS_LINUX_OR_ANDROID)
+#elif defined(CPU_FEATURES_OS_LINUX_OR_ANDROID) || defined(__CYGWIN__)
 #include "internal/filesystem.h"         // Needed to parse /proc/cpuinfo
 #include "internal/stack_line_reader.h"  // Needed to parse /proc/cpuinfo
 #include "internal/string_view.h"        // Needed to parse /proc/cpuinfo
@@ -1239,7 +1239,7 @@ static void DetectSseViaOs(X86Features*
   features->ssse3 = GetDarwinSysCtlByName("hw.optional.supplementalsse3");
   features->sse4_1 = GetDarwinSysCtlByName("hw.optional.sse4_1");
   features->sse4_2 = GetDarwinSysCtlByName("hw.optional.sse4_2");
-#elif defined(CPU_FEATURES_OS_LINUX_OR_ANDROID)
+#elif defined(CPU_FEATURES_OS_LINUX_OR_ANDROID) || defined(__CYGWIN__)
   // Handling Linux platform through /proc/cpuinfo.
   const int fd = CpuFeatures_OpenFile("/proc/cpuinfo");
   if (fd >= 0) {
--- origsrc/cpu_features-0.6.0/test/CMakeLists.txt	2020-10-15 18:09:51.000000000 +0900
+++ src/cpu_features-0.6.0/test/CMakeLists.txt	2020-10-18 17:53:08.490969000 +0900
@@ -12,11 +12,11 @@ add_library(filesystem_for_testing files
 target_compile_definitions(filesystem_for_testing PUBLIC CPU_FEATURES_MOCK_FILESYSTEM)
 ##------------------------------------------------------------------------------
 add_library(hwcaps_for_testing hwcaps_for_testing.cc)
-target_link_libraries(hwcaps_for_testing filesystem_for_testing)
+target_link_libraries(hwcaps_for_testing string_view filesystem_for_testing)
 ##------------------------------------------------------------------------------
 add_library(stack_line_reader ../src/stack_line_reader.c)
 target_compile_definitions(stack_line_reader PUBLIC STACK_LINE_READER_BUFFER_SIZE=1024)
-target_link_libraries(stack_line_reader string_view)
+target_link_libraries(stack_line_reader string_view filesystem_for_testing)
 ##------------------------------------------------------------------------------
 add_library(stack_line_reader_for_test ../src/stack_line_reader.c)
 target_compile_definitions(stack_line_reader_for_test PUBLIC STACK_LINE_READER_BUFFER_SIZE=16)

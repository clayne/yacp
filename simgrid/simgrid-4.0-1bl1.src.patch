--- origsrc/simgrid-4.0/CMakeLists.txt	2025-03-12 06:42:09.000000000 +0900
+++ src/simgrid-4.0/CMakeLists.txt	2025-04-02 07:52:15.570677500 +0900
@@ -174,7 +174,9 @@ IF(CMAKE_SYSTEM_PROCESSOR MATCHES ".86|A
   if(CMAKE_SIZEOF_VOID_P EQUAL 4 AND CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
     message(STATUS "Disable fast raw contexts on x32 ABI.")
   else()
-    set(HAVE_RAW_CONTEXTS 1)
+    if (NOT CYGWIN)
+      set(HAVE_RAW_CONTEXTS 1)
+    endif()
   endif()
 ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64")
   message(STATUS "System processor: arm64 (${CMAKE_SYSTEM_PROCESSOR}, 64 bits)")
--- origsrc/simgrid-4.0/src/mc/api/RemoteApp.cpp	2025-03-12 06:42:09.000000000 +0900
+++ src/simgrid-4.0/src/mc/api/RemoteApp.cpp	2025-04-02 07:40:29.965513500 +0900
@@ -26,7 +26,9 @@
 #include <memory>
 #include <numeric>
 #include <string>
+#if !defined(__CYGWIN__)
 #include <sys/ptrace.h>
+#endif
 #include <sys/socket.h>
 #include <sys/un.h>
 #include <sys/wait.h>
--- origsrc/simgrid-4.0/src/mc/remote/AppSide.cpp	2025-03-12 06:42:09.000000000 +0900
+++ src/simgrid-4.0/src/mc/remote/AppSide.cpp	2025-04-02 07:43:19.157202400 +0900
@@ -35,7 +35,9 @@
 #include <cstdlib>
 #include <memory>
 #include <numeric>
+#if !defined(__CYGWIN__)
 #include <sys/ptrace.h>
+#endif
 #include <sys/socket.h>
 #include <sys/types.h>
 #include <sys/un.h>
--- origsrc/simgrid-4.0/src/mc/remote/CheckerSide.cpp	2025-03-12 06:42:09.000000000 +0900
+++ src/simgrid-4.0/src/mc/remote/CheckerSide.cpp	2025-04-02 07:43:33.640823700 +0900
@@ -26,7 +26,9 @@
 #include <boost/tokenizer.hpp>
 #include <csignal>
 #include <fcntl.h>
+#if !defined(__CYGWIN__)
 #include <sys/ptrace.h>
+#endif
 #include <sys/socket.h>
 #include <sys/un.h>
 #include <sys/wait.h>
--- origsrc/simgrid-4.0/src/smpi/internals/smpi_global.cpp	2025-03-12 06:42:09.000000000 +0900
+++ src/simgrid-4.0/src/smpi/internals/smpi_global.cpp	2025-04-02 07:36:36.437365500 +0900
@@ -39,7 +39,7 @@
 #include <papi.h>
 #endif
 
-#if not defined(__APPLE__) && not defined(__HAIKU__)
+#if not defined(__APPLE__) && not defined(__HAIKU__) && !defined(__CYGWIN__)
 #include <link.h>
 #endif
 
@@ -381,7 +381,7 @@ static void smpi_copy_file(const std::st
   close(fdout);
 }
 
-#if not defined(__APPLE__) && not defined(__HAIKU__)
+#if not defined(__APPLE__) && not defined(__HAIKU__) && !defined(__CYGWIN__)
 static int visit_libs(struct dl_phdr_info* info, size_t, void* data)
 {
   auto* libname    = static_cast<std::string*>(data);
@@ -413,7 +413,7 @@ static void smpi_init_privatization_dlop
                  libname.c_str());
       // get library name from path
       std::string fullpath = libname;
-#if not defined(__APPLE__) && not defined(__HAIKU__)
+#if not defined(__APPLE__) && not defined(__HAIKU__) && !defined(__CYGWIN__)
       xbt_assert(dl_iterate_phdr(visit_libs, &fullpath) != 0,
                  "Can't find a linked %s - check your settings in smpi/privatize-libs", fullpath.c_str());
       XBT_DEBUG("Extra lib to privatize '%s' found", fullpath.c_str());
--- origsrc/simgrid-4.0/src/smpi/smpicc.in	2025-03-12 06:42:09.000000000 +0900
+++ src/simgrid-4.0/src/smpi/smpicc.in	2025-04-02 08:25:13.640440000 +0900
@@ -22,6 +22,11 @@ else
     LINKER_UNDEFINED_ERROR="1"
 fi
 
+# Don't use -Wl,-z-defs on cygwin
+if [ -n "@CYGWIN@" ]; then
+    LINKER_UNDEFINED_ERROR=""
+fi
+
 list_set CFLAGS @SMPI_C_FLAGS@
 list_add LINKARGS
 if [ "x@APPLE@" = "x1" ]; then
--- origsrc/simgrid-4.0/src/smpi/smpicxx.in	2025-03-12 06:42:09.000000000 +0900
+++ src/simgrid-4.0/src/smpi/smpicxx.in	2025-04-02 08:25:23.824403200 +0900
@@ -24,6 +24,11 @@ else
     LINKER_UNDEFINED_ERROR="1"
 fi
 
+# Don't use -Wl,-z-defs on cygwin
+if [ -n "@CYGWIN@" ]; then
+    LINKER_UNDEFINED_ERROR=""
+fi
+
 if [ "x@APPLE@" = "x1" ]; then
     if [ "x${SMPI_PRETEND_CC}" = "x" ]; then
        list_add CXXFLAGS "-include" "@includedir@/smpi/smpi_helpers.h"
--- origsrc/simgrid-4.0/tools/cmake/Distrib.cmake	2025-03-12 06:42:09.000000000 +0900
+++ src/simgrid-4.0/tools/cmake/Distrib.cmake	2025-04-02 10:54:22.530410500 +0900
@@ -42,7 +42,7 @@ add_custom_target(simgrid_convert_TI_tra
     COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_HOME_DIRECTORY}/tools/simgrid_convert_TI_traces.py ${CMAKE_BINARY_DIR}/bin/simgrid_convert_TI_traces)
 
 # libraries
-install(TARGETS simgrid DESTINATION ${CMAKE_INSTALL_LIBDIR}/)
+install(TARGETS simgrid RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/)
 if("${CMAKE_SYSTEM}" MATCHES "Linux")
   install(TARGETS sthread DESTINATION ${CMAKE_INSTALL_LIBDIR}/)
 endif()
--- origsrc/simgrid-4.0/tools/cmake/MakeLib.cmake	2025-03-12 06:42:09.000000000 +0900
+++ src/simgrid-4.0/tools/cmake/MakeLib.cmake	2025-04-02 08:28:05.824741000 +0900
@@ -28,6 +28,10 @@ set_target_properties(simgrid PROPERTIES
 set_property(TARGET simgrid
              APPEND PROPERTY INCLUDE_DIRECTORIES "${INTERNAL_INCLUDES}")
 
+if (DEFINED SOVERSION)
+  set_target_properties(simgrid PROPERTIES SOVERSION "${SOVERSION}")
+endif()
+
 add_dependencies(simgrid maintainer_files)
 
 if("${CMAKE_SYSTEM}" MATCHES "Linux")

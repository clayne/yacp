--- origsrc/konoha-1.0.0/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/CMakeLists.txt	2024-10-12 20:49:12.099419800 +0900
@@ -35,11 +35,11 @@ if(NOT CMAKE_BUILD_TYPE)
 endif()
 set(KONOHA_BUILD_TYPE ${CMAKE_BUILD_TYPE})
 
-SET(CMAKE_C_FLAGS         "-Wall")
-SET(CMAKE_C_FLAGS_RELEASE "-O2 -g")
-SET(CMAKE_C_FLAGS_DEBUG   "-O0 -g3")
-SET(CMAKE_CXX_FLAGS_RELEASE "-Wall -O2 -g")
-SET(CMAKE_CXX_FLAGS_DEBUG   "-Wall -O0 -g3")
+#SET(CMAKE_C_FLAGS         "-Wall")
+#SET(CMAKE_C_FLAGS_RELEASE "-O2 -g")
+#SET(CMAKE_C_FLAGS_DEBUG   "-O0 -g3")
+#SET(CMAKE_CXX_FLAGS_RELEASE "-Wall -O2 -g")
+#SET(CMAKE_CXX_FLAGS_DEBUG   "-Wall -O0 -g3")
 # -Wold-style-cast 
 #if("${CMAKE_C_COMPILER}" STREQUAL "/usr/bin/gcc")
 #	set(CMAKE_OSX_ARCHITECTURES "i386;x86_64")
@@ -233,6 +233,7 @@ if(HAVE_PTHREAD)
 	set(ExtraLibs ${ExtraLibs} ${HAVE_PTHREAD})
 	set(MessageLibs ${MessageLibs} pthread)
 	set(K_USING_THREAD 1)
+	set(K_USING_PTHREAD 1)
 endif(HAVE_PTHREAD)
 
 if(HAVE_LIBMEMCACHED)
@@ -402,7 +403,7 @@ set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE
 set(_PACKAGE_NAME    ${PROJECT_NAME})
 set(_PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(_PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${_PACKAGE_VERSION})
-set(_KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(_KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 set(_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
 		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
 		${KONOHA_INCLUDE_DIRS}
@@ -412,7 +413,7 @@ add_definitions(-D_SETUP)
 add_library(${_PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
 set_target_properties(${_PACKAGE_NAME} PROPERTIES PREFIX "")
 target_link_libraries(${_PACKAGE_NAME} konoha ${PACKAGE_EXTRA_LIBRARY})
-install(TARGETS ${_PACKAGE_NAME} DESTINATION ${_KONOHA_PACKAGE_DIR})
+install(TARGETS ${_PACKAGE_NAME} RUNTIME DESTINATION ${_KONOHA_PACKAGE_DIR})
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${_KONOHA_PACKAGE_DIR})
 endmacro(create_package_project)
 
@@ -449,7 +450,7 @@ endif(DOXYGEN_FOUND)
 
 install(TARGETS konoha1 konoha 
 		RUNTIME DESTINATION bin
-		LIBRARY DESTINATION lib
+		ARCHIVE DESTINATION lib
 		)
 
 install(DIRECTORY include/ DESTINATION include 
--- origsrc/konoha-1.0.0/dist/script/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/dist/script/CMakeLists.txt	2024-10-13 12:28:40.097815600 +0900
@@ -1,7 +1,7 @@
 cmake_minimum_required(VERSION 2.6)
 
 project(dist)
-set(KONOHA_SCRIPT_DIR konoha/script/${KONOHA_VERSION})
+set(KONOHA_SCRIPT_DIR lib/konoha/script/${KONOHA_VERSION})
 
 file(GLOB files "${CMAKE_CURRENT_SOURCE_DIR}/[a-zA-Z]*")
 
--- origsrc/konoha-1.0.0/package/konoha.compiler/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.compiler/CMakeLists.txt	2024-10-13 12:17:02.269068600 +0900
@@ -1,34 +1,10 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 project(compiler)
 set(PACKAGE_SOURCE_CODE compiler.c)
 set(PACKAGE_SCRIPT_CODE compiler.k)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha ${PACKAGE_EXTRA_LIBRARY})
-
 add_executable(konohac "konohac.c")
 target_link_libraries(konohac konoha)
 install(TARGETS konohac RUNTIME DESTINATION bin)
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+add_konoha_package(compiler)
 
 enable_testing()
 set(k ${CMAKE_INSTALL_PREFIX}/bin/konohac)
--- origsrc/konoha-1.0.0/package/konoha.compiler.cpp/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.compiler.cpp/CMakeLists.txt	2024-10-13 12:18:59.240895200 +0900
@@ -8,7 +8,7 @@ set(PACKAGE_SCRIPT_CODE cpp.k)
 set(PACKAGE_NAME ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 
--- origsrc/konoha-1.0.0/package/konoha.compiler.java/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.compiler.java/CMakeLists.txt	2024-10-13 12:19:10.909153600 +0900
@@ -16,7 +16,7 @@ set(PACKAGE_SCRIPT_CODE java.k)
 set(PACKAGE_NAME ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/build.xml.cmake
         ${CMAKE_CURRENT_BINARY_DIR}/build.xml)
--- origsrc/konoha-1.0.0/package/konoha.compiler.js/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.compiler.js/CMakeLists.txt	2024-10-13 12:19:20.208700600 +0900
@@ -32,7 +32,7 @@ endif(LIB_V8_DIR)
 set(PACKAGE_NAME ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/konoha2js DESTINATION bin
--- origsrc/konoha-1.0.0/package/konoha.compiler.js/js.dom/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.compiler.js/js.dom/CMakeLists.txt	2024-10-13 12:33:23.238624300 +0900
@@ -15,7 +15,7 @@ set(PACKAGE_SCRIPT_CODE dom.k)
 set(PACKAGE_NAME    ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/js.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/js.${PROJECT_NAME})
 
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 
--- origsrc/konoha-1.0.0/package/konoha.compiler.js/js.jquery/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.compiler.js/js.jquery/CMakeLists.txt	2024-10-13 12:33:35.678236400 +0900
@@ -15,7 +15,7 @@ set(PACKAGE_SCRIPT_CODE jquery.k)
 set(PACKAGE_NAME    ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/js.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/js.${PROJECT_NAME})
 
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 
--- origsrc/konoha-1.0.0/package/konoha.compiler.optllvm/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.compiler.optllvm/CMakeLists.txt	2024-10-13 12:19:51.803896500 +0900
@@ -11,7 +11,7 @@ set(PACKAGE_SCRIPT_CODE optllvm.k)
 set(PACKAGE_NAME    ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 
 
 execute_process(
@@ -64,7 +64,7 @@ set_target_properties(${PACKAGE_NAME} PR
 set_target_properties(${PACKAGE_NAME} PROPERTIES OUTPUT_NAME ${KONOHA_PKG_NAME})
 target_link_libraries(${PACKAGE_NAME} konoha ${ExtraLibs})
 
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
+install(TARGETS ${PACKAGE_NAME} RUNTIME DESTINATION ${KONOHA_PACKAGE_DIR})
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/kl DESTINATION bin
         PERMISSIONS 
--- origsrc/konoha-1.0.0/package/konoha.curl/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.curl/CMakeLists.txt	2024-10-13 12:15:30.738153800 +0900
@@ -1,6 +1,3 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 project(curl)
 
 find_library(HAVE_LIBCURL NAMES curl)
@@ -8,24 +5,6 @@ if(HAVE_LIBCURL)
 
 set(PACKAGE_SOURCE_CODE curl.c)
 set(PACKAGE_SCRIPT_CODE curl.k)
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-	${CMAKE_CURRENT_SOURCE_DIR}/include ${CMAKE_CURRENT_BINARY_DIR}
-	${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha ${HAVE_LIBCURL})
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION
-	${KONOHA_PACKAGE_DIR})
-
+set(PACKAGE_EXTRA_LIBRARY ${HAVE_LIBCURL})
+add_konoha_package(curl)
 endif(HAVE_LIBCURL)
--- origsrc/konoha-1.0.0/package/konoha.dffi/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.dffi/CMakeLists.txt	2024-10-13 09:25:11.379528900 +0900
@@ -1,30 +1,7 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 if(USE_DFFI)
 project(dffi)
 set(PACKAGE_SOURCE_CODE dffi.c)
 set(PACKAGE_SCRIPT_CODE dffi.k)
 set(PACKAGE_EXTRA_LIBRARY ffi)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha ${PACKAGE_EXTRA_LIBRARY})
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+add_konoha_package(dffi)
 endif(USE_DFFI)
-
--- origsrc/konoha-1.0.0/package/konoha.dffi/dffi.c	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.dffi/dffi.c	2024-10-13 09:27:06.319936500 +0900
@@ -13,7 +13,7 @@
 */
 
 //#define MACOSX
-#include <ffi/ffi.h>
+#include <ffi.h>
 
 #include <unistd.h>
 
--- origsrc/konoha-1.0.0/package/konoha.dscript/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.dscript/CMakeLists.txt	2024-10-13 09:24:20.301718000 +0900
@@ -9,8 +9,8 @@ set(PACKAGE_DIST_CODE script/actsrv scri
 set(PACKAGE_NAME    ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-set(KONOHA_SCRIPT_DIR konoha/script/${KONOHA_VERSION})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_SCRIPT_DIR lib/konoha/script/${KONOHA_VERSION})
 
 #set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
 #		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
--- origsrc/konoha-1.0.0/package/konoha.gsl/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.gsl/CMakeLists.txt	2024-10-13 09:23:32.411116600 +0900
@@ -1,6 +1,3 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 project(gsl)
 find_library(HAVE_LIB_GSL NAMES gsl)
 if(HAVE_LIB_GSL)
@@ -15,25 +12,11 @@ set(PACKAGE_SOURCE_CODE
 	src/stats.c
 )
 set(PACKAGE_SCRIPT_CODE gsl.k)
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-add_definitions(-D_SETUP)
-
 find_library(LIB_GSLCBLAS gslcblas)
 if(NOT EXISTS ${LIB_GSLCBLAS})
 	message(FATAL_ERROR "libgslcblas not found.")
 endif()
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha ${HAVE_LIB_GSL} ${LIB_GSLCUBLAS} m)
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
+set(PACKAGE_EXTRA_LIBRARY ${HAVE_LIB_GSL} ${LIB_GSLCUBLAS} m)
+add_konoha_package(gsl)
 endif(HAVE_LIB_GSL)
 
--- origsrc/konoha-1.0.0/package/konoha.gwt/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.gwt/CMakeLists.txt	2024-10-13 05:37:02.629675800 +0900
@@ -51,7 +51,7 @@ set(PACKAGE_SCRIPT_CODE ./gwt.k)
 set(PACKAGE_NAME    ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 
 add_definitions(-DREDUCED -DANSI_DECLARATORS -DTRILIBRARY -DCDT_ONLY)
 add_definitions(-DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED)
@@ -84,7 +84,7 @@ set_target_properties(${PACKAGE_NAME} PR
 
 target_link_libraries(${PACKAGE_NAME} konoha gam ${PACKAGE_EXTRA_LIBRARY})
 
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
+install(TARGETS ${PACKAGE_NAME} RUNTIME DESTINATION ${KONOHA_PACKAGE_DIR})
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 
 endif(USE_GWT)
--- origsrc/konoha-1.0.0/package/konoha.i/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.i/CMakeLists.txt	2024-10-13 05:36:42.723056700 +0900
@@ -1,26 +1,4 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 project(i)
 set(PACKAGE_SOURCE_CODE i.c)
 set(PACKAGE_SCRIPT_CODE i.k)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha)
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+add_konoha_package(i)
--- origsrc/konoha-1.0.0/package/konoha.io/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.io/CMakeLists.txt	2024-10-13 05:34:55.598307100 +0900
@@ -1,44 +1,16 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 if("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
 	set(CMAKE_C_FLAGS "-fPIC")
 endif()
+find_package(pkgconfig)
+pkg_check_modules(MSGPACK msgpack-c)
+pkg_check_modules(OPENSSL openssl)
 
 project(io)
 set(PACKAGE_SOURCE_CODE src/io.c src/base64.c ./src/digest.c ./src/msgpack.c)
 set(PACKAGE_SCRIPT_CODE io.k)
-
-add_library(msgpack
-	third-party/msgpack-0.5.6/object.cpp
-	third-party/msgpack-0.5.6/objectc.c
-	third-party/msgpack-0.5.6/unpack.c
-	third-party/msgpack-0.5.6/version.c
-	third-party/msgpack-0.5.6/vrefbuffer.c
-	third-party/msgpack-0.5.6/zone.c
-)
-
-add_library(md5
-	third-party/ext/md5.c
-)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS}
-		${CMAKE_CURRENT_SOURCE_DIR}/third-party/msgpack-0.5.6
-		${CMAKE_CURRENT_SOURCE_DIR}/third-party/ext)
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha msgpack md5)
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+set(PACKAGE_EXTRA_LIBRARY ${MSGPACK_LIBRARIES} ${OPENSSL_LIBRARIES})
+add_definitions(-DMSGPACK_USE_LEGACY_NAME_AS_FLOAT)
+add_definitions(-DMSGPACK_OBJECT_RAW=MSGPACK_OBJECT_BIN)
+add_definitions(-Dmsgpack_pack_raw=msgpack_pack_str)
+add_definitions(-Dmsgpack_pack_raw_body=msgpack_pack_str_body)
+add_konoha_package(io)
--- origsrc/konoha-1.0.0/package/konoha.io/src/msgpack.c	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.io/src/msgpack.c	2024-10-13 05:35:28.998353600 +0900
@@ -135,7 +135,7 @@ static ktype_t msgpack_read(CTX ctx, msg
 		sfp[0].fvalue = obj.via.dec;
 		return CLASS_Float;
 	case MSGPACK_OBJECT_RAW:
-		KNH_SETv(ctx, sfp[0].o, new_String(ctx, obj.via.raw.ptr));
+		KNH_SETv(ctx, sfp[0].o, new_String(ctx, obj.via.str.ptr));
 		return CLASS_String;
 	case MSGPACK_OBJECT_ARRAY:
 	{
@@ -157,7 +157,7 @@ static ktype_t msgpack_read(CTX ctx, msg
 			msgpack_object_kv *map_end = obj.via.map.ptr + obj.via.map.size;
 			KNH_SETv(ctx, sfp[0].o, new_DataMap(ctx/*, obj.via.map.size*/));
 			for (; map < map_end; map++) {
-				const char *key = map->key.via.raw.ptr;
+				const char *key = map->key.via.str.ptr;
 				ktype_t type = msgpack_read(ctx, map->val, sfp+1);
 				knh_boxing(ctx, sfp+1, type);
 				klr_setesp(ctx, sfp+2);
--- origsrc/konoha-1.0.0/package/konoha.kinect/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.kinect/CMakeLists.txt	2024-10-13 05:07:41.019549100 +0900
@@ -54,7 +54,7 @@ endif(NOT OPENGL_FOUND)
 set(PACKAGE_NAME    ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 
 set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
 		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
@@ -71,7 +71,7 @@ opencv_calib3d opencv_core opencv_featur
 opencv_highgui opencv_imgproc opencv_legacy opencv_ml
 opencv_objdetect opencv_ts opencv_video OpenNI ${NITE_LIBRARIES})
 
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
+install(TARGETS ${PACKAGE_NAME} RUNTIME DESTINATION ${KONOHA_PACKAGE_DIR})
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 
 endif(USE_KINECT)
--- origsrc/konoha-1.0.0/package/konoha.liboauth/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.liboauth/CMakeLists.txt	2024-10-13 05:09:14.058682400 +0900
@@ -1,6 +1,3 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 project(liboauth)
 find_library(HAVE_LIBOAUTH NAMES oauth)
 
@@ -8,25 +5,7 @@ if(HAVE_LIBOAUTH)
 
 set(PACKAGE_SOURCE_CODE liboauth.c)
 set(PACKAGE_SCRIPT_CODE liboauth.k)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha ${HAVE_LIBOAUTH})
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+set(PACKAGE_EXTRA_LIBRARY ${HAVE_LIBOAUTH})
+add_konoha_package(liboauth HAVE_CAIRO_CAIRO_H HAVE_LIB_CAIRO)
 endif(HAVE_LIBOAUTH)
 
--- origsrc/konoha-1.0.0/package/konoha.math/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.math/CMakeLists.txt	2024-10-13 05:04:25.441429700 +0900
@@ -1,27 +1,5 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 project(math)
 set(PACKAGE_SOURCE_CODE math.c)
 set(PACKAGE_SCRIPT_CODE math.k)
 set(PACKAGE_EXTRA_LIBRARY m)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha ${PACKAGE_EXTRA_LIBRARY})
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+add_konoha_package(math)
--- origsrc/konoha-1.0.0/package/konoha.memcached/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.memcached/CMakeLists.txt	2024-10-13 05:03:52.520256400 +0900
@@ -1,30 +1,9 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 project(memcached)
 find_library(HAVE_LIB_MEMCACHED memcached)
 if(HAVE_LIB_MEMCACHED)
 set(PACKAGE_SOURCE_CODE memcached.c)
 set(PACKAGE_SCRIPT_CODE memcached.k)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha ${HAVE_LIB_MEMCACHED})
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+set(PACKAGE_EXTRA_LIBRARY ${HAVE_LIB_MEMCACHED})
+add_konoha_package(memcached)
 endif(HAVE_LIB_MEMCACHED)
 
--- origsrc/konoha-1.0.0/package/konoha.memcached/memcached.c	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.memcached/memcached.c	2024-10-12 20:24:42.916903700 +0900
@@ -786,8 +786,8 @@ KMETHOD Memcache_serverByKey(CTX ctx, ks
 					));
 	}
 	kTuple *t = new_ReturnObject(ctx, sfp);
-	KNH_SETv(ctx, t->fields[0], new_String(ctx, server->hostname));
-	t->ifields[1] = (kint_t)server->port;
+	KNH_SETv(ctx, t->fields[0], new_String(ctx, memcached_server_name(server)));
+	t->ifields[1] = (kint_t)memcached_server_port(server);
 	memcached_server_free((memcached_server_st *)server);
 	RETURN_(t);
 }
--- origsrc/konoha-1.0.0/package/konoha.mpi/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.mpi/CMakeLists.txt	2024-10-13 05:05:12.928495800 +0900
@@ -18,7 +18,7 @@ set(PACKAGE_SOURCE_CODE
     src/pt2pt.c
     src/general.c
 )
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 
 # - check MPI library
 # --> require MPI module
@@ -45,7 +45,7 @@ if(MPI_LIBRARIES)
     add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
     set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
     target_link_libraries(${PACKAGE_NAME} konoha ${MPI_LIBRARIES})
-    install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
+    install(TARGETS ${PACKAGE_NAME} RUNTIME DESTINATION ${KONOHA_PACKAGE_DIR})
     install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 
 endif(MPI_LIBRARIES)
--- origsrc/konoha-1.0.0/package/konoha.nfc/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.nfc/CMakeLists.txt	2024-10-13 05:02:18.066192000 +0900
@@ -1,6 +1,3 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 project(nfc)
 find_library(HAVE_LIB_NFC nfc)
 
@@ -8,25 +5,7 @@ if(HAVE_LIB_NFC)
 
 set(PACKAGE_SOURCE_CODE nfc.c)
 set(PACKAGE_SCRIPT_CODE nfc.k)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha ${HAVE_LIB_NFC})
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+set(PACKAGE_EXTRA_LIBRARY ${HAVE_LIB_NFC})
+add_konoha_package(nfc)
 endif(HAVE_LIB_NFC)
 
--- origsrc/konoha-1.0.0/package/konoha.nfc/nfc.c	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.nfc/nfc.c	2024-10-12 20:44:02.689629700 +0900
@@ -49,7 +49,7 @@ static void Pasori_init(CTX ctx, kRawPtr
 static void Pasori_free(CTX ctx, kRawPtr *po)
 {
 	if (po->rawptr != NULL) {
-		nfc_disconnect((nfc_device_t *)po->rawptr);
+		nfc_close((nfc_device *)po->rawptr);
 		po->rawptr = NULL;
 	}
 }
@@ -61,7 +61,7 @@ static void Pasori_free(CTX ctx, kRawPtr
 //## @Native Pasori Pasori.new();
 KMETHOD Pasori_new(CTX ctx, ksfp_t *sfp _RIX)
 {
-	nfc_device_t *pnd = nfc_connect(NULL);
+	nfc_device *pnd = nfc_open(NULL, NULL);
 	if (pnd == NULL) {
 		KNH_NTRACE2(ctx, "nfc_connect", K_FAILED, KNH_LDATA0);
 		kObjectoNULL(ctx, sfp[0].o);
@@ -73,16 +73,16 @@ KMETHOD Pasori_new(CTX ctx, ksfp_t *sfp
 //## @Native String Pasori.readId();
 KMETHOD Pasori_readId(CTX ctx, ksfp_t *sfp _RIX)
 {
-	nfc_device_t *pnd = RawPtr_to(nfc_device_t *, sfp[0]);
+	nfc_device *pnd = RawPtr_to(nfc_device *, sfp[0]);
 	if (pnd == NULL) RETURN_(KNH_TNULL(String));
 	const uint8_t uiPollNr = 20;
 	const uint8_t uiPeriod = 2;
 	const size_t modSize = 1;
-	const nfc_modulation_t mod[] = {
+	const nfc_modulation mod[] = {
 		{NMT_FELICA/* nmt */, NBR_212/* nbr */}
 	};
 	int res;
-	nfc_target_t nt;
+	nfc_target nt;
 	nfc_initiator_init(pnd);
 	res = nfc_initiator_poll_target(pnd, mod, modSize, uiPollNr, uiPeriod, &nt);
 	while (res == 0) {
@@ -92,9 +92,9 @@ KMETHOD Pasori_readId(CTX ctx, ksfp_t *s
 		res = nfc_initiator_poll_target(pnd, mod, modSize, uiPollNr, uiPeriod, &nt);
 	}
 	DBG_ASSERT(nt.nm.nmt == NMT_FELICA);
-	nfc_felica_info_t nfc = nt.nti.nfi;
+	nfc_felica_info nfc = nt.nti.nfi;
 	char idm[32];
-	byte_t *d = nfc.abtId;
+	uint8_t *d = nfc.abtId;
 	snprintf(idm, 32, "%02x%02x%02x%02x%02x%02x%02x%02x", d[0], d[1], d[2], d[3], d[4], d[5], d[6], d[7]);
 	RETURN_(new_String(ctx, idm));
 }
--- origsrc/konoha-1.0.0/package/konoha.ntrace/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.ntrace/CMakeLists.txt	2024-10-13 05:00:30.161153700 +0900
@@ -1,26 +1,4 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 project(ntrace)
 set(PACKAGE_SOURCE_CODE ntrace.c)
 set(PACKAGE_SCRIPT_CODE ntrace.k)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha)
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+add_konoha_package(ntrace)
--- origsrc/konoha-1.0.0/package/konoha.opengl/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.opengl/CMakeLists.txt	2024-10-13 04:59:54.488323300 +0900
@@ -9,23 +9,5 @@ find_package(OpenGL)
 
 if(${OpenGL_FOUND})
 set(PACKAGE_EXTRA_LIBRARY ${GLUT_LIBRARY} ${OPENGL_LIBRARY})
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha)
-target_link_libraries(${PACKAGE_NAME} ${PACKAGE_EXTRA_LIBRARY})
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
+add_konoha_package(opengl)
 endif(${OpenGL_FOUND})
-
--- origsrc/konoha-1.0.0/package/konoha.posix/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.posix/CMakeLists.txt	2024-10-13 04:38:08.784749400 +0900
@@ -8,25 +8,6 @@ else(MINGW)
 project(posix)
 set(PACKAGE_SOURCE_CODE posix.c)
 set(PACKAGE_SCRIPT_CODE posix.k)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha)
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+add_konoha_package(posix)
 endif(MINGW)
 
--- origsrc/konoha-1.0.0/package/konoha.proc/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.proc/CMakeLists.txt	2024-10-13 04:37:56.347487300 +0900
@@ -1,6 +1,3 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 if(MINGW)
 	message(STATUS "Konoha MinGW is not supprot konoha.proc package")
 else(MINGW)
@@ -8,25 +5,6 @@ else(MINGW)
 project(proc)
 set(PACKAGE_SOURCE_CODE proc.c)
 set(PACKAGE_SCRIPT_CODE proc.k)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha)
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+add_konoha_package(proc)
 endif(MINGW)
 
--- origsrc/konoha-1.0.0/package/konoha.qt4/CMakeLists.txt	2012-03-07 15:52:14.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.qt4/CMakeLists.txt	2024-10-13 04:30:43.363249500 +0900
@@ -29,7 +29,7 @@ include(${QT_USE_FILE})
 set(PACKAGE_NAME    ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 
 set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
 		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
@@ -44,7 +44,7 @@ set_target_properties(${PACKAGE_NAME} PR
 target_link_libraries(${PACKAGE_NAME} konoha)
 target_link_libraries(${PACKAGE_NAME} ${PACKAGE_EXTRA_LIBRARY})
 
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
+install(TARGETS ${PACKAGE_NAME} RUNTIME DESTINATION ${KONOHA_PACKAGE_DIR})
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 
 endif(USE_QT4)
--- origsrc/konoha-1.0.0/package/konoha.qt4.kinect/CMakeLists.txt	2012-03-07 15:52:15.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.qt4.kinect/CMakeLists.txt	2024-10-13 04:30:08.722690400 +0900
@@ -53,7 +53,7 @@ endif(NOT OPENGL_FOUND)
 set(PACKAGE_NAME    ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 
 set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
 		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
@@ -70,7 +70,7 @@ opencv_calib3d opencv_core opencv_featur
 opencv_highgui opencv_imgproc opencv_legacy opencv_ml
 opencv_objdetect opencv_ts opencv_video OpenNI ${NITE_LIBRARIES})
 
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
+install(TARGETS ${PACKAGE_NAME} RUNTIME DESTINATION ${KONOHA_PACKAGE_DIR})
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 
 endif(USE_KINECT)
--- origsrc/konoha-1.0.0/package/konoha.qt4.opencv/CMakeLists.txt	2012-03-07 15:52:15.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.qt4.opencv/CMakeLists.txt	2024-10-13 04:29:05.612797000 +0900
@@ -31,7 +31,7 @@ endif()
 set(PACKAGE_NAME    ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 
 set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
 		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
@@ -49,7 +49,7 @@ opencv_calib3d opencv_core opencv_featur
 opencv_highgui opencv_imgproc opencv_legacy opencv_ml
 opencv_objdetect opencv_ts opencv_video)
 
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
+install(TARGETS ${PACKAGE_NAME} RUHTIME DESTINATION ${KONOHA_PACKAGE_DIR})
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 
 endif(USE_OPENCV)
--- origsrc/konoha-1.0.0/package/konoha.qt4.physics/CMakeLists.txt	2012-03-07 15:52:15.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.qt4.physics/CMakeLists.txt	2024-10-13 04:29:15.761166300 +0900
@@ -51,7 +51,7 @@ endif(NOT OPENGL_FOUND)
 set(PACKAGE_NAME    ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 
 set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
 		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
@@ -67,7 +67,7 @@ set_target_properties(${PACKAGE_NAME} PR
 target_link_libraries(${PACKAGE_NAME} konoha)
 target_link_libraries(${PACKAGE_NAME} ${PACKAGE_EXTRA_LIBRARY} ${OPENGL_LIBRARIES} Box2D)
 
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
+install(TARGETS ${PACKAGE_NAME} RUNTIME DESTINATION ${KONOHA_PACKAGE_DIR})
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 
 endif(USE_PHYSICS)
--- origsrc/konoha-1.0.0/package/konoha.signal/CMakeLists.txt	2012-03-07 15:52:15.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.signal/CMakeLists.txt	2024-10-13 04:23:17.643849000 +0900
@@ -1,6 +1,3 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 if(MINGW)
 	message(STATUS "Konoha MinGW is not supprot konoha.signal package")
 else(MINGW)
@@ -8,24 +5,5 @@ else(MINGW)
 project(signal)
 set(PACKAGE_SOURCE_CODE signal.c)
 set(PACKAGE_SCRIPT_CODE signal.k)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha)
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+add_konoha_package(signal)
 endif(MINGW)
--- origsrc/konoha-1.0.0/package/konoha.socket/CMakeLists.txt	2012-03-07 15:52:15.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.socket/CMakeLists.txt	2024-10-13 04:21:00.597143100 +0900
@@ -1,6 +1,3 @@
-cmake_minimum_required(VERSION 2.6)
-set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE})
-
 if(MINGW)
 	message(STATUS "Konoha MinGW is not supprot konoha.socket package")
 else(MINGW)
@@ -8,25 +5,5 @@ else(MINGW)
 project(socket)
 set(PACKAGE_SOURCE_CODE socket_posix.c)
 set(PACKAGE_SCRIPT_CODE socket.k)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha)
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+add_konoha_package(socket)
 endif(MINGW)
-
--- origsrc/konoha-1.0.0/package/konoha.sql/CMakeLists.txt	2012-03-07 15:52:15.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.sql/CMakeLists.txt	2024-10-13 04:19:14.222247800 +0900
@@ -8,7 +8,7 @@ if(MYSQL_CONFIG)
 
 execute_process(
 	COMMAND ${MYSQL_CONFIG} --libs
-	OUTPUT_VARIABLE HAVE_LIBMYSQL
+	OUTPUT_VARIABLE PACKAGE_EXTRA_LIBRARY
 	OUTPUT_STRIP_TRAILING_WHITESPACE
 )
 execute_process(
@@ -18,8 +18,6 @@ execute_process(
 )
 string(REPLACE "-I" "" HAVE_MYSQL_H ${MYSQL_INCLUDE_DIR})
 
-if(HAVE_MYSQL_H)
-
 set(MessageLibs ${MessageLibs} mysql PARENT_SCOPE)
 
 set(PACKAGE_SCRIPT_CODE sql.k)
@@ -29,27 +27,6 @@ set(PACKAGE_SOURCE_CODE
 	src/dbapi.c
 	src/query.c
 )
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${INCLUDE_DIRS} ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS} ${HAVE_MYSQL_H}
-		)
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha ${HAVE_LIBMYSQL})
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
-endif(HAVE_MYSQL_H)
+add_konoha_package(sql HAVE_MYSQL_H)
 endif(MYSQL_CONFIG)
 
--- origsrc/konoha-1.0.0/package/konoha.sugar/CMakeLists.txt	2012-03-07 15:52:15.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.sugar/CMakeLists.txt	2024-10-13 04:14:41.660203400 +0900
@@ -7,7 +7,7 @@ set(PACKAGE_SCRIPT_CODE sugar.k)
 set(PACKAGE_NAME    ${PROJECT_NAME})
 set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
 set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
+set(KONOHA_PACKAGE_DIR lib/konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
 
 install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
 
--- origsrc/konoha-1.0.0/package/konoha.thread/CMakeLists.txt	2012-03-07 15:52:15.000000000 +0900
+++ src/konoha-1.0.0/package/konoha.thread/CMakeLists.txt	2024-10-13 04:11:28.895440800 +0900
@@ -4,23 +4,4 @@ set(CMAKE_BUILD_TYPE ${KONOHA_BUILD_TYPE
 project(thread)
 set(PACKAGE_SOURCE_CODE thread.c)
 set(PACKAGE_SCRIPT_CODE thread.k)
-
-set(PACKAGE_NAME    ${PROJECT_NAME})
-set(PACKAGE_VERSION ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH})
-set(PACKAGE_STRING  ${CMAKE_PROJECT_NAME}-${PACKAGE_VERSION})
-set(KONOHA_PACKAGE_DIR konoha/package/${KONOHA_VERSION}/konoha.${PROJECT_NAME})
-
-set(INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
-		${CMAKE_CURRENT_SOURCE_DIR}/include  ${CMAKE_CURRENT_BINARY_DIR}
-		${KONOHA_INCLUDE_DIRS})
-include_directories(${INCLUDE_DIRS})
-
-add_definitions(-D_SETUP)
-
-add_library(${PACKAGE_NAME} SHARED ${PACKAGE_SOURCE_CODE})
-set_target_properties(${PACKAGE_NAME} PROPERTIES PREFIX "")
-target_link_libraries(${PACKAGE_NAME} konoha)
-
-install(TARGETS ${PACKAGE_NAME} DESTINATION ${KONOHA_PACKAGE_DIR})
-install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/${PACKAGE_SCRIPT_CODE} DESTINATION ${KONOHA_PACKAGE_DIR})
-
+add_konoha_package(thread)
--- origsrc/konoha-1.0.0/src/main/os.c	2012-03-07 15:52:15.000000000 +0900
+++ src/konoha-1.0.0/src/main/os.c	2024-10-12 17:37:48.103031700 +0900
@@ -36,7 +36,9 @@
 #include <time.h>
 #include <sys/time.h>
 #include <sys/param.h>
+#if !defined(__CYGWIN__)
 #include <sys/sysctl.h>
+#endif
 #ifdef K_USING_MACOSX_
 #include <mach-o/dyld.h>
 #endif
--- origsrc/konoha-1.0.0/src/main/security.c	2012-03-07 15:52:15.000000000 +0900
+++ src/konoha-1.0.0/src/main/security.c	2024-10-12 17:38:18.856257600 +0900
@@ -51,7 +51,9 @@
 #include <netinet/in.h>
 #include <sys/param.h>
 #include <sys/uio.h>
+#if !defined(__CYGWIN__)
 #include <sys/sysctl.h>
+#endif
 #include <unistd.h>
 #endif
 #ifdef K_USING_MACOSX_

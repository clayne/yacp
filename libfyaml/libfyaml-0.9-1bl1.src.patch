--- origsrc/libfyaml-0.9/configure.ac	2023-09-25 23:37:29.000000000 +0900
+++ src/libfyaml-0.9/configure.ac	2023-10-26 10:46:18.997792500 +0900
@@ -239,6 +239,8 @@ AC_SUBST(HAVE_QSORT_R)
 AC_DEFINE_UNQUOTED([HAVE_QSORT_R], [$HAVE_QSORT_R], [Define to 1 if you have qsort_r available])
 AM_CONDITIONAL([HAVE_QSORT_R], [ test x$HAVE_QSORT_R = x1 ])
 
+PKG_CHECK_MODULES([XXHASH], [libxxhash])
+
 PKG_CHECK_MODULES(LIBYAML, [ yaml-0.1 ], HAVE_LIBYAML=1, HAVE_LIBYAML=0)
 
 # update with pkg-config's flags
--- origsrc/libfyaml-0.9/src/Makefile.am	2023-09-25 23:37:29.000000000 +0900
+++ src/libfyaml-0.9/src/Makefile.am	2023-10-26 10:49:14.384625100 +0900
@@ -27,7 +27,6 @@ libfyaml_la_SOURCES = \
 	lib/fy-walk.c lib/fy-walk.h \
 	lib/fy-path.c lib/fy-path.h \
 	lib/fy-composer.c lib/fy-composer.h \
-	xxhash/xxhash.c xxhash/xxhash.h \
 	util/fy-list.h \
 	util/fy-typelist.h \
 	util/fy-ctype.c util/fy-ctype.h \
@@ -42,13 +41,13 @@ libfyaml_la_SOURCES = \
 
 libfyaml_la_CPPFLAGS = $(AM_CPPFLAGS) \
 		       -I$(top_srcdir)/src/lib \
-		       -I$(top_srcdir)/src/xxhash \
+			$(XXHASH_CFLAGS) \
 		       -I$(top_srcdir)/src/util \
 		       -I$(top_srcdir)/src/thread
 libfyaml_la_CFLAGS = $(AM_CFLAGS)
 libfyaml_la_LDFLAGS = -no-undefined $(AM_LDFLAGS) $(AM_LIBLDFLAGS) \
 		      -version $(LIBTOOL_VERSION)
-libfyaml_la_LIBADD =
+libfyaml_la_LIBADD = $(XXHASH_LIBS)
 
 # blake3 section
 libfyaml_la_CPPFLAGS += -I$(top_srcdir)/src/blake3
@@ -127,13 +126,13 @@ libfyaml_parser_SOURCES = \
 libfyaml_parser_CPPFLAGS = $(AM_CPPFLAGS) \
 			   -I$(top_srcdir)/src/valgrind \
 			   -I$(top_srcdir)/src/lib \
-			   -I$(top_srcdir)/src/xxhash \
+				$(XXHASH_CFLAGS) \
 			   -I$(top_srcdir)/src/util \
 			   -I$(top_srcdir)/src/thread
 libfyaml_parser_LDADD = $(AM_LDADD) $(LIBYAML_LIBS) libfyaml.la
 libfyaml_parser_CFLAGS = $(AM_CFLAGS) $(LIBYAML_CFLAGS)
 
-libfyaml_parser_LDFLAGS = $(AM_LDFLAGS) -static
+libfyaml_parser_LDFLAGS = $(AM_LDFLAGS)
 endif
 endif
 
@@ -149,13 +148,13 @@ fy_thread_SOURCES = \
 fy_thread_CPPFLAGS = $(AM_CPPFLAGS) \
 			   -I$(top_srcdir)/src/valgrind \
 			   -I$(top_srcdir)/src/lib \
-			   -I$(top_srcdir)/src/xxhash \
+				$(XXHASH_CFLAGS) \
 			   -I$(top_srcdir)/src/util \
 			   -I$(top_srcdir)/src/thread
 fy_thread_LDADD = $(AM_LDADD) $(LIBYAML_LIBS) libfyaml.la
 fy_thread_CFLAGS = $(AM_CFLAGS) $(LIBYAML_CFLAGS)
 
-fy_thread_LDFLAGS = $(AM_LDFLAGS) -static
+fy_thread_LDFLAGS = $(AM_LDFLAGS)
 endif
 
 # fy-b3sum
@@ -170,14 +169,14 @@ fy_b3sum_SOURCES = \
 fy_b3sum_CPPFLAGS = $(AM_CPPFLAGS) \
 			   -I$(top_srcdir)/src/valgrind \
 			   -I$(top_srcdir)/src/lib \
-			   -I$(top_srcdir)/src/xxhash \
+				$(XXHASH_CFLAGS) \
 			   -I$(top_srcdir)/src/util \
 			   -I$(top_srcdir)/src/thread \
 			   -I$(top_srcdir)/src/blake3
 fy_b3sum_LDADD = $(AM_LDADD) $(LIBYAML_LIBS) libfyaml.la
 fy_b3sum_CFLAGS = $(AM_CFLAGS) $(LIBYAML_CFLAGS)
 
-fy_b3sum_LDFLAGS = $(AM_LDFLAGS) -static
+fy_b3sum_LDFLAGS = $(AM_LDFLAGS)
 endif
 
 bin_PROGRAMS += fy-tool
--- origsrc/libfyaml-0.9/src/internal/libfyaml-parser.c	2023-09-25 23:37:29.000000000 +0900
+++ src/libfyaml-0.9/src/internal/libfyaml-parser.c	2023-10-26 10:49:50.417846600 +0900
@@ -33,7 +33,7 @@
 
 #include "fy-valgrind.h"
 
-#include "xxhash.h"
+#include <xxhash.h>
 
 #define QUIET_DEFAULT			false
 #define INCLUDE_DEFAULT			""
--- origsrc/libfyaml-0.9/src/lib/fy-accel.c	2023-09-25 23:37:29.000000000 +0900
+++ src/libfyaml-0.9/src/lib/fy-accel.c	2023-10-26 10:50:23.880462300 +0900
@@ -19,7 +19,7 @@
 
 #include "fy-accel.h"
 
-#include "xxhash.h"
+#include <xxhash.h>
 
 /* powers of two and the closest primes before
  *
--- origsrc/libfyaml-0.9/src/lib/fy-doc.c	2023-09-25 23:37:29.000000000 +0900
+++ src/libfyaml-0.9/src/lib/fy-doc.c	2023-10-26 10:52:19.769183600 +0900
@@ -25,7 +25,7 @@
 
 #include "fy-utils.h"
 
-#include "xxhash.h"
+#include <xxhash.h>
 
 static const struct fy_hash_desc hd_anchor;
 static const struct fy_hash_desc hd_nanchor;
@@ -6664,16 +6664,17 @@ static void update_xx32(void *state, con
 
 int fy_node_hash_uint(struct fy_node *fyn, unsigned int *hashp)
 {
-	XXH32_state_t state;
+	XXH32_state_t* state = XXH32_createState();
 	int rc;
 
-	XXH32_reset(&state, 2654435761U);
+	XXH32_reset(state, 2654435761U);
 
-	rc = fy_node_hash_internal(fyn, update_xx32, &state);
+	rc = fy_node_hash_internal(fyn, update_xx32, state);
 	if (rc)
 		return rc;
 
-	*hashp = XXH32_digest(&state);
+	*hashp = XXH32_digest(state);
+	XXH32_freeState(state);
 	return 0;
 }
 

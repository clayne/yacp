--- origsrc/onnx-1.15.0/CMakeLists.txt	2023-10-26 07:10:41.000000000 +0900
+++ src/onnx-1.15.0/CMakeLists.txt	2023-11-06 06:28:45.681814300 +0900
@@ -124,8 +124,11 @@ if(NOT DEFINED CMAKE_POSITION_INDEPENDEN
 endif()
 
 if(ONNX_BUILD_TESTS)
-  list(APPEND CMAKE_MODULE_PATH ${ONNX_ROOT}/cmake/external)
-  include(googletest)
+  find_package(gtest)
+  if (NOT GTEST_FOUND)
+    list(APPEND CMAKE_MODULE_PATH ${ONNX_ROOT}/cmake/external)
+    include(googletest)
+  endif()
 endif()
 
 if((ONNX_USE_LITE_PROTO AND TARGET protobuf::libprotobuf-lite) OR ((NOT ONNX_USE_LITE_PROTO) AND TARGET protobuf::libprotobuf))
@@ -472,6 +475,10 @@ target_include_directories(onnx_proto PU
   $<INSTALL_INTERFACE:include>
   $<BUILD_INTERFACE:${PROTOBUF_INCLUDE_DIRS}>)
 
+if (DEFINED SOVERSION)
+  set_target_properties(onnx_proto PROPERTIES SOVERSION "${SOVERSION}")
+endif()
+
 if (MSVC)
   if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
     set(EXTRA_FLAGS
@@ -531,6 +538,10 @@ target_include_directories(onnx PUBLIC
 target_link_libraries(onnx PUBLIC onnx_proto)
 add_onnx_global_defines(onnx)
 
+if (DEFINED SOVERSION)
+  set_target_properties(onnx PROPERTIES SOVERSION "${SOVERSION}")
+endif()
+
 if(BUILD_ONNX_PYTHON)
   if("${PY_EXT_SUFFIX}" STREQUAL "")
     if(MSVC)
@@ -617,14 +628,18 @@ endif()
 
 if(ONNX_BUILD_BENCHMARKS)
   if(NOT TARGET benchmark)
-    # We will not need to test benchmark lib itself.
-    set(BENCHMARK_ENABLE_TESTING OFF
-        CACHE BOOL "Disable benchmark testing as we don't need it.")
-    # We will not need to install benchmark since we link it statically.
-    set(BENCHMARK_ENABLE_INSTALL OFF
-        CACHE BOOL
-              "Disable benchmark install to avoid overwriting vendor install.")
-    add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/benchmark)
+    find_package(pkgconfig)
+    pkg_check_modules(BENCHMARK benchmark)
+    if (NOT BENCHMARK_FOUND)
+      # We will not need to test benchmark lib itself.
+      set(BENCHMARK_ENABLE_TESTING OFF
+          CACHE BOOL "Disable benchmark testing as we don't need it.")
+      # We will not need to install benchmark since we link it statically.
+      set(BENCHMARK_ENABLE_INSTALL OFF
+          CACHE BOOL
+                "Disable benchmark install to avoid overwriting vendor install.")
+      add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/benchmark)
+    endif()
   endif()
 
   add_executable(protobuf-bench tools/protobuf-bench.cc)
@@ -720,7 +735,9 @@ install(FILES
 install(EXPORT ONNXTargets DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/ONNX")
 install(TARGETS
   onnx onnx_proto
-  EXPORT ONNXTargets DESTINATION ${CMAKE_INSTALL_LIBDIR})
+  EXPORT ONNXTargets
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 if(ONNX_BUILD_TESTS)
   include(${ONNX_ROOT}/cmake/unittest.cmake)
--- origsrc/onnx-1.15.0/cmake/unittest.cmake	2023-10-26 07:10:41.000000000 +0900
+++ src/onnx-1.15.0/cmake/unittest.cmake	2023-11-06 06:31:41.605431300 +0900
@@ -7,7 +7,11 @@ include(${ONNX_ROOT}/cmake/Utils.cmake)
 
 find_package(Threads)
 
-set(${UT_NAME}_libs ${googletest_STATIC_LIBRARIES})
+if (GTEST_FOUND)
+  set(${UT_NAME}_libs gtest)
+else()
+  set(${UT_NAME}_libs ${googletest_STATIC_LIBRARIES})
+endif()
 
 list(APPEND ${UT_NAME}_libs onnx)
 list(APPEND ${UT_NAME}_libs onnx_proto)
@@ -22,14 +26,20 @@ function(AddTest)
   list(REMOVE_DUPLICATES _UT_SOURCES)
 
   add_executable(${_UT_TARGET} ${_UT_SOURCES})
-  add_dependencies(${_UT_TARGET} onnx onnx_proto googletest)
+  add_dependencies(${_UT_TARGET} onnx onnx_proto)
+  if (NOT GTEST_FOUND)
+    add_dependencies(${_UT_TARGET} googletest)
+  endif()
 
   target_include_directories(${_UT_TARGET}
-                             PUBLIC ${googletest_INCLUDE_DIRS}
+                             PUBLIC 
                                     ${ONNX_INCLUDE_DIRS}
                                     ${PROTOBUF_INCLUDE_DIRS}
                                     ${ONNX_ROOT}
                                     ${CMAKE_CURRENT_BINARY_DIR})
+  if (NOT GTEST_FOUND)
+    target_include_directories(${_UT_TARGET} PUBLIC  ${googletest_INCLUDE_DIRS})
+  endif()
   target_link_libraries(${_UT_TARGET} ${_UT_LIBS} ${CMAKE_THREAD_LIBS_INIT})
   if(TARGET protobuf::libprotobuf)
     target_link_libraries(${_UT_TARGET} protobuf::libprotobuf)

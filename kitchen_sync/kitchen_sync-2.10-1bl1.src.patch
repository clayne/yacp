--- origsrc/kitchen_sync-2.10/CMakeLists.txt	2020-11-04 12:04:04.000000000 +0900
+++ src/kitchen_sync-2.10/CMakeLists.txt	2020-12-03 18:37:10.781803100 +0900
@@ -4,20 +4,22 @@ project(kitchen_sync CXX C)
 cmake_minimum_required(VERSION 3.1)
 
 # suppress warnings about using c++11 features such as variadic templates
-include(CheckCXXCompilerFlag)
-CHECK_CXX_COMPILER_FLAG("-std=c++14" COMPILER_SUPPORTS_CXX14)
-CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
-CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
-CHECK_CXX_COMPILER_FLAG("-stdlib=libc++" COMPILER_SUPPORTS_STDLIB)
-if(COMPILER_SUPPORTS_CXX14)
-	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
-elseif(COMPILER_SUPPORTS_CXX11)
-	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
-elseif(COMPILER_SUPPORTS_CXX0X)
-	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
-endif()
-if(COMPILER_SUPPORTS_STDLIB)
-	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
+if (NOT CYGWIN)
+	include(CheckCXXCompilerFlag)
+	CHECK_CXX_COMPILER_FLAG("-std=c++14" COMPILER_SUPPORTS_CXX14)
+	CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
+	CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
+	CHECK_CXX_COMPILER_FLAG("-stdlib=libc++" COMPILER_SUPPORTS_STDLIB)
+	if(COMPILER_SUPPORTS_CXX14)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
+	elseif(COMPILER_SUPPORTS_CXX11)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
+	elseif(COMPILER_SUPPORTS_CXX0X)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
+	endif()
+	if(COMPILER_SUPPORTS_STDLIB)
+		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
+	endif()
 endif()
 
 # optionally compile with sanitizer checks
@@ -43,12 +45,15 @@ set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR
 find_package(Threads)
 
 # vendored-in version of yaml-cpp for filter files
-set(YAML_CPP_BUILD_TESTS OFF CACHE BOOL "disable yaml tests")
-set(YAML_CPP_BUILD_TOOLS OFF CACHE BOOL "disable yaml tools")
-set(YAML_CPP_BUILD_CONTRIB OFF CACHE BOOL "disable yaml contrib")
-set(YAML_CPP_INSTALL OFF CACHE BOOL "disable yaml install target")
-add_subdirectory(src/yaml-cpp EXCLUDE_FROM_ALL)
-include_directories(src/yaml-cpp/include)
+option(USE_SYSTEM_YAML_CPP "Use system yaml-cpp" ON)
+if (NOT USE_SYSTEM_YAML_CPP)
+	set(YAML_CPP_BUILD_TESTS OFF CACHE BOOL "disable yaml tests")
+	set(YAML_CPP_BUILD_TOOLS OFF CACHE BOOL "disable yaml tools")
+	set(YAML_CPP_BUILD_CONTRIB OFF CACHE BOOL "disable yaml contrib")
+	set(YAML_CPP_INSTALL OFF CACHE BOOL "disable yaml install target")
+	add_subdirectory(src/yaml-cpp EXCLUDE_FROM_ALL)
+	include_directories(src/yaml-cpp/include)
+endif()
 set(YamlCPP_LIBRARIES yaml-cpp)
 
 # the main program knows nothing but how to hook up the endpoints
@@ -65,7 +70,7 @@ if(NOT APPLE)
 endif()
 
 # is backtrace in libc?
-if(NOT APPLE)
+if(NOT APPLE AND NOT CYGWIN)
 	find_package(Backtrace)
 endif()
 
@@ -120,8 +125,11 @@ endif()
 set(BLAKE3_OBJECTS $<TARGET_OBJECTS:blake3>)
 
 # the endpoints do the actual work
-set(ks_endpoint_SRCS src/schema.cpp src/subdivision.cpp src/filters.cpp src/abortable_barrier.cpp src/xxHash/xxhash.cpp ${BLAKE3_OBJECTS})
-set(ks_endpoint_LIBS ${OPENSSL_LIBRARIES} ${YamlCPP_LIBRARIES})
+include(FindPkgConfig)
+pkg_check_modules(XXHASH REQUIRED libxxhash)
+
+set(ks_endpoint_SRCS src/schema.cpp src/subdivision.cpp src/filters.cpp src/abortable_barrier.cpp ${BLAKE3_OBJECTS})
+set(ks_endpoint_LIBS ${OPENSSL_LIBRARIES} ${YamlCPP_LIBRARIES} ${XXHASH_LIBRARIES})
 
 # turn on debugging symbols
 set(CMAKE_BUILD_TYPE Debug)
--- origsrc/kitchen_sync-2.10/test/CMakeLists.txt	2020-11-04 12:04:04.000000000 +0900
+++ src/kitchen_sync-2.10/test/CMakeLists.txt	2020-12-03 18:37:10.795808100 +0900
@@ -2,24 +2,26 @@
 add_executable(ks_unit_tests ks_unit_tests.cpp db_url_test.cpp ../src/db_url.cpp basic_uint128_t_test.cpp sql_functions_test.cpp)
 add_test(unit_tests          ks_unit_tests)
 
+include_directories(${CMAKE_SOURCE_DIR})
+
 # the main tests require ruby (and various extra gems).  to run the suite, run
 #   cmake .. && CTEST_OUTPUT_ON_FAILURE=1 make test
-add_test(prepare_for_test        env BUNDLE_GEMFILE=../../test/Gemfile bundle install --quiet)
-add_test(protocol_version_test   env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/protocol_version_test.rb)
-add_test(idle_from_test          env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/idle_from_test.rb)
-add_test(snapshot_from_test      env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/snapshot_from_test.rb)
-add_test(schema_from_test        env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/schema_from_test.rb)
-add_test(schema_to_test          env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/schema_to_test.rb)
-add_test(range_from_test         env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/range_from_test.rb)
-add_test(hash_from_test          env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/hash_from_test.rb)
-add_test(rows_from_test          env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/rows_from_test.rb)
-add_test(filter_from_test        env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/filter_from_test.rb)
-add_test(filter_to_test          env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/filter_to_test.rb)
-add_test(column_types_to_test    env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/column_types_to_test.rb)
-add_test(column_types_from_test  env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/column_types_from_test.rb)
-add_test(sync_to_test            env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/sync_to_test.rb)
-add_test(spatial_from_test       env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/spatial_from_test.rb)
-add_test(spatial_to_test         env BUNDLE_GEMFILE=../../test/Gemfile bundle exec ruby ../../test/spatial_to_test.rb)
+add_test(prepare_for_test        env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle install --quiet)
+add_test(protocol_version_test   env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/protocol_version_test.rb)
+add_test(idle_from_test          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/idle_from_test.rb)
+add_test(snapshot_from_test      env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/snapshot_from_test.rb)
+add_test(schema_from_test        env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/schema_from_test.rb)
+add_test(schema_to_test          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/schema_to_test.rb)
+add_test(range_from_test         env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/range_from_test.rb)
+add_test(hash_from_test          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/hash_from_test.rb)
+add_test(rows_from_test          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/rows_from_test.rb)
+add_test(filter_from_test        env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/filter_from_test.rb)
+add_test(filter_to_test          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/filter_to_test.rb)
+add_test(column_types_to_test    env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/column_types_to_test.rb)
+add_test(column_types_from_test  env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/column_types_from_test.rb)
+add_test(sync_to_test            env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/sync_to_test.rb)
+add_test(spatial_from_test       env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/spatial_from_test.rb)
+add_test(spatial_to_test         env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/spatial_to_test.rb)
 
 if(DEFINED ENV{SKIP_POSTGIS})
 	# this only works on later versions of ctest
--- origsrc/kitchen_sync-2.10/test/basic_uint128_t_test.cpp	2020-11-04 12:04:04.000000000 +0900
+++ src/kitchen_sync-2.10/test/basic_uint128_t_test.cpp	2020-12-03 18:37:10.823805900 +0900
@@ -1,6 +1,6 @@
-#include "../../catch2/catch.hpp"
+#include "src/catch2/catch.hpp"
 
-#include "../src/basic_uint128_t.h"
+#include "src/basic_uint128_t.h"
 
 TEST_CASE("addition", "[basic_uint128_t]") {
 	REQUIRE(basic_uint128_t{0, 1} + basic_uint128_t{0, 1} == basic_uint128_t{0, 2});
--- origsrc/kitchen_sync-2.10/test/db_url_test.cpp	2020-11-04 12:04:04.000000000 +0900
+++ src/kitchen_sync-2.10/test/db_url_test.cpp	2020-12-03 18:37:10.839805000 +0900
@@ -1,6 +1,6 @@
-#include "../../catch2/catch.hpp"
+#include "src/catch2/catch.hpp"
 
-#include "../src/db_url.h"
+#include "src/db_url.h"
 
 TEST_CASE("parsing full URLs", "[db_url]") {
 	DbUrl url("postgresql://someuser:mypassword@localhost:1000/sourcedb/myschema");
--- origsrc/kitchen_sync-2.10/test/ks_unit_tests.cpp	2020-11-04 12:04:04.000000000 +0900
+++ src/kitchen_sync-2.10/test/ks_unit_tests.cpp	2020-12-03 18:37:10.863801200 +0900
@@ -1,2 +1,2 @@
 #define CATCH_CONFIG_MAIN
-#include "../../catch2/catch.hpp"
+#include "src/catch2/catch.hpp"
--- origsrc/kitchen_sync-2.10/test/sql_functions_test.cpp	2020-11-04 12:04:04.000000000 +0900
+++ src/kitchen_sync-2.10/test/sql_functions_test.cpp	2020-12-03 18:37:10.881809900 +0900
@@ -1,6 +1,6 @@
-#include "../../catch2/catch.hpp"
+#include "src/catch2/catch.hpp"
 
-#include "../src/sql_functions.h"
+#include "src/sql_functions.h"
 
 TEST_CASE("quote_identifier", "[sql_functions]") {
 	REQUIRE(quote_identifier("foo", '`') == "`foo`");

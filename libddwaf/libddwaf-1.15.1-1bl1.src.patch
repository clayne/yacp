--- origsrc/libddwaf-1.15.1/CMakeLists.txt	2023-11-15 00:25:25.000000000 +0900
+++ src/libddwaf-1.15.1/CMakeLists.txt	2023-12-20 16:22:34.077176400 +0900
@@ -159,7 +159,17 @@ install(FILES ${libddwaf_SOURCE_DIR}/inc
 
 # System dependencies
 set(LIBDDWAF_INTERFACE_LIBRARIES "")
-set(LIBDDWAF_PRIVATE_LIBRARIES lib_re2 lib_utf8proc)
+set(LIBDDWAF_PRIVATE_LIBRARIES "")
+if (RE2_FOUND)
+    set(LIBDDWAF_PRIVATE_LIBRARIES ${LIBDDWAF_PRIVATE_LIBRARIES} ${RE2_LIBRARIES})
+else()
+    set(LIBDDWAF_PRIVATE_LIBRARIES ${LIBDDWAF_PRIVATE_LIBRARIES} lib_re2)
+endif()
+if (LIBUTF8PROC_FOUND)
+    set(LIBDDWAF_PRIVATE_LIBRARIES ${LIBDDWAF_PRIVATE_LIBRARIES} ${LIBUTF8PROC_LIBRARIES})
+else()
+    set(LIBDDWAF_PRIVATE_LIBRARIES ${LIBDDWAF_PRIVATE_LIBRARIES} lib_utf8proc)
+endif()
 
 if(NOT MSVC AND LIBDDWAF_TEST_COVERAGE)
     target_compile_options(libddwaf_objects PRIVATE -ggdb --coverage)
@@ -269,11 +279,13 @@ endif()
 
 # Shared library
 if (LIBDDWAF_BUILD_SHARED)
+    if (EXISTS ${PROJECT_SOURCE_DIR}/.git)
     execute_process(COMMAND git rev-parse HEAD
         WORKING_DIRECTORY ${libddwaf_SOURCE_DIR}
         OUTPUT_VARIABLE BUILD_ID
         OUTPUT_STRIP_TRAILING_WHITESPACE
     )
+    endif()
     message(STATUS "Build id is ${BUILD_ID}")
     string(SUBSTRING "${BUILD_ID}" 0 2 BUILD_ID_PREFIX)
     string(SUBSTRING "${BUILD_ID}" 2 39 BUILD_ID_SUFFIX)
@@ -282,8 +294,13 @@ if (LIBDDWAF_BUILD_SHARED)
         $<TARGET_OBJECTS:libddwaf_objects> $<$<BOOL:MSVC>:libddwaf.def>)
     set_target_properties(libddwaf_shared PROPERTIES OUTPUT_NAME ddwaf)
 
+    if (DEFINED SOVERSION)
+        set_target_properties(libddwaf_shared PROPERTIES SOVERSION "${SOVERSION}")
+    endif()
+
     install(TARGETS libddwaf_shared EXPORT libddwaf-config
-        DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
         INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
 
     if(CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
@@ -340,7 +357,7 @@ if (LIBDDWAF_BUILD_SHARED)
             endif()
         endif()
 
-        if(LIBDDWAF_KEEP_SYMBOL_FILE AND NOT WIN32)
+        if(LIBDDWAF_KEEP_SYMBOL_FILE AND NOT WIN32 AND NOT CYGWIN)
             install(FILES ${SYMBOL_FILE}
                 DESTINATION ${CMAKE_INSTALL_LIBDIR}/.build-id/${BUILD_ID_PREFIX}
                 RENAME ${BUILD_ID_SUFFIX}.debug)
@@ -354,7 +371,7 @@ endif()
 
 # Packaging
 install(EXPORT libddwaf-config
-    DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/cmake/libddwaf)
+    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/libddwaf)
 set(CPACK_PACKAGE_VENDOR "libddwaf")
 set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "DataDog WAF Library")
 set(CPACK_RESOURCE_FILE_README "${libddwaf_SOURCE_DIR}/README.md")
@@ -402,4 +419,10 @@ if (LIBDDWAF_TESTING)
     include(cmake/clang-tidy.cmake)
     include(cmake/clang-format.cmake)
 endif()
-# vim: set et:
+
+set(prefix ${CMAKE_INSTALL_PREFIX})
+set(exec_prefix ${CMAKE_INSTALL_PREFIX})
+set(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+set(includedir ${CMAKE_INSTALL_PREFIX}/include)
+configure_file(${CMAKE_SOURCE_DIR}/libddwaf.pc.in ${CMAKE_BINARY_DIR}/libddwaf.pc @ONLY)
+install(FILES ${CMAKE_BINARY_DIR}/libddwaf.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/libddwaf-1.15.1/libddwaf.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/libddwaf-1.15.1/libddwaf.pc.in	2023-12-20 16:22:34.077176400 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: libddwaf
+Description: Datadog's implementation of a WAF engine
+Version: @PROJECT_VERSION@
+Libs: -L${libdir} -lddwaf
+Cflags: -I${includedir}
--- origsrc/libddwaf-1.15.1/tests/CMakeLists.txt	2023-11-15 00:25:25.000000000 +0900
+++ src/libddwaf-1.15.1/tests/CMakeLists.txt	2023-12-20 16:22:34.077176400 +0900
@@ -23,7 +23,22 @@ if (LIBDDWAF_VECTORIZED_TRANSFORMERS)
     target_compile_definitions(waf_test PRIVATE LIBDDWAF_VECTORIZED_TRANSFORMERS)
 endif()
 
-set(LIBDDWAF_TEST_LIBRARIES lib_gtest lib_gmock libddwaf_objects lib_yamlcpp lib_rapidjson)
+set(LIBDDWAF_TEST_LIBRARIES libddwaf_objects)
+if (GTEST_FOUND)
+  set(LIBDDWAF_TEST_LIBRARIES ${LIBDDWAF_TEST_LIBRARIES} ${GTEST_LIBRARIES} ${GMOCK_LIBRARIES})
+else()
+  set(LIBDDWAF_TEST_LIBRARIES ${LIBDDWAF_TEST_LIBRARIES} lib_gtest lig_gmock)
+endif()
+if (YAML_CPP_FOUND)
+  set(LIBDDWAF_TEST_LIBRARIES ${LIBDDWAF_TEST_LIBRARIES} ${YAML_CPP_LIBRARIES})
+else()
+  set(LIBDDWAF_TEST_LIBRARIES ${LIBDDWAF_TEST_LIBRARIES} lib_yamlcpp)
+endif()
+if (RAPIDJSON_FOUND)
+else()
+  set(LIBDDWAF_TEST_LIBRARIES ${LIBDDWAF_TEST_LIBRARIES} lib_rapidjson)
+endif()
+
 if(NOT MSVC AND LIBDDWAF_TEST_COVERAGE)
     target_compile_options(waf_test PRIVATE -ggdb --coverage)
     list(APPEND LIBDDWAF_TEST_LIBRARIES gcov)
--- origsrc/libddwaf-1.15.1/tests/test_utils.hpp	2023-11-15 00:25:25.000000000 +0900
+++ src/libddwaf-1.15.1/tests/test_utils.hpp	2023-12-20 16:22:34.077176400 +0900
@@ -11,6 +11,7 @@
 
 #include <rapidjson/prettywriter.h>
 #include <rapidjson/schema.h>
+#include <rapidjson/error/en.h>
 
 #include <yaml-cpp/yaml.h>
 
--- origsrc/libddwaf-1.15.1/third_party/CMakeLists.txt	2023-11-15 00:25:25.000000000 +0900
+++ src/libddwaf-1.15.1/third_party/CMakeLists.txt	2023-12-20 16:22:34.077176400 +0900
@@ -9,12 +9,16 @@ set(INSTALL_DIR  ${CMAKE_BINARY_DIR}/thi
 # workaround for using it in target_include_directories
 file(MAKE_DIRECTORY ${INSTALL_DIR}/include)
 
+find_package(pkgconfig)
+
 if(NOT MSVC)
     set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wno-unused-parameter")
     set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELEASE} -Wno-unused-parameter")
     set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wno-unused-parameter")
 endif()
 
+pkg_check_modules(RAPIDJSON RapidJSON)
+if (NOT RAPIDJSON_FOUND)
 set(RAPIDJSON_COMMIT 22a62fcc2c2fa2418f5d358cdf65c1df73b418ae)
 ExternalProject_Add(proj_rapidjson
     URL               https://github.com/Tencent/rapidjson/archive/${RAPIDJSON_COMMIT}.tar.gz
@@ -35,6 +39,7 @@ target_include_directories(lib_rapidjson
 add_dependencies(lib_rapidjson proj_rapidjson)
 target_compile_definitions(lib_rapidjson INTERFACE RAPIDJSON_HAS_STDSTRING=1)
 set_target_properties(proj_rapidjson PROPERTIES EXCLUDE_FROM_ALL TRUE)
+endif()
 
 if(NOT MSVC)
     set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fPIC")
@@ -42,6 +47,8 @@ if(NOT MSVC)
     set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fPIC")
 endif()
 
+pkg_check_modules(RE2 re2)
+if (NOT RE2_FOUND)
 # To avoid building everything for re2, including test binvaries:
 #     BUILD_COMMAND cmake --build <BINARY_DIR> --target re2
 # But this is not enough, because the install target run afterwards insists on building everything
@@ -71,7 +78,10 @@ if(NOT MSVC)
     target_link_libraries(lib_re2 INTERFACE -lpthread)
 endif()
 add_dependencies(lib_re2 proj_re2)
+endif()
 
+pkg_check_modules(GTEST gtest gmock)
+if (NOT GTEST_FOUND)
 if(CMAKE_BUILD_TYPE MATCHES Debug)
     set(LIBGTEST_FILENAME ${CMAKE_STATIC_LIBRARY_PREFIX}gtestd${CMAKE_STATIC_LIBRARY_SUFFIX})
     set(LIBGMOCK_FILENAME ${CMAKE_STATIC_LIBRARY_PREFIX}gmockd${CMAKE_STATIC_LIBRARY_SUFFIX})
@@ -114,7 +124,10 @@ endif()
 add_dependencies(lib_gtest proj_gtest)
 add_dependencies(lib_gmock proj_gtest)
 set_target_properties(lib_gtest lib_gmock proj_gtest PROPERTIES EXCLUDE_FROM_ALL TRUE)
+endif()
 
+pkg_check_modules(LIBUTF8PROC libutf8proc)
+if (NOT LIBUTF8PROC_FOUND)
 if (MSVC)
     set(LIBUTF8PROC_FILENAME ${CMAKE_STATIC_LIBRARY_PREFIX}utf8proc_static${CMAKE_STATIC_LIBRARY_SUFFIX})
 else ()
@@ -142,7 +155,10 @@ add_library(lib_utf8proc STATIC IMPORTED
 set_property(TARGET lib_utf8proc PROPERTY IMPORTED_LOCATION ${INSTALL_DIR}/lib/${LIBUTF8PROC_FILENAME})
 target_include_directories(lib_utf8proc INTERFACE ${INSTALL_DIR}/include)
 add_dependencies(lib_utf8proc proj_utf8proc)
+endif()
 
+pkg_check_modules(YAML_CPP yaml-cpp)
+if (NOT YAML_CPP_FOUND)
 # yaml-cpp
 if (NOT MSVC)
     if(CMAKE_BUILD_TYPE MATCHES Debug)
@@ -180,6 +196,7 @@ set_target_properties(lib_yamlcpp PROPER
 target_include_directories(lib_yamlcpp INTERFACE ${INSTALL_DIR}/include)
 add_dependencies(lib_yamlcpp proj_yamlcpp)
 set_target_properties(lib_yamlcpp proj_yamlcpp PROPERTIES EXCLUDE_FROM_ALL TRUE)
+endif()
 
 # Appsec event rules
 ExternalProject_Add(proj_event_rules

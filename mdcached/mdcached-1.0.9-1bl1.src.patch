--- origsrc/mdcached-1.0.9/CMakeLists.txt	1970-01-01 09:00:00.000000000 +0900
+++ src/mdcached-1.0.9/CMakeLists.txt	2025-01-10 20:01:21.759232900 +0900
@@ -0,0 +1,58 @@
+cmake_minimum_required(VERSION 3.28)
+project(mdcached
+  VERSION 1.0.9
+  DESCRIPTION "Bullet Cache / MultiDomain Cache Daemon"
+  HOMEPAGE_URL "https://sourceforge.net/projects/mdcached/")
+
+set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+add_compile_options(-D_GNU_SOURCE)
+
+include(GNUInstallDirs)
+include(CTest)
+
+set(BIN_SOURCES
+  mdcached/server.cpp
+  mdcached/ServerClientConnection.cpp
+  mdcached/ServerWorkerThread.cpp
+  mdcached/ServerNetworkThread.cpp
+  mdcached/ServerReaperThread.cpp
+  mdcached/ServerMonitorThread.cpp
+  mdcached/DataStore.cpp
+  mdcached/BackendMesh.cpp
+  mdcached/LockPool.cpp
+  mdcached/logger.c
+  mdcached/common_utils.c
+  mdcached/MurmurHash3.cpp
+)
+add_executable(mdcached_exe ${BIN_SOURCES})
+set_target_properties(mdcached_exe PROPERTIES OUTPUT_NAME mdcached)
+install(TARGETS mdcached_exe RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+
+set(LIB_SOURCES
+  mdcached/client.c
+  mdcached/common_utils.c
+)
+add_library(mdcached SHARED ${LIB_SOURCES})
+set_target_properties(mdcached PROPERTIES SOVERSION 1)
+install(TARGETS mdcached
+  RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
+
+install(FILES mdcached/mc_client.h mdcached/mc_protocol.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+
+install(FILES mdcached/doc/mdcached.1 DESTINATION ${CMAKE_INSTALL_MANDIR}/man1)
+
+add_executable(mdcached_test mdcached/test_mdcached.c)
+target_link_libraries(mdcached_test PRIVATE mdcached)
+add_executable(bench_mdcached mdcached/bench_mdcached.c mdcached/bench_utils.c)
+target_link_libraries(bench_mdcached PRIVATE mdcached)
+add_executable(bench_mdcached_async mdcached/bench_mdcached_async.c mdcached/bench_utils.c)
+target_link_libraries(bench_mdcached_async PRIVATE mdcached)
+
+set(prefix ${CMAKE_INSTALL_PREFIX})
+set(exec_prefix ${CMAKE_INSTALL_PREFIX})
+set(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+set(includedir ${CMAKE_INSTALL_PREFIX}/include)
+configure_file(${CMAKE_SOURCE_DIR}/mdcached.pc.in ${CMAKE_BINARY_DIR}/mdcached.pc @ONLY)
+install(FILES ${CMAKE_BINARY_DIR}/mdcached.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/mdcached-1.0.9/mdcached/server.cpp	2014-01-09 22:11:25.000000000 +0900
+++ src/mdcached-1.0.9/mdcached/server.cpp	2025-01-10 19:30:20.569138800 +0900
@@ -402,7 +402,7 @@ network_loop()
 	if (evs == NULL)
 		mc_log(LOG_CRIT, "Error allocating evs: %s", strerror(errno));
 
-	CRIT_ASSERT((evq = ev_create_queue()) >= 0);
+	CRIT_ASSERT((evq = ev_create_queue()));
 	/* Add server sockets to event queue */
 	ne = 0;
 	for (std::list<ServerClientConnection*>::iterator it = connections.begin(); it != connections.end(); it++) {
@@ -641,7 +641,7 @@ setup_server()
 			mc_log(LOG_CRIT, "Cannot create Unix socket: %s", strerror(errno));
 		strncpy(sun.sun_path, unix_soname, sizeof(sun.sun_path));
 		sun.sun_family = AF_LOCAL;
-#ifdef __BSD_VISIBLE
+#if defined(__BSD_VISIBLE) && !defined(__CYGWIN__)
 		sun.sun_len = strlen(unix_soname);
 #endif
 		/* Delete the old file/socket if it exists */
--- origsrc/mdcached-1.0.9/mdcached.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/mdcached-1.0.9/mdcached.pc.in	2025-01-10 20:01:30.477137700 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: mdcached
+Description: Bullet Cache / MultiDomain Cache Daemon
+Version: @PROJECT_VERSION@
+Libs: -L${libdir} -lmdcached
+Cflags: -I${includedir}

--- origsrc/VTK-9.3.1/CMake/FindCGNS.cmake	2024-06-29 01:00:10.000000000 +0900
+++ src/VTK-9.3.1/CMake/FindCGNS.cmake	2024-10-14 22:45:16.878116800 +0900
@@ -16,7 +16,7 @@ mark_as_advanced(CGNS_INCLUDE_DIR)
 
 find_library(CGNS_LIBRARY
   NAMES
-    cgns
+    cgns cgnsdll
   DOC "CGNS library")
 mark_as_advanced(CGNS_LIBRARY)
 
--- origsrc/VTK-9.3.1/IO/EnSight/vtkEnSight6BinaryReader.cxx	2024-06-29 01:00:10.000000000 +0900
+++ src/VTK-9.3.1/IO/EnSight/vtkEnSight6BinaryReader.cxx	2024-10-14 22:45:16.878116800 +0900
@@ -27,7 +27,7 @@
 #define VTK_STAT_STRUCT struct _stat64
 #define VTK_STAT_FUNC _stat64
 #elif defined _DARWIN_FEATURE_64_BIT_INODE || defined __FreeBSD__ || defined __NetBSD__ ||         \
-  defined __OpenBSD__
+  defined __OpenBSD__ || defined(__CYGWIN__)
 // The BSDs use stat().
 #define VTK_STAT_STRUCT struct stat
 #define VTK_STAT_FUNC stat
--- origsrc/VTK-9.3.1/IO/EnSight/vtkEnSightGoldBinaryReader.cxx	2024-06-29 01:00:10.000000000 +0900
+++ src/VTK-9.3.1/IO/EnSight/vtkEnSightGoldBinaryReader.cxx	2024-10-14 22:45:16.893770100 +0900
@@ -33,7 +33,7 @@
 #define VTK_STAT_STRUCT struct _stat64
 #define VTK_STAT_FUNC _stat64
 #elif defined _DARWIN_FEATURE_64_BIT_INODE || defined __FreeBSD__ || defined __NetBSD__ ||         \
-  defined __OpenBSD__
+  defined __OpenBSD__ || defined(__CYGWIN__)
 // The BSDs use stat().
 #define VTK_STAT_STRUCT struct stat
 #define VTK_STAT_FUNC stat
--- origsrc/VTK-9.3.1/IO/LSDyna/LSDynaFamily.cxx	2024-06-29 01:00:10.000000000 +0900
+++ src/VTK-9.3.1/IO/LSDyna/LSDynaFamily.cxx	2024-10-14 22:45:16.893770100 +0900
@@ -22,7 +22,7 @@ namespace
 // Usually stat uses 32 bit fields, and stat64 (with underscores in Windows) uses 64 bit fields.
 // But on the BSDs, stat uses 64 bit fields these days.
 #if (VTK_SIZEOF_ID_TYPE == 8) && !defined(_DARWIN_FEATURE_64_BIT_INODE) &&                         \
-  !defined(__FreeBSD__) && !defined(__NetBSD__) && !defined(__OpenBSD__)
+  !defined(__FreeBSD__) && !defined(__NetBSD__) && !defined(__OpenBSD__) && !defined(__CYGWIN__)
 #ifndef _WIN32
 #define USE_STAT_64
 #else
--- origsrc/VTK-9.3.1/ThirdParty/fast_float/CMakeLists.txt	2024-06-29 01:00:10.000000000 +0900
+++ src/VTK-9.3.1/ThirdParty/fast_float/CMakeLists.txt	2024-10-14 22:52:53.874491100 +0900
@@ -13,7 +13,7 @@ vtk_module_third_party(
     STANDARD_INCLUDE_DIRS
     HEADER_ONLY
   EXTERNAL
-    VERSION "3.9.0"
+    #VERSION "3.9.0"
     PACKAGE FastFloat
     TARGETS FastFloat::fast_float
     STANDARD_INCLUDE_DIRS
--- origsrc/VTK-9.3.1/ThirdParty/ioss/vtkioss/Ioss_IOFactory.C	2024-06-29 01:00:10.000000000 +0900
+++ src/VTK-9.3.1/ThirdParty/ioss/vtkioss/Ioss_IOFactory.C	2024-10-15 07:20:57.348160100 +0900
@@ -12,6 +12,7 @@
 #include <cstddef> // for nullptr
 #include "vtk_fmt.h"
 #include VTK_FMT(fmt/ostream.h)
+#include VTK_FMT(fmt/ranges.h)
 #include <map>     // for _Rb_tree_iterator, etc
 #include <ostream> // for basic_ostream, etc
 #include <set>
--- origsrc/VTK-9.3.1/ThirdParty/ioss/vtkioss/Ioss_StructuredBlock.C	2024-06-29 01:00:10.000000000 +0900
+++ src/VTK-9.3.1/ThirdParty/ioss/vtkioss/Ioss_StructuredBlock.C	2024-10-15 08:22:12.101937400 +0900
@@ -15,7 +15,7 @@
 #include <Ioss_StructuredBlock.h>
 #include "vtk_fmt.h"
 #include VTK_FMT(fmt/ostream.h)
-
+#include VTK_FMT(fmt/ranges.h)
 #include <cstddef> // for size_t
 #include <numeric>
 #include <string> // for string
--- origsrc/VTK-9.3.1/ThirdParty/ioss/vtkioss/Ioss_Utils.C	2024-06-29 01:00:10.000000000 +0900
+++ src/VTK-9.3.1/ThirdParty/ioss/vtkioss/Ioss_Utils.C	2024-10-15 08:25:18.152709600 +0900
@@ -21,6 +21,7 @@
 #include VTK_FMT(fmt/chrono.h)
 #include VTK_FMT(fmt/format.h)
 #include VTK_FMT(fmt/ostream.h)
+#include VTK_FMT(fmt/ranges.h)
 #include <fstream>
 #include <sstream>
 #include <string>
--- origsrc/VTK-9.3.1/ThirdParty/ioss/vtkioss/Ioss_ZoneConnectivity.C	2024-06-29 01:00:10.000000000 +0900
+++ src/VTK-9.3.1/ThirdParty/ioss/vtkioss/Ioss_ZoneConnectivity.C	2024-10-15 08:27:46.388059800 +0900
@@ -9,6 +9,7 @@
 #include <cstddef> // for size_t
 #include "vtk_fmt.h"
 #include VTK_FMT(fmt/ostream.h)
+#include VTK_FMT(fmt/ranges.h)
 #include <string> // for string
 #include <vector> // for vector
 
--- origsrc/VTK-9.3.1/ThirdParty/loguru/vtkloguru/loguru.cpp	2024-06-29 01:00:10.000000000 +0900
+++ src/VTK-9.3.1/ThirdParty/loguru/vtkloguru/loguru.cpp	2024-10-14 23:14:56.495704300 +0900
@@ -74,13 +74,13 @@
 
 // TODO: use defined(_POSIX_VERSION) for some of these things?
 
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32)
 	#define LOGURU_PTHREADS    0
 	#define LOGURU_WINTHREADS  1
 	#ifndef LOGURU_STACKTRACES
 		#define LOGURU_STACKTRACES 0
 	#endif
-#elif defined(__rtems__) || defined(__ANDROID__)
+#elif defined(__rtems__) || defined(__ANDROID__) || defined(__CYGWIN__)
 	#define LOGURU_PTHREADS    1
 	#define LOGURU_WINTHREADS  0
 	#ifndef LOGURU_STACKTRACES
@@ -993,7 +993,7 @@ namespace loguru
 				pid_t thread_id = getthrid();
 			#elif LOGURU_PTHREADS
 				// Here we rely on the opaque pthread_t being of integer type, which is the case on linux, but not other platforms.
-				uint64_t thread_id = static_cast<uint64_t>(pthread_self());
+				uint64_t thread_id = reinterpret_cast<uint64_t>(pthread_self());
 			#else
 				// This ID does not correllate to anything we can get from the OS,
 				// so this is the worst way to get the ID.
--- origsrc/VTK-9.3.1/ThirdParty/verdict/CMakeLists.txt	2024-06-29 01:00:10.000000000 +0900
+++ src/VTK-9.3.1/ThirdParty/verdict/CMakeLists.txt	2024-10-14 23:05:56.989409100 +0900
@@ -14,7 +14,7 @@ vtk_module_third_party(
   EXTERNAL
     PACKAGE Verdict
     TARGETS Verdict::verdict
-    VERSION       "1.4.0"
+    #VERSION       "1.4.0"
     STANDARD_INCLUDE_DIRS)
 
 configure_file(

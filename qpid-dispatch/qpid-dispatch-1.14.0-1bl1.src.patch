--- origsrc/qpid-dispatch-1.14.0/CMakeLists.txt	2020-09-10 05:47:20.000000000 +0900
+++ src/qpid-dispatch-1.14.0/CMakeLists.txt	2020-10-08 12:55:23.723567000 +0900
@@ -175,7 +175,9 @@ include_directories(
     )
 
 if (NOT CMAKE_SYSTEM_NAME STREQUAL SunOS)
- add_compile_options(-Werror)
+ if (NOT CYGWIN)
+  add_compile_options(-Werror)
+ endif()
  add_compile_options(-Wall)
  include(CheckCCompilerFlag)
  check_c_compiler_flag(-Wpedantic HAS_PEDANTIC_FLAG)
@@ -264,3 +266,10 @@ add_subdirectory(console)
 # That will force automatic re-configure and everybody will be happy.
 #
 configure_file(${CMAKE_CURRENT_SOURCE_DIR}/reconfigure.in ${CMAKE_CURRENT_BINARY_DIR}/reconfigure)
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/qpid-dispatch.pc.in ${CMAKE_BINARY_DIR}/qpid-dispatch.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/qpid-dispatch.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/qpid-dispatch-1.14.0/qpid-dispatch.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/qpid-dispatch-1.14.0/qpid-dispatch.pc.in	2020-10-08 13:03:25.223185200 +0900
@@ -0,0 +1,11 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: qpid-dispatch
+Description: High-performance, lightweight AMQP 1.0 message router
+Version: @QPID_DISPATCH_VERSION@
+Libs: -L${libdir} -lqpid-dispatch
+Cflags: -I${includedir}
+Requires: libqpid-proton-core libqpid-proton-proactor libwebsockets python
--- origsrc/qpid-dispatch-1.14.0/src/CMakeLists.txt	2020-09-10 05:47:20.000000000 +0900
+++ src/qpid-dispatch-1.14.0/src/CMakeLists.txt	2020-10-08 12:35:32.319308100 +0900
@@ -153,7 +153,7 @@ if (APPLE)
 elseif(CMAKE_C_COMPILER_ID MATCHES "Clang" AND USING_SANITIZERS)
   # https://github.com/google/sanitizers/issues/380 - can't enable error on
   #  undefined symbols when linking sanitizers with Clang
-else()
+elseif(NOT CYGWIN)
   set(QPID_DISPATCH_LIB_LINK_FLAGS "-Wl,-z,defs ${QPID_DISPATCH_LIB_LINK_FLAGS}")
 endif()
 
@@ -162,7 +162,12 @@ target_include_directories(qpid-dispatch
 target_link_libraries(qpid-dispatch ${qpid_dispatch_LIBRARIES})
 set_target_properties(qpid-dispatch PROPERTIES
     LINK_FLAGS "${QPID_DISPATCH_LIB_LINK_FLAGS}")
+if (CYGWIN)
+  set_target_properties(qpid-dispatch PROPERTIES SOVERSION ${SO_VERSION})
+endif()
 install(TARGETS qpid-dispatch
+    RUNTIME DESTINATION bin
+    ARCHIVE DESTINATION lib
     LIBRARY DESTINATION ${QPID_DISPATCH_HOME})
 
 # check for various function availability
--- origsrc/qpid-dispatch-1.14.0/src/amqp.c	2020-09-10 05:47:20.000000000 +0900
+++ src/qpid-dispatch-1.14.0/src/amqp.c	2020-10-08 12:30:30.038979400 +0900
@@ -100,7 +100,7 @@ const char * const QD_AMQP_DFLT_PROTO =
 /// Needed because getservbyname is thread safe on macOS, and getservbyname_r is not defined there.
 static inline int qd_getservbyname(const char *name, const char *proto);
 
-#ifdef __APPLE__
+#if defined(__APPLE__) || defined(__CYGWIN__)
 static inline int qd_getservbyname(const char *name, const char *proto) {
     struct servent *serv_info = getservbyname(name, proto);
     if (serv_info) {

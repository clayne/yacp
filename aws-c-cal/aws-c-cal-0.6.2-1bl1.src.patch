--- origsrc/aws-c-cal-0.6.2/CMakeLists.txt	2023-08-24 07:53:55.000000000 +0900
+++ src/aws-c-cal-0.6.2/CMakeLists.txt	2023-09-12 13:56:34.454411700 +0900
@@ -88,7 +88,7 @@ else ()
         if (USE_OPENSSL AND NOT ANDROID)
             find_package(OpenSSL REQUIRED)
             find_package(Threads REQUIRED)
-            set(PLATFORM_LIBS OpenSSL::Crypto Threads::Threads)
+            set(PLATFORM_LIBS OpenSSL::Crypto OpenSSL::SSL Threads::Threads)
             message(STATUS "Using libcrypto from system: ${OPENSSL_CRYPTO_LIBRARY}")
         elseif(NOT USE_OPENSSL AND IN_SOURCE_BUILD)
             if (TARGET crypto)
@@ -134,6 +134,10 @@ endif()
 # Our ABI is not yet stable
 set_target_properties(${PROJECT_NAME} PROPERTIES VERSION 1.0.0)
 
+if (DEFINED SOVERSION)
+    set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION "${SOVERSION}")
+endif()
+
 target_include_directories(${PROJECT_NAME} PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
         $<INSTALL_INTERFACE:include>)
@@ -158,12 +162,12 @@ else()
 endif()
 
 install(EXPORT "${PROJECT_NAME}-targets"
-    DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake/${TARGET_DIR}/"
+    DESTINATION "${LIBRARY_DIRECTORY}/cmake/${PROJECT_NAME}"
     NAMESPACE AWS::
     COMPONENT Development)
 
 install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
-    DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake"
+    DESTINATION "${LIBRARY_DIRECTORY}/cmake/${PROJECT_NAME}"
     COMPONENT Development)
 
 list(APPEND EXPORT_MODULES
@@ -171,7 +175,7 @@ list(APPEND EXPORT_MODULES
     )
 
 install(FILES ${EXPORT_MODULES}
-        DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake/modules"
+        DESTINATION "${LIBRARY_DIRECTORY}/cmake/${PROJECT_NAME}"
         COMPONENT Development)
 
 if (NOT CMAKE_CROSSCOMPILING AND NOT BYO_CRYPTO)
@@ -183,3 +187,10 @@ if (NOT CMAKE_CROSSCOMPILING AND NOT BYO
         add_subdirectory(tests)
     endif()
 endif()
+
+set(prefix ${CMAKE_INSTALL_PREFIX})
+set(exec_prefix ${CMAKE_INSTALL_PREFIX})
+set(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+set(includedir ${CMAKE_INSTALL_PREFIX}/include)
+configure_file(${CMAKE_SOURCE_DIR}/aws-c-cal.pc.in ${CMAKE_BINARY_DIR}/aws-c-cal.pc @ONLY)
+install(FILES ${CMAKE_BINARY_DIR}/aws-c-cal.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/aws-c-cal-0.6.2/aws-c-cal.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/aws-c-cal-0.6.2/aws-c-cal.pc.in	2023-09-12 13:51:07.272154500 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: aws-c-cal
+Description: Aws Crypto Abstraction Layer
+Version: @VERSION@
+Libs: -L${libdir} -laws-c-cal
+Cflags: -I${includedir}
--- origsrc/aws-c-cal-0.6.2/cmake/aws-c-cal-config.cmake	2023-08-24 07:53:55.000000000 +0900
+++ src/aws-c-cal-0.6.2/cmake/aws-c-cal-config.cmake	2023-09-12 10:12:37.233385300 +0900
@@ -2,24 +2,7 @@ include(CMakeFindDependencyMacro)
 
 find_dependency(aws-c-common)
 
-macro(aws_load_targets type)
-    include(${CMAKE_CURRENT_LIST_DIR}/${type}/@PROJECT_NAME@-targets.cmake)
-endmacro()
-
-# try to load the lib follow BUILD_SHARED_LIBS. Fall back if not exist.
-if (BUILD_SHARED_LIBS)
-    if (EXISTS "${CMAKE_CURRENT_LIST_DIR}/shared")
-        aws_load_targets(shared)
-    else()
-        aws_load_targets(static)
-    endif()
-else()
-    if (EXISTS "${CMAKE_CURRENT_LIST_DIR}/static")
-        aws_load_targets(static)
-    else()
-        aws_load_targets(shared)
-    endif()
-endif()
+include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake)
 
 if (NOT BYO_CRYPTO AND NOT WIN32 AND NOT APPLE)
     get_target_property(AWS_C_CAL_DEPS AWS::aws-c-cal INTERFACE_LINK_LIBRARIES)
--- origsrc/aws-c-cal-0.6.2/cmake/modules/Findcrypto.cmake	2023-08-24 07:53:55.000000000 +0900
+++ src/aws-c-cal-0.6.2/cmake/modules/Findcrypto.cmake	2023-09-12 10:13:13.155458000 +0900
@@ -41,7 +41,7 @@ else()
         )
 
     find_library(crypto_SHARED_LIBRARY
-        NAMES libcrypto.so libcrypto.dylib
+        NAMES libcrypto.dll.a libcrypto.so libcrypto.dylib
         HINTS
         ${CMAKE_PREFIX_PATH}/build/crypto
         ${CMAKE_PREFIX_PATH}/build
--- origsrc/aws-c-cal-0.6.2/source/unix/openssl_platform_init.c	2023-08-24 07:53:55.000000000 +0900
+++ src/aws-c-cal-0.6.2/source/unix/openssl_platform_init.c	2023-09-12 13:49:05.312440800 +0900
@@ -122,6 +122,11 @@ enum aws_libcrypto_version {
     AWS_LIBCRYPTO_BORINGSSL
 };
 
+#if defined(__CYGWIN__) && defined(OPENSSL_VERSION_MAJOR) && (OPENSSL_VERSION_MAJOR > 1)
+#define HMAC_CTX_init HMAC_CTX_reset
+#define HMAC_CTX_cleanup HMAC_CTX_reset
+#endif
+
 bool s_resolve_hmac_102(void *module) {
 #if defined(OPENSSL_IS_OPENSSL)
     hmac_ctx_init init_fn = (hmac_ctx_init)HMAC_CTX_init;
@@ -304,6 +309,10 @@ static enum aws_libcrypto_version s_reso
     return AWS_LIBCRYPTO_NONE;
 }
 
+#if defined(__CYGWIN__) && defined(OPENSSL_VERSION_MAJOR) && (OPENSSL_VERSION_MAJOR > 1)
+static evp_md_ctx_new s_EVP_MD_CTX_create = EVP_MD_CTX_new;
+static evp_md_ctx_free s_EVP_MD_CTX_destroy = EVP_MD_CTX_free;
+#else
 #if !defined(OPENSSL_IS_AWSLC)
 /* EVP_MD_CTX API */
 /* 1.0.2 NOTE: these are macros in 1.1.x, so we have to undef them to weak link */
@@ -327,6 +336,7 @@ static evp_md_ctx_free s_EVP_MD_CTX_dest
 #        pragma pop_macro("EVP_MD_CTX_destroy")
 #    endif
 #endif /* !OPENSSL_IS_AWSLC */
+#endif
 
 extern EVP_MD_CTX *EVP_MD_CTX_new(void) __attribute__((weak, used));
 extern void EVP_MD_CTX_free(EVP_MD_CTX *) __attribute__((weak, used));

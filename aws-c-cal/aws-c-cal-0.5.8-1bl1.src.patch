--- origsrc/aws-c-cal-0.5.8/CMakeLists.txt	2021-05-19 23:51:06.000000000 +0900
+++ src/aws-c-cal-0.5.8/CMakeLists.txt	2021-05-28 05:46:16.839804800 +0900
@@ -32,6 +32,10 @@ string(REPLACE ";" "${AWS_MODULE_DIR};"
 list(APPEND CMAKE_MODULE_PATH ${AWS_MODULE_PATH})
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake/modules")
 
+if (CYGWIN)
+    list(APPEND CMAKE_MODULE_PATH "/usr/lib/cmake/aws-c-common")
+endif()
+
 include(AwsCFlags)
 include(AwsCheckHeaders)
 include(AwsSharedLibSetup)
@@ -122,6 +126,9 @@ endif()
 
 # Our ABI is not yet stable
 set_target_properties(${PROJECT_NAME} PROPERTIES VERSION 1.0.0)
+if (CYGWIN)
+    set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 0)
+endif()
 
 target_include_directories(${PROJECT_NAME} PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
@@ -146,22 +153,39 @@ else()
    set (TARGET_DIR "static")
 endif()
 
-install(EXPORT "${PROJECT_NAME}-targets"
-    DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake/${TARGET_DIR}/"
-    NAMESPACE AWS::
-    COMPONENT Development)
-
-install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
-    DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake"
-    COMPONENT Development)
+if (CYGWIN)
+    install(EXPORT "${PROJECT_NAME}-targets"
+        DESTINATION "${LIBRARY_DIRECTORY}/cmake/${PROJECT_NAME}"
+        NAMESPACE AWS::
+        COMPONENT Development)
+
+    install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
+        DESTINATION "${LIBRARY_DIRECTORY}/cmake/${PROJECT_NAME}"
+        COMPONENT Development)
+else()
+    install(EXPORT "${PROJECT_NAME}-targets"
+        DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake/${TARGET_DIR}/"
+        NAMESPACE AWS::
+        COMPONENT Development)
+
+    install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake"
+        DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake"
+        COMPONENT Development)
+endif()
 
 list(APPEND EXPORT_MODULES
     "cmake/modules/FindLibCrypto.cmake"
     )
 
-install(FILES ${EXPORT_MODULES}
-        DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake/modules"
-        COMPONENT Development)
+if (CYGWIN)
+    install(FILES ${EXPORT_MODULES}
+            DESTINATION "${LIBRARY_DIRECTORY}/cmake/${PROJECT_NAME}"
+            COMPONENT Development)
+else()
+    install(FILES ${EXPORT_MODULES}
+            DESTINATION "${LIBRARY_DIRECTORY}/${PROJECT_NAME}/cmake/modules"
+            COMPONENT Development)
+endif()
 
 if (NOT CMAKE_CROSSCOMPILING AND NOT BYO_CRYPTO)
     add_subdirectory(bin/sha256_profile)
@@ -170,3 +194,10 @@ if (NOT CMAKE_CROSSCOMPILING AND NOT BYO
         add_subdirectory(tests)
     endif()
 endif()
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/aws-c-cal.pc.in ${CMAKE_BINARY_DIR}/aws-c-cal.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/aws-c-cal.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/aws-c-cal-0.5.8/aws-c-cal.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/aws-c-cal-0.5.8/aws-c-cal.pc.in	2021-05-28 05:47:17.955518100 +0900
@@ -0,0 +1,11 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: aws-c-cal
+Description: Aws Crypto Abstraction Layer
+Version: @VERSION@
+Libs: -L${libdir} -laws-c-cal
+Cflags: -I${includedir}
+Requires: aws-c-common libcrypto
--- origsrc/aws-c-cal-0.5.8/cmake/aws-c-cal-config.cmake	2021-05-19 23:51:06.000000000 +0900
+++ src/aws-c-cal-0.5.8/cmake/aws-c-cal-config.cmake	2021-05-28 05:24:24.680980100 +0900
@@ -7,9 +7,12 @@ if (NOT BYO_CRYPTO AND NOT WIN32 AND NOT
     find_dependency(LibCrypto)
 endif()
 
-if (BUILD_SHARED_LIBS)
-    include(${CMAKE_CURRENT_LIST_DIR}/shared/@PROJECT_NAME@-targets.cmake)
+if (CYGWIN)
+    include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake)
 else()
-    include(${CMAKE_CURRENT_LIST_DIR}/static/@PROJECT_NAME@-targets.cmake)
+    if (BUILD_SHARED_LIBS)
+        include(${CMAKE_CURRENT_LIST_DIR}/shared/@PROJECT_NAME@-targets.cmake)
+    else()
+        include(${CMAKE_CURRENT_LIST_DIR}/static/@PROJECT_NAME@-targets.cmake)
+    endif()
 endif()
-
--- origsrc/aws-c-cal-0.5.8/cmake/modules/FindLibCrypto.cmake	2021-05-19 23:51:06.000000000 +0900
+++ src/aws-c-cal-0.5.8/cmake/modules/FindLibCrypto.cmake	2021-05-28 05:24:50.385721000 +0900
@@ -22,7 +22,7 @@ find_path(LibCrypto_INCLUDE_DIR
         ${CMAKE_INSTALL_PREFIX}/include
     )
 find_library(LibCrypto_SHARED_LIBRARY
-    NAMES libcrypto.so libcrypto.dylib
+    NAMES libcrypto.dll.a libcrypto.so libcrypto.dylib
     HINTS
     ${CMAKE_PREFIX_PATH}/build/crypto
     ${CMAKE_PREFIX_PATH}/build
--- origsrc/aws-c-cal-0.5.8/source/unix/openssl_platform_init.c	2021-05-19 23:51:06.000000000 +0900
+++ src/aws-c-cal-0.5.8/source/unix/openssl_platform_init.c	2021-05-28 05:44:11.767841900 +0900
@@ -43,6 +43,13 @@ extern int HMAC_Update(HMAC_CTX *, const
 extern int HMAC_Final(HMAC_CTX *, unsigned char *, unsigned int *) __attribute__((weak, used));
 extern int HMAC_Init_ex(HMAC_CTX *, const void *, size_t, const EVP_MD *, ENGINE *) __attribute__((weak, used));
 #else
+#if defined(__CYGWIN__)
+#define HMAC_CTX_new (NULL)
+#define HMAC_CTX_free (NULL)
+#define HMAC_CTX_reset (NULL)
+#define HMAC_CTX_init (NULL)
+#define HMAC_CTX_cleanup (NULL)
+#else
 /* 1.1 */
 extern HMAC_CTX *HMAC_CTX_new(void) __attribute__((weak, used));
 extern void HMAC_CTX_free(HMAC_CTX *) __attribute__((weak, used));
@@ -56,6 +63,7 @@ extern void HMAC_CTX_cleanup(HMAC_CTX *)
 extern int HMAC_Update(HMAC_CTX *, const unsigned char *, size_t) __attribute__((weak, used));
 extern int HMAC_Final(HMAC_CTX *, unsigned char *, unsigned int *) __attribute__((weak, used));
 extern int HMAC_Init_ex(HMAC_CTX *, const void *, int, const EVP_MD *, ENGINE *) __attribute__((weak, used));
+#endif
 
 /* libcrypto 1.1 stub for init */
 static void s_hmac_ctx_init_noop(HMAC_CTX *ctx) {
@@ -271,18 +279,30 @@ static evp_md_ctx_new s_EVP_MD_CTX_creat
 #        pragma push_macro("EVP_MD_CTX_destroy")
 #        undef EVP_MD_CTX_destroy
 #    endif
+#if defined(__CYGWIN__)
+#define EVP_MD_CTX_destroy (NULL)
+#else
 extern void EVP_MD_CTX_destroy(EVP_MD_CTX *) __attribute__((weak, used));
+#endif
 static evp_md_ctx_free s_EVP_MD_CTX_destroy = EVP_MD_CTX_destroy;
 #    if defined(EVP_MD_CTX_destroy)
 #        pragma pop_macro("EVP_MD_CTX_destroy")
 #    endif
 #endif /* !OPENSSL_IS_AWSLC */
 
+#if defined(__CYGWIN__)
+#define EVP_MD_CTX_new (NULL)
+#define EVP_MD_CTX_free (NULL)
+#define EVP_DigestInit_ex (NULL)
+#define EVP_DigestUpdate (NULL)
+#define EVP_DigestFinal_ex (NULL)
+#else
 extern EVP_MD_CTX *EVP_MD_CTX_new(void) __attribute__((weak, used));
 extern void EVP_MD_CTX_free(EVP_MD_CTX *) __attribute__((weak, used));
 extern int EVP_DigestInit_ex(EVP_MD_CTX *, const EVP_MD *, ENGINE *) __attribute__((weak, used));
 extern int EVP_DigestUpdate(EVP_MD_CTX *, const void *, size_t) __attribute__((weak, used));
 extern int EVP_DigestFinal_ex(EVP_MD_CTX *, unsigned char *, unsigned int *) __attribute__((weak, used));
+#endif
 
 bool s_resolve_md_102(void *module) {
 #if !defined(OPENSSL_IS_AWSLC)
@@ -424,7 +444,11 @@ static enum aws_libcrypto_version s_reso
 
 static enum aws_libcrypto_version s_resolve_libcrypto_lib(void) {
     const char *libcrypto_102 = "libcrypto.so.1.0.0";
+#if defined(__CYGWIN__)
+    const char *libcrypto_111 = "cygcrypto-1.1.dll";
+#else
     const char *libcrypto_111 = "libcrypto.so.1.1";
+#endif
 
     FLOGF("loading libcrypto 1.0.2");
     void *module = dlopen(libcrypto_102, RTLD_NOW);

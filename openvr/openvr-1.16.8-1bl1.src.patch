--- origsrc/openvr-1.16.8/CMakeLists.txt	2021-02-25 09:57:03.000000000 +0900
+++ src/openvr-1.16.8/CMakeLists.txt	2021-09-10 15:58:38.632869700 +0900
@@ -46,7 +46,7 @@ if(WIN32)
     add_definitions(-DOPENVR_BUILD_STATIC)
   endif()
 elseif(UNIX AND NOT APPLE)
-  if(CMAKE_SYSTEM_NAME MATCHES ".*Linux")
+  if(CMAKE_SYSTEM_NAME MATCHES ".*Linux" OR CYGWIN)
     set(PLATFORM_NAME "linux")
     add_definitions(-DLINUX -DPOSIX)
     if(PROCESSOR_ARCH MATCHES "64")
@@ -75,7 +75,11 @@ set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMA
 # Enable some properties.
 if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES "Clang")
 	# Enable c++11 and hide symbols which shouldn't be visible
-	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fPIC -fvisibility=hidden")
+  if(CYGWIN)
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11 -fvisibility=hidden")
+  else()
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -fPIC -fvisibility=hidden")
+  endif()
 
 	# Set custom libc++ usage here
 	if(CMAKE_C_COMPILER_ID MATCHES "Clang" AND USE_LIBCXX)
@@ -94,3 +98,10 @@ if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_CO
 endif()
 
 add_subdirectory(src)
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/openvr.pc.in ${CMAKE_BINARY_DIR}/openvr.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/openvr.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/openvr-1.16.8/headers/openvr_capi.h	2021-02-25 09:57:03.000000000 +0900
+++ src/openvr-1.16.8/headers/openvr_capi.h	2021-09-10 15:58:38.641867100 +0900
@@ -24,8 +24,8 @@
 #endif
 
 // OPENVR API export macro
-#if defined( _WIN32 ) && !defined( _X360 )
-	#if defined( OPENVR_API_EXPORTS )
+#if (defined( _WIN32 ) || defined( __CYGWIN__ )) && !defined( _X360 )
+	#if defined( OPENVR_API_EXPORTS ) || defined( __CYGWIN__ )
 	#define S_API EXTERN_C __declspec( dllexport )
 	#elif defined( OPENVR_API_NODLL )
 	#define S_API EXTERN_C
--- origsrc/openvr-1.16.8/openvr.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/openvr-1.16.8/openvr.pc.in	2021-09-10 15:58:38.644858200 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: openvr
+Description: OpenVR SDK
+Version: @OPENVR_VERSION@
+Libs: -L${libdir} -lopenvr_api
+Cflags: -I${includedir}
--- origsrc/openvr-1.16.8/src/CMakeLists.txt	2021-02-25 09:57:03.000000000 +0900
+++ src/openvr-1.16.8/src/CMakeLists.txt	2021-09-10 15:58:38.649898400 +0900
@@ -68,6 +68,9 @@ source_group("VRCommon" FILES
 # Build the library.
 if(BUILD_SHARED)
 	add_library(${LIBNAME} SHARED ${SOURCE_FILES})
+	if(CYGWIN)
+		set_target_properties(${LIBNAME} PROPERTIES SOVERSION 1.0.0)
+	endif()
 elseif(BUILD_FRAMEWORK)
 	set( LIBNAME "OpenVR" )
 	add_library( ${LIBNAME} 
@@ -101,7 +104,7 @@ endif()
 target_link_libraries(${LIBNAME} ${EXTRA_LIBS} ${CMAKE_DL_LIBS})
 target_include_directories(${LIBNAME} PUBLIC ${OPENVR_HEADER_DIR})
 
-install(TARGETS ${LIBNAME} DESTINATION lib)
+install(TARGETS ${LIBNAME} RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
 install(FILES ${PUBLIC_HEADER_FILES} DESTINATION include/openvr)
 
 # Generate a .pc file for linux environments
--- origsrc/openvr-1.16.8/src/openvr_api_public.cpp	2021-02-25 09:57:03.000000000 +0900
+++ src/openvr-1.16.8/src/openvr_api_public.cpp	2021-09-10 16:02:26.971674200 +0900
@@ -2,12 +2,12 @@
 #define VR_API_EXPORT 1
 #include "openvr.h"
 #include "ivrclientcore.h"
-#include <vrcore/pathtools_public.h>
-#include <vrcore/sharedlibtools_public.h>
-#include <vrcore/envvartools_public.h>
+#include <vrcommon/pathtools_public.h>
+#include <vrcommon/sharedlibtools_public.h>
+#include <vrcommon/envvartools_public.h>
 #include "hmderrors_public.h"
-#include <vrcore/strtools_public.h>
-#include <vrcore/vrpathregistry_public.h>
+#include <vrcommon/strtools_public.h>
+#include <vrcommon/vrpathregistry_public.h>
 #include <mutex>
 
 using vr::EVRInitError;
--- origsrc/openvr-1.16.8/src/vrcommon/dirtools_public.cpp	2021-02-25 09:57:03.000000000 +0900
+++ src/openvr-1.16.8/src/vrcommon/dirtools_public.cpp	2021-09-10 16:03:54.009026600 +0900
@@ -1,7 +1,7 @@
 //========= Copyright Valve Corporation ============//
-#include <vrcore/dirtools_public.h>
-#include <vrcore/strtools_public.h>
-#include <vrcore/pathtools_public.h>
+#include <vrcommon/dirtools_public.h>
+#include <vrcommon/strtools_public.h>
+#include <vrcommon/pathtools_public.h>
 
 #include <errno.h>
 #include <string.h>
--- origsrc/openvr-1.16.8/src/vrcommon/envvartools_public.cpp	2021-02-25 09:57:03.000000000 +0900
+++ src/openvr-1.16.8/src/vrcommon/envvartools_public.cpp	2021-09-10 16:04:23.492972500 +0900
@@ -1,6 +1,6 @@
 //========= Copyright Valve Corporation ============//
-#include <vrcore/envvartools_public.h>
-#include <vrcore/strtools_public.h>
+#include <vrcommon/envvartools_public.h>
+#include <vrcommon/strtools_public.h>
 #include <stdlib.h>
 #include <string>
 #include <cctype>
--- origsrc/openvr-1.16.8/src/vrcommon/pathtools_public.cpp	2021-02-25 09:57:03.000000000 +0900
+++ src/openvr-1.16.8/src/vrcommon/pathtools_public.cpp	2021-09-10 16:04:37.240476900 +0900
@@ -1,6 +1,6 @@
 //========= Copyright Valve Corporation ============//
-#include <vrcore/strtools_public.h>
-#include <vrcore/pathtools_public.h>
+#include <vrcommon/strtools_public.h>
+#include <vrcommon/pathtools_public.h>
 
 #if defined( _WIN32)
 #include <windows.h>
--- origsrc/openvr-1.16.8/src/vrcommon/pathtools_public.h	2021-02-25 09:57:03.000000000 +0900
+++ src/openvr-1.16.8/src/vrcommon/pathtools_public.h	2021-09-10 15:58:38.657868000 +0900
@@ -123,10 +123,12 @@ std::string Path_SanitizeFilename( const
 #endif
 
 //-----------------------------------------------------------------------------
-#if defined(WIN32)
+#if defined(WIN32) || defined(__CYGWIN__)
 #define DYNAMIC_LIB_EXT	".dll"
 #define PROGRAM_EXT ".exe"
-#ifdef _WIN64
+#if defined(__CYGWIN__)
+#define PLATSUBDIR  "cygwin"
+#elif defined(_WIN64)
 #define PLATSUBDIR	"win64"
 #else
 #define PLATSUBDIR	"win32"
--- origsrc/openvr-1.16.8/src/vrcommon/sharedlibtools_public.cpp	2021-02-25 09:57:03.000000000 +0900
+++ src/openvr-1.16.8/src/vrcommon/sharedlibtools_public.cpp	2021-09-10 16:04:51.014745100 +0900
@@ -1,5 +1,5 @@
 //========= Copyright Valve Corporation ============//
-#include <vrcore/sharedlibtools_public.h>
+#include <vrcommon/sharedlibtools_public.h>
 #include <string.h>
 
 #if defined(_WIN32)
--- origsrc/openvr-1.16.8/src/vrcommon/strtools_public.cpp	2021-02-25 09:57:03.000000000 +0900
+++ src/openvr-1.16.8/src/vrcommon/strtools_public.cpp	2021-09-10 16:09:01.454924100 +0900
@@ -1,5 +1,5 @@
 //========= Copyright Valve Corporation ============//
-#include <vrcore/strtools_public.h>
+#include <vrcommon/strtools_public.h>
 #include <string.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -9,7 +9,7 @@
 #include <functional>
 #include <locale>
 #include <codecvt>
-#include <vrcore/assert.h>
+#include <stdarg.h>
 
 #if defined( _WIN32 )
 #include <windows.h>
@@ -128,7 +128,7 @@ std::string Format( const char *pchForma
 	// Something went fairly wrong
 	if ( unSize < 0 )
 	{
-		AssertMsg( false, "Format string parse failure" );
+		//AssertMsg( false, "Format string parse failure" );
 		return "";
 	}
 
@@ -149,7 +149,7 @@ std::string Format( const char *pchForma
 	// Double check, just in case
 	if ( unSize < 0 )
 	{
-		AssertMsg( false, "Format string parse failure" );
+		//AssertMsg( false, "Format string parse failure" );
 		return "";
 	}
 
--- origsrc/openvr-1.16.8/src/vrcommon/vrpathregistry_public.cpp	2021-02-25 09:57:03.000000000 +0900
+++ src/openvr-1.16.8/src/vrcommon/vrpathregistry_public.cpp	2021-09-10 16:05:19.137520300 +0900
@@ -1,11 +1,11 @@
 //========= Copyright Valve Corporation ============//
 
-#include <vrcore/vrpathregistry_public.h>
+#include <vrcommon/vrpathregistry_public.h>
 #include <json/json.h>
-#include <vrcore/pathtools_public.h>
-#include <vrcore/envvartools_public.h>
-#include <vrcore/strtools_public.h>
-#include <vrcore/dirtools_public.h>
+#include <vrcommon/pathtools_public.h>
+#include <vrcommon/envvartools_public.h>
+#include <vrcommon/strtools_public.h>
+#include <vrcommon/dirtools_public.h>
 
 #if defined( WIN32 )
 #include <windows.h>

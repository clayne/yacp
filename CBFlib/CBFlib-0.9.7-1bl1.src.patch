--- origsrc/cbflib-CBFlib-0.9.7/CMakeLists.txt	2022-04-12 02:51:30.000000000 +0900
+++ src/cbflib-CBFlib-0.9.7/CMakeLists.txt	2024-10-02 19:37:44.783395800 +0900
@@ -556,11 +556,18 @@ ExternalProject_Add(
 		-DCMAKE_BUILD_TYPE:STRING=RELEASE DEBUG
 		-DCMAKE_INSTALL_PREFIX:PATH=${TIFF_INSTALL_DIR}
 		-DCMAKE_INSTALL_RPATH:PATH=${TIFF_INSTALL_DIR}/lib
+		-DBUILD_SHARED_LIBS:BOOL=NO
 	INSTALL_DIR ${CMAKE_BINARY_DIR}/${CBF_TIFF}
 )
 
-set(TIFF_LIBRARY_PATH ${TIFF_INSTALL_DIR}/lib/libtiff${CMAKE_SHARED_LIBRARY_SUFFIX})
+set(TIFF_LIBRARY_PATH ${TIFF_INSTALL_DIR}/lib/libtiff${CMAKE_STATIC_LIBRARY_SUFFIX})
 
+find_package(HDF5)
+
+if (HDF5_FOUND)
+  set(CBF_HDF5 "hdf5")
+  set(HDF5_LIBRARY_PATH "${HDF5_LIBRARIES}")
+else()
 ExternalProject_add(
 	${CBF_HDF5}
 	URL "${CBF_HDF5URL}"
@@ -578,6 +585,7 @@ ExternalProject_add(
 )
 
 set(HDF5_LIBRARY_PATH ${HDF5_INSTALL_DIR}/lib/libhdf5${CMAKE_SHARED_LIBRARY_SUFFIX})
+endif()
 
 #
 # CBF_REGEX or CBF_PCRE
@@ -621,8 +629,14 @@ if (NOT CBF_REGEXLIB_INCLUDE_DIR OR NOT
 		add_definitions(-DCBF_REGEXLIB_REGEX)
 	endif ()
 else ()
-	set(CBF_RE "")
+	set(CBF_RE "pcre")
+	if (CYGWIN)
+		find_package(pkgconfig)
+		pkg_check_modules(PCRE libpcreposix)
+		set(CBF_REGEXLIB_LIBRARY_PATH "${PCRE_LIBRARIES}")
+	else()
 		set(CBF_REGEXLIB_LIBRARY_PATH "${CBF_REGEXLIB}/libpcre.so")
+	endif()
 	add_definitions(-DCBF_REGEXLIB_PCRE)
 endif ()
 
@@ -690,6 +704,7 @@ set(
     ${CBF__SRC}/cbf_hdf5.c
     ${CBF__SRC}/cbf_hdf5_filter.c
     ${CBF__SRC}/cbf_lex.c
+	${CBF__SRC}/cbf_minicbf_header.c
     ${CBF__SRC}/cbf_nibble_offset.c
     ${CBF__SRC}/cbf_packed.c
     ${CBF__SRC}/cbf_predictor.c
@@ -876,6 +891,7 @@ set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CB
 #  Build the static and shared CBF libraries
 #
 
+if (BUILD_STATIC_LIBS)
 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CBFlib_BINARY_DIR}/lib")
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CBFlib_BINARY_DIR}/lib")
 add_library(cbf_static STATIC ${CBF_C_SOURCES})
@@ -884,7 +900,7 @@ set_target_properties(cbf_static PROPERT
 set_target_properties(cbf_static PROPERTIES LINKER_LANGUAGE C)
 set_target_properties(cbf_static PROPERTIES SOVERSION "${CBF_APIVERSION}")
 set(CBF_STATIC_LIBRARY_PATH ${CBFlib_BINARY_DIR}/lib/libcbf.a)
-
+endif()
 
 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CBFlib_BINARY_DIR}/lib")
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CBFlib_BINARY_DIR}/lib")
@@ -893,27 +909,36 @@ add_dependencies(cbf_shared ${CBF_RE} ${
 set_target_properties(cbf_shared PROPERTIES OUTPUT_NAME "cbf")
 set_target_properties(cbf_shared PROPERTIES LINKER_LANGUAGE C)
 set_target_properties(cbf_shared PROPERTIES SOVERSION "${CBF_APIVERSION}")
-target_link_libraries(cbf_shared ${HDF5_LIBRARY_PATH})
-set(CBF_SHARED_LIBRARY_PATH ${CBFlib_BINARY_DIR}/lib/libcbf.so)
+target_link_libraries(cbf_shared ${HDF5_LIBRARY_PATH} ${CBF_REGEXLIB_LIBRARY_PATH})
+if (CYGWIN)
+	set(CBF_SHARED_LIBRARY_PATH ${CBFlib_BINARY_DIR}/lib/libcbf.dll.a)
+else()
+	set(CBF_SHARED_LIBRARY_PATH ${CBFlib_BINARY_DIR}/lib/libcbf.so)
+endif()
 
 #
 # Build the static and shared IMG libraries
 #
 
+if (BUILD_STATIC_LIBS)
 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CBFlib_BINARY_DIR}/lib")
 add_library(img_static STATIC ${CBF__SRC}/img.c)
 set_target_properties(img_static PROPERTIES OUTPUT_NAME "img")
 set_target_properties(img_static PROPERTIES LINKER_LANGUAGE C)
 set(IMG_STATIC_LIBRARY_PATH ${CBFlib_BINARY_DIR}/lib/libimg.a)
-
+endif()
 
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CBFlib_BINARY_DIR}/lib")
 add_library(img_shared SHARED  ${CBF__SRC}/img.c)
 set_target_properties(img_shared PROPERTIES OUTPUT_NAME "img")
 set_target_properties(img_shared PROPERTIES LINKER_LANGUAGE C)
+set_target_properties(img_shared PROPERTIES SOVERSION "${CBF_APIVERSION}")
 target_link_libraries(img_shared ${HDF5_LIBRARY_PATH})
-set(IMG_SHARED_LIBRARY_PATH ${CBFlib_BINARY_DIR}/lib/libimg.so)
-
+if (CYGWIN)
+  set(IMG_SHARED_LIBRARY_PATH ${CBFlib_BINARY_DIR}/lib/libimg.dll.a)
+else()
+  set(IMG_SHARED_LIBRARY_PATH ${CBFlib_BINARY_DIR}/lib/libimg.so)
+endif()
 
 if (NOT (CBF_USE_FORTRAN_ENV STREQUAL "NO"))
 
@@ -938,19 +963,25 @@ endforeach(f90src)
 #
 # Build the fcb libraries
 #
+if (BUILD_STATIC_LIBS)
 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CBFlib_BINARY_DIR}/lib")
 add_library(fcb_static STATIC ${CBF_F90_BUILT_SOURCES};${CBF_F90_SOURCES})
 set_target_properties(fcb_static PROPERTIES OUTPUT_NAME "fcb")
 set_target_properties(fcb_static PROPERTIES LINKER_LANGUAGE C)
 set(FCB_STATIC_LIBRARY_PATH ${CBFlib_BINARY_DIR}/lib/libfcb.a)
-
+endif()
 
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CBFlib_BINARY_DIR}/lib")
 add_library(fcb_shared SHARED  ${CBF_F90_BUILT_SOURCES};${CBF_F90_SOURCES})
 set_target_properties(fcb_shared PROPERTIES OUTPUT_NAME "fcb")
 set_target_properties(fcb_shared PROPERTIES LINKER_LANGUAGE C)
+set_target_properties(fcb_shared PROPERTIES SOVERSION "${CBF_APIVERSION}")
 target_link_libraries(fcb_shared ${HDF5_LIBRARY_PATH})
-set(FCB_SHARED_LIBRARY_PATH ${CBFlib_BINARY_DIR}/lib/libfcb.so)
+if (CYGWIN)
+  set(FCB_SHARED_LIBRARY_PATH ${CBFlib_BINARY_DIR}/lib/libfcb.dll.a)
+else()
+  set(FCB_SHARED_LIBRARY_PATH ${CBFlib_BINARY_DIR}/lib/libfcb.so)
+endif()
 
 endif (NOT (CBF_USE_FORTRAN_ENV STREQUAL "NO"))
 
@@ -968,30 +999,30 @@ macro(add_target target source dependenc
 	target_link_libraries(${target} ${libraries})
 endmacro()
 
-add_target(tiff2cbf "${CBF__EXAMPLES}/tiff2cbf.c" "cbf_static;${CBF_TIFF}" "${CBF_STATIC_LIBRARY_PATH};${TIFF_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(cbf2nexus "${CBF__EXAMPLES}/cbf2nexus.c" "cbf_static;${CBF_HDF5}" "${CBF_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(nexus2cbf "${CBF__EXAMPLES}/nexus2cbf.c" "cbf_static;${CBF_HDF5}" "${CBF_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(minicbf2nexus "${CBF__EXAMPLES}/minicbf2nexus.c" "cbf_static;${CBF_HDF5}" "${CBF_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(adscimg2cbf "${CBF__EXAMPLES}/adscimg2cbf.c;${CBF__EXAMPLES}/adscimg2cbf_sub.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH};m")
-add_target(cbf2adscimg "${CBF__EXAMPLES}/cbf2adscimg.c;${CBF__EXAMPLES}/cbf2adscimg_sub.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH};m")
-add_target(convert_image "${CBF__EXAMPLES}/convert_image.c" "cbf_static;img_static" "${CBF_STATIC_LIBRARY_PATH};${IMG_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(convert_minicbf "${CBF__EXAMPLES}/convert_minicbf.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(makecbf "${CBF__EXAMPLES}/makecbf.c" "cbf_static;img_static" "${CBF_STATIC_LIBRARY_PATH};${IMG_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(cbf_tail "${CBF__EXAMPLES}/cbf_tail.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH}")
-add_target(changtestcompression "${CBF__EXAMPLES}/changtestcompression.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(img2cif "${CBF__EXAMPLES}/img2cif.c" "cbf_static;img_static" "${CBF_STATIC_LIBRARY_PATH};${IMG_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(cif2cbf "${CBF__EXAMPLES}/cif2cbf.c" "cbf_static;${CBF_HDF5}" "${CBF_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH};m")
-add_target(cbf_template_t "${CBF__DECTRIS_EXAMPLES}/cbf_template_t.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(testcell "${CBF__EXAMPLES}/testcell.C" "cbf_static" "${CBF_STATIC_LIBRARY_PATH}")
-add_target(sauter_test "${CBF__EXAMPLES}/sauter_test.C" "cbf_static" "${CBF_STATIC_LIBRARY_PATH}")
-add_target(sequence_match "${CBF__EXAMPLES}/sequence_match.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(testulp "${CBF__EXAMPLES}/testulp.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(testhdf5 "${CBF__EXAMPLES}/testhdf5.c" "cbf_static;${CBF_HDF5}" "${CBF_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(testtree "${CBF__EXAMPLES}/testtree.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH};;${HDF5_LIBRARY_PATH}")
-add_target(testalloc "${CBF__EXAMPLES}/testalloc.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(testflat "${CBF__EXAMPLES}/testflat.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH};;${HDF5_LIBRARY_PATH}")
-add_target(testflatpacked "${CBF__EXAMPLES}/testflatpacked.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH};;${HDF5_LIBRARY_PATH}")
-add_target(testreals "${CBF__EXAMPLES}/testreals.c" "cbf_static" "${CBF_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(tiff2cbf "${CBF__EXAMPLES}/tiff2cbf.c" "cbf_shared;${CBF_TIFF}" "${CBF_SHARED_LIBRARY_PATH};${TIFF_LIBRARY_PATH};${HDF5_LIBRARY_PATH};${ZLIB_LIBRARY}")
+add_target(cbf2nexus "${CBF__EXAMPLES}/cbf2nexus.c" "cbf_shared;${CBF_HDF5}" "${CBF_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(nexus2cbf "${CBF__EXAMPLES}/nexus2cbf.c" "cbf_shared;${CBF_HDF5}" "${CBF_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(minicbf2nexus "${CBF__EXAMPLES}/minicbf2nexus.c" "cbf_shared;${CBF_HDF5}" "${CBF_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(adscimg2cbf "${CBF__EXAMPLES}/adscimg2cbf.c;${CBF__EXAMPLES}/adscimg2cbf_sub.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH};m")
+add_target(cbf2adscimg "${CBF__EXAMPLES}/cbf2adscimg.c;${CBF__EXAMPLES}/cbf2adscimg_sub.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH};m")
+add_target(convert_image "${CBF__EXAMPLES}/convert_image.c" "cbf_shared;img_shared" "${CBF_SHARED_LIBRARY_PATH};${IMG_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(convert_minicbf "${CBF__EXAMPLES}/convert_minicbf.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(makecbf "${CBF__EXAMPLES}/makecbf.c" "cbf_shared;img_shared" "${CBF_SHARED_LIBRARY_PATH};${IMG_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(cbf_tail "${CBF__EXAMPLES}/cbf_tail.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH}")
+add_target(changtestcompression "${CBF__EXAMPLES}/changtestcompression.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(img2cif "${CBF__EXAMPLES}/img2cif.c" "cbf_shared;img_shared" "${CBF_SHARED_LIBRARY_PATH};${IMG_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(cif2cbf "${CBF__EXAMPLES}/cif2cbf.c" "cbf_shared;${CBF_HDF5}" "${CBF_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH};m")
+add_target(cbf_template_t "${CBF__DECTRIS_EXAMPLES}/cbf_template_t.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(testcell "${CBF__EXAMPLES}/testcell.C" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH}")
+add_target(sauter_test "${CBF__EXAMPLES}/sauter_test.C" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH}")
+add_target(sequence_match "${CBF__EXAMPLES}/sequence_match.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(testulp "${CBF__EXAMPLES}/testulp.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(testhdf5 "${CBF__EXAMPLES}/testhdf5.c" "cbf_shared;${CBF_HDF5}" "${CBF_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(testtree "${CBF__EXAMPLES}/testtree.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH};;${HDF5_LIBRARY_PATH}")
+add_target(testalloc "${CBF__EXAMPLES}/testalloc.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(testflat "${CBF__EXAMPLES}/testflat.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH};;${HDF5_LIBRARY_PATH}")
+add_target(testflatpacked "${CBF__EXAMPLES}/testflatpacked.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH};;${HDF5_LIBRARY_PATH}")
+add_target(testreals "${CBF__EXAMPLES}/testreals.c" "cbf_shared" "${CBF_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
 
 if (NOT (CBF_USE_FORTRAN_ENV STREQUAL "NO"))
 
@@ -1009,8 +1040,8 @@ add_custom_command(OUTPUT "${CBF__BLDEXM
     DEPENDS ${CBF_M4_FCB_DEFINES} "${CBF__M4}/test_xds_binary.m4"
     COMMENT "Generating ${test_xds_binary.f90}")
 
-add_target(test_fcb_read_image "${CBF__BLDEXMP}/test_fcb_read_image.f90" "fcb_static" "${FCB_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
-add_target(test_xds_binary "${CBF__BLDEXMP}/test_xds_binary.f90" "fcb_static" "${FCB_STATIC_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(test_fcb_read_image "${CBF__BLDEXMP}/test_fcb_read_image.f90" "fcb_shared" "${FCB_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
+add_target(test_xds_binary "${CBF__BLDEXMP}/test_xds_binary.f90" "fcb_shared" "${FCB_SHARED_LIBRARY_PATH};${HDF5_LIBRARY_PATH}")
 
 endif (NOT (CBF_USE_FORTRAN_ENV STREQUAL "NO"))
 
@@ -1035,16 +1066,22 @@ install (TARGETS testcell DESTINATION bi
 install (TARGETS sauter_test DESTINATION bin)
 install (TARGETS sequence_match DESTINATION bin)
 install (TARGETS tiff2cbf DESTINATION bin)
-install (TARGETS cbf_static DESTINATION lib)
-install (TARGETS cbf_shared DESTINATION lib)
+if (BUILD_STATIC_LIBS)
+  install (TARGETS cbf_static DESTINATION lib)
+endif()
+install (TARGETS cbf_shared RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
 
 if (NOT (CBF_USE_FORTRAN_ENV STREQUAL "NO"))
-  install (TARGETS fcb_static DESTINATION lib)
-  install (TARGETS fcb_shared DESTINATION lib)
+  if (BUILD_STATIC_LIBS)
+    install (TARGETS fcb_static DESTINATION lib)
+  endif()
+  install (TARGETS fcb_shared RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
 endif (NOT (CBF_USE_FORTRAN_ENV STREQUAL "NO"))
 
-install (TARGETS img_static DESTINATION lib)
-install (TARGETS img_shared DESTINATION lib)
+if (BUILD_STATIC_LIBS)
+  install (TARGETS img_static DESTINATION lib)
+endif()
+install (TARGETS img_shared RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
 install (DIRECTORY ${CBF__INCLUDE}/ DESTINATION include/cbflib FILES_MATCHING PATTERN "*.h")
 install (DIRECTORY ${CBF__BIN_INCLUDE}/* DESTINATION include/cbflib FILES_MATCHING PATTERN "*.h")
 
@@ -1081,7 +1118,7 @@ macro(CBF_SET_TEST_ENVIRONMENT TESTNAME)
     set (xrpath "${HDF5_INSTALL_DIR}/lib:$ENV{${xrpathname}}")
   ENDIF(WIN32)
   set_property(TEST ${TESTNAME} PROPERTY ENVIRONMENT "${xrpathname}=${xrpath}")
-  message(status "${xrpathname}=${xrpath}")
+  message(STATUS "${xrpathname}=${xrpath}")
 endmacro(CBF_SET_TEST_ENVIRONMENT)
 
 macro(CBF_APPEND_TEST_ENVIRONMENT TESTNAME)
--- origsrc/cbflib-CBFlib-0.9.7/src/cbf_hdf5.c	2022-04-12 02:51:30.000000000 +0900
+++ src/cbflib-CBFlib-0.9.7/src/cbf_hdf5.c	2024-10-02 16:46:29.798670000 +0900
@@ -3944,9 +3944,9 @@ if (CBF_SUCCESS==found) {
         } else if (!valid0 || !valid1) {
             error = 1;
         } else {
-            H5O_info_t info0, info1;
-            herr_t err0 = H5Oget_info(id0,&info0);
-            herr_t err1 = H5Oget_info(id1,&info1);
+            H5O_info1_t info0, info1;
+            herr_t err0 = H5Oget_info1(id0,&info0);
+            herr_t err1 = H5Oget_info1(id1,&info1);
             if (err0 < 0 || err1 < 0) {
                 error = -1;
             } else if (info0.fileno != info1.fileno || info0.addr != info1.addr || info0.type != info1.type) {
@@ -14777,11 +14777,11 @@ _cbf_pilatusAxis2nexusAxisAttrs(h4data,u
                                  const char * object,
                                  hsize_t * numattribs) {
 
-        H5O_info_t object_info;
+        H5O_info1_t object_info;
 
         if (!cbf_H5Ivalid(parent) || !object) return CBF_ARGUMENT;
 
-        cbf_h5failneg(H5Oget_info_by_name( parent, object, &object_info, H5P_DEFAULT ),CBF_NOTFOUND);
+        cbf_h5failneg(H5Oget_info_by_name1( parent, object, &object_info, H5P_DEFAULT ),CBF_NOTFOUND);
 
         if (numattribs) *numattribs = object_info.num_attrs;
 
@@ -18379,10 +18379,10 @@ _cbf_pilatusAxis2nexusAxisAttrs(h4data,u
         } else {
             size_t iaxis;
             size_t jaxis;
-            H5O_info_t iinfo;
+            H5O_info1_t iinfo;
             cbf_axisData_t * nextaxisobj;
             /* search the list of axes for the dataset */
-            cbf_h5reportneg(H5Oget_info( axis, &iinfo ),CBF_H5ERROR,error);
+            cbf_h5reportneg(H5Oget_info1( axis, &iinfo ),CBF_H5ERROR,error);
             nextaxisobj = key->axisobjecthash[iinfo.addr&(CBF_NX2CBF_HASH_BINS-1)];
             while (nextaxisobj != NULL) {
                 const htri_t cmp = cbf_H5Ocmp(nextaxisobj->axis,axis);
@@ -21947,7 +21947,7 @@ _cbf_pilatusAxis2nexusAxisAttrs(h4data,u
                         error |= CBF_H5ERROR;
                     } else if (!err) {
                         H5G_info_t data_info;
-                        H5O_info_t object_info;
+                        H5O_info1_t object_info;
                         char oname[10];
                         ssize_t oname_len;
                         hsize_t idx;
@@ -21958,7 +21958,7 @@ _cbf_pilatusAxis2nexusAxisAttrs(h4data,u
                         err2 = H5Gget_info(nx->nxdata,&data_info);
                         data = CBF_H5FAIL;
                         if (err2 >= 0) for (idx = 0; idx < data_info.nlinks; idx++) {
-                            err3 = H5Oget_info_by_idx(nx->nxdata,".",H5_INDEX_NAME,H5_ITER_INC,
+                            err3 = H5Oget_info_by_idx1(nx->nxdata,".",H5_INDEX_NAME,H5_ITER_INC,
                                                       idx,&object_info,H5P_DEFAULT);
                             if (err3 < 0 || object_info.type != H5O_TYPE_DATASET) continue;
                             oname[0] = '\0';
@@ -30513,7 +30513,7 @@ CBF_CALL(CBFM_pilatusAxis2nexusAxisAttrs
 
         cbf_bookmark saved_bookmark;
 
-        H5O_info_t  objinfo;
+        H5O_info1_t  objinfo;
 
         hid_t attrib_id,attrib_ds,attrib_type;
 
@@ -30555,7 +30555,7 @@ CBF_CALL(CBFM_pilatusAxis2nexusAxisAttrs
 
         if (name[0]== '.') return 0;
 
-        cbf_h5failneg(H5Oget_info_by_name(loc_id,
+        cbf_h5failneg(H5Oget_info_by_name1(loc_id,
                                           name, &objinfo, H5P_DEFAULT),CBF_FORMAT);
 
         save_path_size = ((cbf_h5Ovisithandle)op_data)->path_size;

--- origsrc/ipfixprobe-4.11.1/configure.ac	2023-10-31 03:14:30.000000000 +0900
+++ src/ipfixprobe-4.11.1/configure.ac	2024-09-20 15:07:43.014150600 +0900
@@ -429,10 +429,10 @@ AC_SUBST([systemdsystemunitdir], [$with_
 AM_CONDITIONAL([HAVE_SYSTEMD], [test "x$with_systemdsystemunitdir" != "xno"])
 
 
-if [[ -z "$HAVE_GOOGLETEST_TRUE" ]]; then
+# if [[ -z "$HAVE_GOOGLETEST_TRUE" ]]; then
 # 5ec7f0c4a113e2f18ac2c6cc7df51ad6afc24081
-AC_CONFIG_SUBDIRS([googletest])
-fi
+# AC_CONFIG_SUBDIRS([googletest])
+# fi
 
 AC_CONFIG_FILES([Makefile
                  ipfixprobe.spec
--- origsrc/ipfixprobe-4.11.1/input/parser.cpp	2023-10-31 03:14:30.000000000 +0900
+++ src/ipfixprobe-4.11.1/input/parser.cpp	2024-09-20 15:40:35.102491800 +0900
@@ -278,7 +278,9 @@ inline uint16_t parse_gre(const u_char *
    case ETH_P_PPP_SES:
       return process_pppoe(data_ptr, data_len, pkt) + gre_len;
    default:
+#if defined(IPPROTO_GRE)
       pkt->ip_proto = IPPROTO_GRE;
+#endif
       return 0;
    }
 }
@@ -299,6 +301,7 @@ inline uint16_t parse_ipv4_hdr(const u_c
 
    const int ihl = ip->ihl << 2;
 
+#if defined(IPPROTO_GRE)
    if (ip->protocol == IPPROTO_GRE) {
       DEBUG_MSG("Parse GRE in ipv4 header\n");
       if (data_len < ihl) {
@@ -306,6 +309,7 @@ inline uint16_t parse_ipv4_hdr(const u_c
       }
       return parse_gre(data_ptr + ihl, data_len - ihl, pkt) + ihl;
    }
+#endif
 
    pkt->ip_version = IP::v4;
    pkt->ip_proto = ip->protocol;
@@ -362,6 +366,7 @@ uint16_t skip_ipv6_ext_hdrs(const u_char
          hdrs_len += (ext->ip6e_len << 2) - 2;
       } else if (next_hdr == IPPROTO_FRAGMENT) {
          hdrs_len += 8;
+#if defined(IPPROTO_MH)
       } else if (next_hdr == IPPROTO_MH) {
          hdrs_len += (ext->ip6e_len << 3) + 8;
          // Mobility header can't have payload now but may have it in the future
@@ -369,6 +374,7 @@ uint16_t skip_ipv6_ext_hdrs(const u_char
             pkt->ip_proto = ext->ip6e_nxt;
             break;
          }
+#endif
       } else {
          break;
       }
--- origsrc/ipfixprobe-4.11.1/ipfixprobe.cpp	2023-10-31 03:14:30.000000000 +0900
+++ src/ipfixprobe-4.11.1/ipfixprobe.cpp	2024-09-20 15:47:05.599680500 +0900
@@ -45,6 +45,10 @@
 #endif
 #include "stats.hpp"
 
+#if !defined(POLL_IN)
+#define POLL_IN POLLIN
+#endif
+
 namespace ipxp {
 
 volatile sig_atomic_t stop = 0;

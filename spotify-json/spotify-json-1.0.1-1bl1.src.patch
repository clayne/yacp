--- origsrc/spotify-json-1.0.1/CMakeLists.txt	2017-11-10 01:02:43.000000000 +0900
+++ src/spotify-json-1.0.1/CMakeLists.txt	2025-09-14 05:46:34.040107200 +0900
@@ -105,9 +105,13 @@ source_group(spotify\\json\\codec  FILES
 source_group(spotify\\json\\detail FILES ${json_detail_HEADERS})
 
 set(json_library_TARGET "spotify-json")
-add_library(${json_library_TARGET} STATIC ${json_all_HEADERS} ${json_all_SOURCES})
+add_library(${json_library_TARGET} SHARED ${json_all_HEADERS} ${json_all_SOURCES})
 target_include_directories(${json_library_TARGET} PUBLIC ${json_INCLUDE_DIR})
 
+if (DEFINED SOVERSION)
+  set_target_properties(${json_library_TARGET} PROPERTIES SOVERSION ${SOVERSION})
+endif()
+
 if(WIN32)
   target_compile_options(${json_library_TARGET} PRIVATE "/MT$<$<CONFIG:Debug>:d>")
 endif()
@@ -120,33 +124,41 @@ if(SPOTIFY_JSON_USE_SSE42)
   endif()
 endif()
 
-# Disable building double-conversion tests, since they fail on
-# Windows due to the use of "/fp:fast" and bugs in the compiler.
-# They also don't pass ASan at the moment.
-set(BUILD_TESTING OFF)
-set(BUILD_SHARED_LIBS OFF)
-add_subdirectory(vendor/double-conversion)
+find_path(DOUBLE_CONVERSION_INCLUDE_DIR double-conversion/double-conversion.h)
+find_library(DOUBLE_CONVERSION_LIBRARY double-conversion)
 
-if(WIN32)
-  target_compile_options(double-conversion PRIVATE "/MT$<$<CONFIG:Debug>:d>")
-  target_compile_options(double-conversion PRIVATE "/w")
-elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-  target_compile_options(double-conversion PRIVATE "-Xanalyzer" "-analyzer-disable-all-checks")
-  target_compile_options(double-conversion PRIVATE "-w")
+if (DOUBLE_CONVERSION_INCLUDE_DIR AND DOUBLE_CONVERSION_LIBRARY)
+  message(STATUS "Found double-conversion: ${DOUBLE_CONVERSION_LIBRARY}")
+  target_include_directories(${json_library_TARGET} PUBLIC ${DOUBLE_CONVERSION_INCLUDE_DIR})
+  target_link_libraries(${json_library_TARGET} ${DOUBLE_CONVERSION_LIBRARY})
+  target_compile_definitions(${json_library_TARGET} PUBLIC SYSTEM_DOUBLE_CONVERSION)
 else()
-  target_compile_options(double-conversion PRIVATE "-w")
-endif()
+  # Disable building double-conversion tests, since they fail on
+  # Windows due to the use of "/fp:fast" and bugs in the compiler.
+  # They also don't pass ASan at the moment.
+  set(BUILD_TESTING OFF)
+  set(BUILD_SHARED_LIBS OFF)
+  add_subdirectory(vendor/double-conversion)
+
+  if(WIN32)
+    target_compile_options(double-conversion PRIVATE "/MT$<$<CONFIG:Debug>:d>")
+    target_compile_options(double-conversion PRIVATE "/w")
+  elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+    target_compile_options(double-conversion PRIVATE "-Xanalyzer" "-analyzer-disable-all-checks")
+    target_compile_options(double-conversion PRIVATE "-w")
+  else()
+    target_compile_options(double-conversion PRIVATE "-w")
+  endif()
 
-set(double_conversion_INCLUDE_DIR ${CMAKE_CURRENT_LIST_DIR}/vendor/double-conversion)
+  set(double_conversion_INCLUDE_DIR ${CMAKE_CURRENT_LIST_DIR}/vendor/double-conversion)
 
-target_include_directories(${json_library_TARGET} PUBLIC ${double_conversion_INCLUDE_DIR})
-target_link_libraries(${json_library_TARGET} double-conversion)
+  target_include_directories(${json_library_TARGET} PUBLIC ${double_conversion_INCLUDE_DIR})
+  target_link_libraries(${json_library_TARGET} double-conversion)
+endif()
 
 option(SPOTIFY_JSON_BUILD_TESTS "Build tests and benchmarks" ON)
 if(SPOTIFY_JSON_BUILD_TESTS)
   set(Boost_USE_MULTITHREADED ON)
-  set(Boost_USE_STATIC_LIBS ON)
-  set(Boost_USE_STATIC_RUNTIME ON)
 
   find_package(Boost COMPONENTS chrono unit_test_framework system)
 
@@ -158,3 +170,13 @@ if(SPOTIFY_JSON_BUILD_TESTS)
     message(STATUS "Specify BOOST_ROOT (and possibly BOOST_LIBRARYDIR) to build unit tests and benchmarks.")
   endif()
 endif()
+
+install(TARGETS ${json_library_TARGET} RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+install(DIRECTORY include/spotify DESTINATION include)
+
+set(prefix ${CMAKE_INSTALL_PREFIX})
+set(exec_prefix ${CMAKE_INSTALL_PREFIX})
+set(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+set(includedir ${CMAKE_INSTALL_PREFIX}/include)
+configure_file(${CMAKE_SOURCE_DIR}/spotify-json.pc.in ${CMAKE_BINARY_DIR}/spotify-json.pc @ONLY)
+install(FILES ${CMAKE_BINARY_DIR}/spotify-json.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/spotify-json-1.0.1/benchmark/CMakeLists.txt	2017-11-10 01:02:43.000000000 +0900
+++ src/spotify-json-1.0.1/benchmark/CMakeLists.txt	2025-09-14 05:32:41.021343400 +0900
@@ -34,6 +34,8 @@ source_group(spotify\\json\\benchmark FI
 
 add_executable(${json_benchmark_TARGET} ${json_benchmark_SOURCES} ${json_benchmark_HEADERS})
 
+target_compile_definitions(${json_benchmark_TARGET} PRIVATE BOOST_TEST_DYN_LINK)
+
 set_property(TARGET ${json_benchmark_TARGET} PROPERTY CXX_STANDARD 11)
 set_property(TARGET ${json_benchmark_TARGET} PROPERTY CXX_STANDARD_REQUIRED ON)
 
--- origsrc/spotify-json-1.0.1/spotify-json.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/spotify-json-1.0.1/spotify-json.pc.in	2025-09-14 05:46:25.805542300 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: spotify-json
+Description: Fast and nice to use C++ JSON library
+Version: @VERSION@
+Libs: -L${libdir} -lspotify-json
+Cflags: -I${includedir}
--- origsrc/spotify-json-1.0.1/test/CMakeLists.txt	2017-11-10 01:02:43.000000000 +0900
+++ src/spotify-json-1.0.1/test/CMakeLists.txt	2025-09-14 05:33:52.825672200 +0900
@@ -66,6 +66,8 @@ source_group(spotify\\json\\test FILES $
 
 add_executable(${spotify_json_test_TARGET} ${spotify_json_test_SOURCES} ${spotify_json_test_HEADERS})
 
+target_compile_definitions(${spotify_json_test_TARGET} PRIVATE BOOST_TEST_DYN_LINK)
+
 set_property(TARGET ${spotify_json_test_TARGET} PROPERTY CXX_STANDARD 11)
 set_property(TARGET ${spotify_json_test_TARGET} PROPERTY CXX_STANDARD_REQUIRED ON)
 

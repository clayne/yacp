--- origsrc/rizin-0.7.3/librz/analysis/p/analysis_xtensa.c	2024-04-13 16:40:36.000000000 +0900
+++ src/rizin-0.7.3/librz/analysis/p/analysis_xtensa.c	2024-10-30 12:53:13.555060900 +0900
@@ -21,7 +21,7 @@ typedef struct {
 static bool xtensa_init(void **user) {
 	XtensaContext *ctx = RZ_NEW0(XtensaContext);
 	rz_return_val_if_fail(ctx, false);
-	memcpy(ctx->length_table, (int[16]){ 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 8, 8 }, sizeof(ctx->length_table));
+	memcpy(ctx->length_table, ((int[16]){ 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 8, 8 }), sizeof(ctx->length_table));
 	ctx->insn_buffer = NULL;
 	ctx->slot_buffer = NULL;
 	*user = ctx;
--- origsrc/rizin-0.7.3/librz/debug/meson.build	2024-04-13 16:40:36.000000000 +0900
+++ src/rizin-0.7.3/librz/debug/meson.build	2024-10-30 13:45:43.072365700 +0900
@@ -8,7 +8,7 @@ debug_plugins_list = [
   'rap',
   'winkd',
 ]
-if get_option('use_gpl')
+if get_option('use_gpl') and host_machine.system() != 'cygwin'
   debug_plugins_list += 'qnx'
 endif
 if has_debugger
@@ -75,7 +75,7 @@ rz_debug_deps = [
   platform_deps
 ]
 
-if get_option('use_gpl')
+if get_option('use_gpl') and host_machine.system() != 'cygwin'
   rz_debug_deps += dependency('rzqnx')
   rz_debug_sources += 'p/debug_qnx.c'
 endif
--- origsrc/rizin-0.7.3/librz/debug/p/debug_native.c	2024-04-13 16:40:36.000000000 +0900
+++ src/rizin-0.7.3/librz/debug/p/debug_native.c	2024-10-30 13:10:01.959572100 +0900
@@ -22,7 +22,7 @@ static int rz_debug_native_reg_write(RzD
 
 #if __UNIX__
 #include <errno.h>
-#if !defined(__HAIKU__) && !defined(__sun)
+#if !defined(__HAIKU__) && !defined(__sun) && !defined(__CYGWIN__)
 #include <sys/ptrace.h>
 #endif
 #include <sys/wait.h>
--- origsrc/rizin-0.7.3/librz/include/rz_types.h	2024-04-13 16:40:36.000000000 +0900
+++ src/rizin-0.7.3/librz/include/rz_types.h	2024-10-30 12:16:27.478691700 +0900
@@ -142,6 +142,10 @@
 #undef __BSD__
 #endif
 
+#if defined(__CYGWIN__)
+#define __UNIX__ 1
+#endif
+
 #if defined(__APPLE__) && ((__arm__ || __arm64__ || __aarch64__) && IS_IOS)
 #define TARGET_OS_IPHONE 1
 #else
--- origsrc/rizin-0.7.3/librz/type/meson.build	2024-04-13 16:40:36.000000000 +0900
+++ src/rizin-0.7.3/librz/type/meson.build	2024-10-30 12:39:50.483837200 +0900
@@ -29,6 +29,7 @@ rz_type = library('rz_type', rz_type_sou
   include_directories: rz_type_inc,
   dependencies: [
     rz_util_dep,
+    tree_sitter_dep,
     tree_sitter_c_dep,
     lrt
   ],
--- origsrc/rizin-0.7.3/librz/util/buf_file.c	2024-04-13 16:40:36.000000000 +0900
+++ src/rizin-0.7.3/librz/util/buf_file.c	2024-10-30 12:07:36.213386300 +0900
@@ -1,6 +1,7 @@
 // SPDX-FileCopyrightText: 2009-2020 ret2libc <sirmy15@gmail.com>
 // SPDX-License-Identifier: LGPL-3.0-only
 
+#include <unistd.h>
 #include <rz_types.h>
 #include <rz_util.h>
 
--- origsrc/rizin-0.7.3/librz/util/file.c	2024-04-13 16:40:36.000000000 +0900
+++ src/rizin-0.7.3/librz/util/file.c	2024-10-30 12:09:29.682726900 +0900
@@ -21,6 +21,7 @@
 #include <rz_windows.h>
 #include <process.h>
 #endif
+#include <unistd.h>
 
 #define BS 1024
 #ifdef __WINDOWS__
@@ -958,7 +959,7 @@ static RzMmap *file_mmap(RzMmap *m) {
 #else
 static RzMmap *file_mmap(RzMmap *m) {
 	m->len = lseek(m->fd, (off_t)0, SEEK_END);
-	m->buf = malloc (m->len));
+	m->buf = malloc (m->len);
 	if (!m->buf) {
 		rz_file_mmap_free(m);
 		return NULL;
--- origsrc/rizin-0.7.3/meson.build	2024-04-13 16:40:36.000000000 +0900
+++ src/rizin-0.7.3/meson.build	2024-10-30 12:02:10.549006100 +0900
@@ -265,24 +265,41 @@ if r.returncode() == 1 and get_option('s
   error(subproject_clean_error_msg)
 endif
 
-libdemangle_options = ['default_library=static']
-if get_option('use_gpl')
-  libdemangle_options += 'use_gpl=true'
-else
-  libdemangle_options += 'use_gpl=false'
-endif
-if get_option('use_swift_demangler')
-  libdemangle_options += 'use_swift_demangler=true'
-else
-  libdemangle_options += 'use_swift_demangler=false'
+sys_libdemangle_opt = get_option('use_sys_libdemangle')
+if sys_libdemangle_opt.enabled() or sys_libdemangle_opt.auto()
+  libdemangle_dep = dependency('libdemangle', required: false, static: is_static_build)
+  if not libdemangle_dep.found()
+    libdemangle_dep = cc.find_library('demangle', required: sys_libdemangle_opt, static: is_static_build)
+  endif
+endif
+if (sys_libdemangle_opt.auto() and not libdemangle_dep.found()) or sys_libdemangle_opt.disabled()
+  libdemangle_options = ['default_library=static']
+  if get_option('use_gpl')
+    libdemangle_options += 'use_gpl=true'
+  else
+    libdemangle_options += 'use_gpl=false'
+  endif
+  if get_option('use_swift_demangler')
+    libdemangle_options += 'use_swift_demangler=true'
+  else
+    libdemangle_options += 'use_swift_demangler=false'
+  endif
+  libdemangle_proj = subproject('libdemangle', default_options: libdemangle_options)
+  libdemangle_dep = libdemangle_proj.get_variable('libdemangle_dep')
 endif
-
-libdemangle_proj = subproject('libdemangle', default_options: libdemangle_options)
-libdemangle_dep = libdemangle_proj.get_variable('libdemangle_dep')
 
 # handle blake3 algo
-blake3_proj = subproject('blake3', default_options: ['default_library=static', 'werror=false'])
-blake3_dep = blake3_proj.get_variable('blake3_dep')
+sys_blake3_opt = get_option('use_sys_blake3')
+if sys_blake3_opt.enabled() or sys_blake3_opt.auto()
+  blake3_dep = dependency('libblake3', required: false, static: is_static_build)
+  if not blake3_dep.found()
+    blake3_dep = cc.find_library('blake3', required: sys_blake3_opt, static: is_static_build)
+  endif
+endif
+if (sys_blake3_opt.auto() and not blake3_dep.found()) or sys_blake3_opt.disabled()
+  blake3_proj = subproject('blake3', default_options: ['default_library=static', 'werror=false'])
+  blake3_dep = blake3_proj.get_variable('blake3_dep')
+endif
 
 # handle openssl library
 sys_openssl = dependency('openssl', required: get_option('use_sys_openssl'), static: is_static_build)
@@ -632,8 +649,17 @@ if r.returncode() == 1 and get_option('s
   error(subproject_clean_error_msg)
 endif
 
-mpc_proj = subproject('mpc', default_options: ['default_library=static'])
-mpc_dep = mpc_proj.get_variable('mpc_dep')
+sys_mpc_opt = get_option('use_sys_mpc')
+if sys_mpc_opt.enabled() or sys_mpc_opt.auto()
+  mpc_dep = dependency('libmpc', required: false, static: is_static_build)
+  if not mpc_dep.found()
+    mpc_dep = cc.find_library('mpc', required: sys_mpc_opt, static: is_static_build)
+  endif
+endif
+if not mpc_dep.found()
+  mpc_proj = subproject('mpc', default_options: ['default_library=static'])
+  mpc_dep = mpc_proj.get_variable('mpc_dep')
+endif
 
 # handle yxml dependency
 r = run_command(py3_exe, check_meson_subproject_py, 'yxml', check: false)
@@ -641,8 +667,11 @@ if r.returncode() == 1 and get_option('s
   error(subproject_clean_error_msg)
 endif
 
-yxml_proj = subproject('yxml', default_options: ['default_library=static'])
-yxml_dep = yxml_proj.get_variable('yxml_dep')
+yxml_dep = dependency('yxml', required: get_option('use_sys_yxml'), static: is_static_build)
+if not yxml_dep.found()
+  yxml_proj = subproject('yxml', default_options: ['default_library=static'])
+  yxml_dep = yxml_proj.get_variable('yxml_dep')
+endif
 
 use_rpath = false
 use_rpath_absolute = false
--- origsrc/rizin-0.7.3/meson_options.txt	2024-04-13 16:40:36.000000000 +0900
+++ src/rizin-0.7.3/meson_options.txt	2024-10-30 11:34:26.043480100 +0900
@@ -26,11 +26,15 @@ option('use_sys_libzip', type: 'feature'
 option('use_sys_libzip_openssl', type: 'boolean', value: false, description: 'Whether to use or not system openssl dependency to build libzip')
 option('use_sys_zlib', type: 'feature', value: 'disabled')
 option('use_sys_lz4', type: 'feature', value: 'disabled')
+option('use_sys_mpc', type: 'feature', value: 'disabled')
+option('use_sys_yxml', type: 'feature', value: 'disabled')
 option('use_sys_libzstd', type: 'feature', value: 'disabled')
 option('use_lzma', type: 'boolean', value: true, description: 'If true, liblzma is used to provide extra features (e.g. .gnu_debugdata parser)')
 option('use_zlib', type: 'boolean', value: true, description: 'If true, zlib is used to provide extra features (e.g. project compression/decompression, etc.)')
 option('use_sys_lzma', type: 'feature', value: 'disabled')
 option('use_sys_xxhash', type: 'feature', value: 'disabled')
+option('use_sys_libdemangle', type: 'feature', value: 'disabled')
+option('use_sys_blake3', type: 'feature', value: 'disabled')
 option('use_sys_openssl', type: 'feature', value: 'disabled')
 option('use_sys_libmspack', type: 'feature', value: 'disabled')
 option('use_sys_tree_sitter', type: 'feature', value: 'disabled')
--- origsrc/rizin-0.7.3/subprojects/rzheap/rz_jemalloc/internal/jemalloc_internal_decls.h	2024-04-13 16:40:36.000000000 +0900
+++ src/rizin-0.7.3/subprojects/rzheap/rz_jemalloc/internal/jemalloc_internal_decls.h	2024-10-30 13:24:55.905316300 +0900
@@ -9,7 +9,7 @@
 #else
 #  include <sys/param.h>
 #  include <sys/mman.h>
-#  if !defined(__pnacl__) && !defined(__native_client__) && !defined(__HAIKU__)
+#  if !defined(__pnacl__) && !defined(__native_client__) && !defined(__HAIKU__) && !defined(__CYGWIN__)
 #    include <sys/syscall.h>
 #    if !defined(SYS_write) && defined(__NR_write)
 #      define SYS_write __NR_write
--- origsrc/rizin-0.7.3/subprojects/rzspp/spp.h	2024-04-13 16:40:36.000000000 +0900
+++ src/rizin-0.7.3/subprojects/rzspp/spp.h	2024-10-30 12:46:45.205589500 +0900
@@ -37,7 +37,7 @@
   #define __BSD__ 1
   #define __UNIX__ 1
 #endif
-#if __WIN32__ || __CYGWIN__ || MINGW32
+#if __WIN32__ || MINGW32
   #define __addr_t_defined
   #include <windows.h>
 #endif

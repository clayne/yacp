--- origsrc/RdRand-2.1.4/Makefile.am	2022-02-18 02:23:02.000000000 +0900
+++ src/RdRand-2.1.4/Makefile.am	2024-12-06 12:10:32.736271700 +0900
@@ -49,7 +49,8 @@ librdrand_la_SOURCES = src/librdrand.c
 ## Instruct libtool to include ABI version information in the generated shared
 ## library file (.so).  The library ABI version is defined in configure.ac, so
 ## that all version information is kept in one place.
-librdrand_la_LDFLAGS = -version-info $(RDRAND_SO_VERSION) -lcrypto
+librdrand_la_LDFLAGS = -no-undefined -version-info $(RDRAND_SO_VERSION)
+librdrand_la_LIBADD = -lcrypto
 
 ## Define the list of public header files and their install location.  The
 ## nobase_ prefix instructs Automake to not strip the directory part from each
--- origsrc/RdRand-2.1.4/configure.ac	2022-02-18 02:23:02.000000000 +0900
+++ src/RdRand-2.1.4/configure.ac	2024-12-06 12:26:19.961406100 +0900
@@ -1,8 +1,8 @@
 ## LibRdRand:
 ## an example of using Automake and Libtool to build a shared librar
 
-AC_INIT([LibRdRand], [1.2.0], [jan@tulak.me], [librdrand],
-        [https://github.com/BroukPytlik/RdRand])
+AC_INIT([LibRdRand], [2.1.4], [jan@tulak.me], [librdrand],
+        [https://github.com/jirka-h/RdRand])
 AC_PREREQ([2.59])
 AM_INIT_AUTOMAKE([1.10  -Wall  no-define])
 
--- origsrc/RdRand-2.1.4/src/librdrand-aes.c	2022-02-18 02:23:02.000000000 +0900
+++ src/RdRand-2.1.4/src/librdrand-aes.c	2024-12-06 12:16:30.300058200 +0900
@@ -190,11 +190,13 @@ int keys_mem_lock(void * ptr, size_t len
     //return TRUE;
    
 //{{{ getrlimit
+#if defined(RLIMIT_MEMLOCK)
   if ( getrlimit(RLIMIT_MEMLOCK, &rlim) == 0 ) {
     mlock_limit = rlim.rlim_cur;
     //fprintf(stderr, "INFO:  getrlimit(RLIMIT_MEMLOCK, rlim) reports: current limit %d, maximum (ceiling) %d.\n", rlim.rlim_cur, rlim.rlim_max);
     mlock_limit /= 4;
   } else {
+#endif
     mlock_limit = 16384;
     fprintf (stderr, 
         "\nWARNING: keys_mem_lock: "
@@ -204,7 +206,9 @@ int keys_mem_lock(void * ptr, size_t len
         strerror (errno) 
     );
     return 0;
+#if defined(RLIMIT_MEMLOCK)
   }
+#endif
 //}}}
 
   if ( len <= mlock_limit ) {

--- origsrc/andi-0.14/src/Makefile.am	2021-11-28 22:43:24.000000000 +0900
+++ src/andi-0.14/src/Makefile.am	2023-11-04 14:23:24.868715200 +0900
@@ -2,7 +2,7 @@ bin_PROGRAMS = andi
 
 andi_SOURCES = andi.c esa.c process.c sequence.c io.c global.h esa.h process.h sequence.h io.h dist_hack.h \
 model.h model.c
-andi_CPPFLAGS = $(OPENMP_CFLAGS) -I$(top_srcdir)/libs -I$(top_srcdir)/opt -std=gnu99
+andi_CPPFLAGS = $(OPENMP_CFLAGS) -I$(top_srcdir)/libs -I$(top_srcdir)/opt
 andi_CFLAGS = $(OPENMP_CFLAGS) -Wall -Wextra -Wno-missing-field-initializers
 andi_LDADD = $(top_builddir)/libs/libpfasta.a $(top_builddir)/opt/libcompat.a
 
--- origsrc/andi-0.14/src/dist_hack.h	2021-11-28 22:43:24.000000000 +0900
+++ src/andi-0.14/src/dist_hack.h	2023-11-04 14:34:06.668223000 +0900
@@ -5,7 +5,11 @@
 // clang-format off
 #ifdef FAST
 #define NAME distMatrix
+#if defined(__CYGWIN__)
+#define P_OUTER
+#else
 #define P_OUTER _Pragma("omp parallel for num_threads( THREADS) default(none) shared(progress_counter) firstprivate( stderr, M, sequences, n, print_progress)")
+#endif
 #define P_INNER
 #else
 #undef NAME
@@ -13,8 +17,12 @@
 #undef P_INNER
 #define NAME distMatrixLM
 #define P_OUTER
+#if defined(__CYGWIN__)
+#define P_INNER
+#else
 #define P_INNER _Pragma("omp parallel for num_threads( THREADS) default(none) shared(progress_counter) firstprivate( stderr, M, sequences, n, print_progress, i, E, subject)")
 #endif
+#endif
 // clang-format on
 
 /** @brief This function calls dist_andi for pairs of subjects and queries, and
--- origsrc/andi-0.14/test/Makefile.am	2021-11-28 22:43:24.000000000 +0900
+++ src/andi-0.14/test/Makefile.am	2023-11-04 14:23:51.385169000 +0900
@@ -2,17 +2,17 @@ check_PROGRAMS = test_esa test_seq test_
 dist_noinst_DATA = test_extra.sh test_random.sh test_join.sh nan.sh low_homo.sh
 
 test_seq_SOURCES = test_seq.c $(top_srcdir)/src/sequence.c
-test_seq_CPPFLAGS = -I$(top_srcdir)/src -I$(top_srcdir)/opt -DDEBUG -std=gnu99
+test_seq_CPPFLAGS = -I$(top_srcdir)/src -I$(top_srcdir)/opt -DDEBUG
 test_seq_CFLAGS = -Wall -Wextra $(GLIB_CFLAGS) -Wno-missing-field-initializers
 test_seq_LDADD = $(GLIB_LIBS) $(top_builddir)/opt/libcompat.a
 
 test_process_SOURCES = test_process.c $(top_srcdir)/src/esa.c $(top_srcdir)/src/io.c $(top_srcdir)/src/model.c $(top_srcdir)/src/process.c $(top_srcdir)/src/sequence.c $(top_srcdir)/src/global.h
-test_process_CPPFLAGS = $(OPENMP_CFLAGS) -I$(top_srcdir)/src -I$(top_srcdir)/opt -I$(top_srcdir)/libs -DDEBUG -std=gnu99
+test_process_CPPFLAGS = $(OPENMP_CFLAGS) -I$(top_srcdir)/src -I$(top_srcdir)/opt -I$(top_srcdir)/libs -DDEBUG
 test_process_CFLAGS = $(OPENMP_CFLAGS) -Wall -Wextra $(GLIB_CFLAGS) -Wno-missing-field-initializers
 test_process_LDADD = $(GLIB_LIBS) $(top_builddir)/opt/libcompat.a $(top_builddir)/libs/libpfasta.a
 
 test_esa_SOURCES = test_esa.c $(top_srcdir)/src/esa.c $(top_srcdir)/src/sequence.c $(top_srcdir)/src/esa.h
-test_esa_CPPFLAGS = $(OPENMP_CFLAGS) -I$(top_srcdir)/libs -I$(top_srcdir)/opt -I$(top_srcdir)/src -DDEBUG -std=gnu99
+test_esa_CPPFLAGS = $(OPENMP_CFLAGS) -I$(top_srcdir)/libs -I$(top_srcdir)/opt -I$(top_srcdir)/src -DDEBUG
 test_esa_CFLAGS = $(OPENMP_CFLAGS) -Wall -Wextra $(GLIB_CFLAGS) -Wno-missing-field-initializers
 test_esa_LDADD = $(GLIB_LIBS) $(top_builddir)/opt/libcompat.a
 

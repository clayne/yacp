--- origsrc/groonga-12.0.3/benchmark/bench-geo-distance.c	2022-04-29 06:43:05.000000000 +0900
+++ src/groonga-12.0.3/benchmark/bench-geo-distance.c	2022-05-04 14:04:21.581409700 +0900
@@ -56,8 +56,6 @@
 
 #define GET(context, name) (grn_ctx_get(context, name, strlen(name)))
 
-grn_obj *grn_expr_get_value(grn_ctx *ctx, grn_obj *expr, int offset);
-
 typedef struct _BenchmarkData
 {
   gchar *base_dir;
--- origsrc/groonga-12.0.3/configure.ac	2022-04-29 06:43:05.000000000 +0900
+++ src/groonga-12.0.3/configure.ac	2022-05-04 14:04:21.586423200 +0900
@@ -1452,7 +1452,7 @@ AC_MSG_CHECKING([whether package platfor
 AC_ARG_WITH(package-platform,
   [AS_HELP_STRING([--with-package-platform=PLATFORM],
     [install package platform related files. [default=no]
-     (supported package platforms: centos, centos6, centos7, fedora)])],
+     (supported package platforms: centos, centos6, centos7, fedora, cygwin)])],
   [package_platform="$withval"],
   [package_platform="no"])
 if test "$package_platform" = "centos"; then
@@ -1473,7 +1473,7 @@ centos_systemd_platform=no
 case "${package_platform}" in
   no)
     ;;
-  centos6)
+  centos6|cygwin)
     centos_platform=yes
     centos_init_platform=yes
     ;;
@@ -1614,7 +1614,7 @@ AC_ARG_ENABLE(groonga_httpd,
   [enable_groonga_httpd="yes"])
 if test "x$enable_groonga_httpd" != "xno"; then
   enable_groonga_httpd="yes"
-  AC_CONFIG_SUBDIRS([src/httpd])
+  # AC_CONFIG_SUBDIRS([src/httpd])
 else
   enable_groonga_httpd="no"
 fi
@@ -1694,7 +1694,7 @@ if test "x$with_onigmo" != "xno"; then
     AC_MSG_ERROR("No Onigmo found")
   fi
   if test "x$with_onigmo" = "xbundled" -o "$have_onigmo" = "no"; then
-    AC_CONFIG_SUBDIRS([vendor/onigmo])
+    # AC_CONFIG_SUBDIRS([vendor/onigmo])
     ONIGMO_CFLAGS="-I\$(top_srcdir)/vendor/onigmo-source"
     ONIGMO_LIBS="\$(top_builddir)/vendor/onigmo-source/libonigmo.la"
   fi
--- origsrc/groonga-12.0.3/include/groonga/expr.h	2022-04-29 06:43:05.000000000 +0900
+++ src/groonga-12.0.3/include/groonga/expr.h	2022-05-04 14:04:21.590428900 +0900
@@ -171,6 +171,8 @@ grn_expr_set_condition(grn_ctx *ctx,
 GRN_API grn_obj *
 grn_expr_get_condition(grn_ctx *ctx, grn_obj *expr);
 
+GRN_API grn_obj *grn_expr_get_value(grn_ctx *ctx, grn_obj *expr, int offset);
+
 #ifdef __cplusplus
 }
 #endif
--- origsrc/groonga-12.0.3/include/groonga/plugin.h	2022-04-29 06:43:05.000000000 +0900
+++ src/groonga-12.0.3/include/groonga/plugin.h	2022-05-04 14:04:21.595437900 +0900
@@ -44,7 +44,7 @@ extern "C" {
 #define GRN_PLUGIN_REGISTER GRN_PLUGIN_IMPL_NAME(register)
 #define GRN_PLUGIN_FIN      GRN_PLUGIN_IMPL_NAME(fin)
 
-#if defined(_WIN32) || defined(_WIN64)
+#if defined(_WIN32) || defined(_WIN64) || defined(__CYGWIN__)
 #  define GRN_PLUGIN_EXPORT __declspec(dllexport)
 #else /* defined(_WIN32) || defined(_WIN64) */
 #  define GRN_PLUGIN_EXPORT
--- origsrc/groonga-12.0.3/lib/grn.h	2022-04-29 06:43:05.000000000 +0900
+++ src/groonga-12.0.3/lib/grn.h	2022-05-04 14:04:21.614421500 +0900
@@ -68,7 +68,7 @@
 # include <sys/resource.h>
 #endif /* HAVE_SYS_RESOURCE_H */
 
-#ifdef WIN32
+#if defined(WIN32) || defined(__CYGWIN__)
 # define GRN_API __declspec(dllexport)
 # ifdef GROONGA_MAIN
 #  define GRN_VAR __declspec(dllimport)
--- origsrc/groonga-12.0.3/lib/grn_cache.h	2022-04-29 06:43:05.000000000 +0900
+++ src/groonga-12.0.3/lib/grn_cache.h	2022-05-04 14:04:21.619430800 +0900
@@ -34,10 +34,10 @@ typedef struct {
 } grn_cache_statistics;
 
 void grn_cache_init(void);
-grn_rc grn_cache_fetch(grn_ctx *ctx, grn_cache *cache,
+GRN_API grn_rc grn_cache_fetch(grn_ctx *ctx, grn_cache *cache,
                        const char *str, uint32_t str_size,
                        grn_obj *output);
-void grn_cache_update(grn_ctx *ctx, grn_cache *cache,
+GRN_API void grn_cache_update(grn_ctx *ctx, grn_cache *cache,
                       const char *str, uint32_t str_size, grn_obj *value);
 void grn_cache_expire(grn_cache *cache, uint32_t size);
 void grn_cache_fin(void);
--- origsrc/groonga-12.0.3/lib/grn_str.h	2022-04-29 06:43:05.000000000 +0900
+++ src/groonga-12.0.3/lib/grn_str.h	2022-05-04 14:04:21.652498000 +0900
@@ -74,7 +74,7 @@ grn_rc grn_substring(grn_ctx *ctx, char
 GRN_API int grn_charlen_(grn_ctx *ctx, const char *str, const char *end, grn_encoding encoding);
 GRN_API grn_str *grn_str_open_(grn_ctx *ctx, const char *str, unsigned int str_len, int flags, grn_encoding encoding);
 
-grn_rc grn_text_ulltoa(grn_ctx *ctx, grn_obj *buf, unsigned long long int i);
+GRN_API grn_rc grn_text_ulltoa(grn_ctx *ctx, grn_obj *buf, unsigned long long int i);
 
 GRN_API const char *grn_text_cgidec(grn_ctx *ctx, grn_obj *buf,
                                     const char *p, const char *e,
--- origsrc/groonga-12.0.3/plugins/tokenizers/kytea.cpp	2022-04-29 06:43:05.000000000 +0900
+++ src/groonga-12.0.3/plugins/tokenizers/kytea.cpp	2022-05-04 14:04:21.657475200 +0900
@@ -255,9 +255,9 @@ grn_obj *grn_kytea_init(grn_ctx *ctx, in
         unsigned int left = static_cast<unsigned int>(token.length());
         while (left > 0) {
           const int char_length =
-              grn_tokenizer_charlen(ctx, ptr, left, encoding);
+              grn_plugin_charlen(ctx, ptr, left, encoding);
           if ((char_length == 0) ||
-              (grn_tokenizer_isspace(ctx, ptr, left, encoding) != 0)) {
+              (grn_plugin_isspace(ctx, ptr, left, encoding) != 0)) {
             break;
           }
           ptr += char_length;
--- origsrc/groonga-12.0.3/test/unit/Makefile.am	2022-04-29 06:43:06.000000000 +0900
+++ src/groonga-12.0.3/test/unit/Makefile.am	2022-05-04 14:04:21.663478300 +0900
@@ -32,7 +32,7 @@ AM_CPPFLAGS =					\
 	-I$(top_srcdir)/lib			\
 	$(GROONGA_INCLUDEDIR)
 
-AM_LDFLAGS = -module -rpath $(libdir) -avoid-version
+AM_LDFLAGS = -no-undefined -module -rpath $(libdir) -avoid-version
 
 LIBS =						\
 	$(top_builddir)/lib/libgroonga.la

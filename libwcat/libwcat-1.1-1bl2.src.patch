--- origsrc/libwcat-1.1/Makefile.am	1970-01-01 09:00:00.000000000 +0900
+++ src/libwcat-1.1/Makefile.am	2024-12-05 14:08:15.912027900 +0900
@@ -0,0 +1,9 @@
+
+include_HEADERS = watchcat.h
+
+lib_LTLIBRARIES = libwcat.la
+libwcat_la_SOURCES = watchcat.c
+libwcat_la_LDFLAGS = -no-undefined
+
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = $(PACKAGE).pc
--- origsrc/libwcat-1.1/configure.ac	1970-01-01 09:00:00.000000000 +0900
+++ src/libwcat-1.1/configure.ac	2024-12-05 14:08:15.927672500 +0900
@@ -0,0 +1,30 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.69])
+AC_INIT([libwcat], [1.1])
+AC_CONFIG_SRCDIR([watchcat.c])
+AC_CONFIG_HEADERS([config.h])
+AM_INIT_AUTOMAKE
+
+# Checks for programs.
+AC_PROG_CC
+AC_PROG_INSTALL
+AC_PROG_LN_S
+LT_INIT
+
+# Checks for libraries.
+# FIXME: Replace `main' with a function in `-lc':
+
+# Checks for header files.
+AC_CHECK_HEADERS([fcntl.h stdlib.h string.h sys/socket.h unistd.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_TYPE_SIZE_T
+AC_TYPE_SSIZE_T
+
+# Checks for library functions.
+AC_CHECK_FUNCS([memset socket])
+
+AC_CONFIG_FILES([libwcat.pc Makefile])
+AC_OUTPUT
--- origsrc/libwcat-1.1/libwcat.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/libwcat-1.1/libwcat.pc.in	2024-12-05 14:08:15.927672500 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: libwcat
+Description: Library for the watchcat software watchdog
+Version: @VERSION@
+Libs: -L${libdir} -lwcat
+Cflags: -I${includedir}
--- origsrc/libwcat-1.1/watchcat.c	2008-08-28 05:27:34.000000000 +0900
+++ src/libwcat-1.1/watchcat.c	2024-12-05 14:12:20.432403700 +0900
@@ -22,7 +22,7 @@ static char DEVICE[CAT_DEVICE_SIZE] = "/
 void cat_set_device(const char *dev)
 {
     strncpy(DEVICE, dev, CAT_DEVICE_SIZE);
-    DEVICE[CAT_DEVICE_SIZE] = '\0';
+    DEVICE[CAT_DEVICE_SIZE - 1] = '\0';
 }
 
 static ssize_t safe_write(int fd, const void *buf, size_t count)

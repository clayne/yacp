--- origsrc/libdrm-2.4.105/etnaviv/etnaviv_device.c	2021-04-07 23:09:24.163843400 +0900
+++ src/libdrm-2.4.105/etnaviv/etnaviv_device.c	2021-04-14 22:57:04.142016600 +0900
@@ -25,8 +25,10 @@
  */
 
 #include <stdlib.h>
+#if defined(__linux__)
 #include <linux/stddef.h>
 #include <linux/types.h>
+#endif
 #include <errno.h>
 #include <sys/mman.h>
 #include <fcntl.h>
--- origsrc/libdrm-2.4.105/exynos/exynos_drm.c	2021-04-07 23:09:24.163843400 +0900
+++ src/libdrm-2.4.105/exynos/exynos_drm.c	2021-04-14 22:53:58.634893000 +0900
@@ -31,7 +31,9 @@
 #include <unistd.h>
 
 #include <sys/mman.h>
+#if defined(__linux__)
 #include <linux/stddef.h>
+#endif
 
 #include <xf86drm.h>
 
--- origsrc/libdrm-2.4.105/exynos/exynos_fimg2d.c	2021-04-07 23:09:24.163843400 +0900
+++ src/libdrm-2.4.105/exynos/exynos_fimg2d.c	2021-04-14 22:55:02.756709300 +0900
@@ -30,7 +30,9 @@
 #include <assert.h>
 
 #include <sys/mman.h>
+#if defined(__linux__)
 #include <linux/stddef.h>
+#endif
 
 #include <xf86drm.h>
 
--- origsrc/libdrm-2.4.105/freedreno/kgsl/kgsl_bo.c	2021-04-07 23:09:24.167843300 +0900
+++ src/libdrm-2.4.105/freedreno/kgsl/kgsl_bo.c	2021-04-14 22:56:26.325058000 +0900
@@ -28,7 +28,9 @@
 
 #include "kgsl_priv.h"
 
+#if defined(__linux__)
 #include <linux/fb.h>
+#endif
 
 static int set_memtype(struct fd_device *dev, uint32_t handle, uint32_t flags)
 {
--- origsrc/libdrm-2.4.105/include/drm/drm.h	2021-04-07 23:09:24.167843300 +0900
+++ src/libdrm-2.4.105/include/drm/drm.h	2021-04-14 22:49:11.650778800 +0900
@@ -45,7 +45,11 @@ typedef unsigned int drm_handle_t;
 #else /* One of the BSDs */
 
 #include <stdint.h>
+#if defined(__CYGWIN__)
+#include <sys/ioctl.h>
+#else
 #include <sys/ioccom.h>
+#endif
 #include <sys/types.h>
 typedef int8_t   __s8;
 typedef uint8_t  __u8;
--- origsrc/libdrm-2.4.105/libkms/vmwgfx.c	2021-04-07 23:09:24.175843200 +0900
+++ src/libdrm-2.4.105/libkms/vmwgfx.c	2021-04-14 22:52:26.019172000 +0900
@@ -97,11 +97,15 @@ vmwgfx_bo_create(struct kms_driver *kms,
 		bo->base.pitch = width * 4;
 		bo->base.kms = kms;
 
+#if defined(ERESTART)
 		do {
+#endif
 			ret = drmCommandWriteRead(bo->base.kms->fd,
 						  DRM_VMW_ALLOC_DMABUF,
 						  &arg, sizeof(arg));
+#if defined(ERESTART)
 		} while (ret == -ERESTART);
+#endif
 
 		if (ret)
 			goto err_free;
--- origsrc/libdrm-2.4.105/omap/omap_drm.c	2021-04-07 23:09:24.175843200 +0900
+++ src/libdrm-2.4.105/omap/omap_drm.c	2021-04-14 22:54:27.771661200 +0900
@@ -27,8 +27,10 @@
  */
 
 #include <stdlib.h>
+#if defined(__linux__)
 #include <linux/stddef.h>
 #include <linux/types.h>
+#endif
 #include <errno.h>
 #include <sys/mman.h>
 #include <fcntl.h>
--- origsrc/libdrm-2.4.105/tests/exynos/exynos_fimg2d_test.c	2021-04-07 23:09:24.179843000 +0900
+++ src/libdrm-2.4.105/tests/exynos/exynos_fimg2d_test.c	2021-04-14 22:58:36.922094600 +0900
@@ -31,7 +31,9 @@
 #include <unistd.h>
 
 #include <sys/mman.h>
+#if defined(__linux__)
 #include <linux/stddef.h>
+#endif
 
 #include <xf86drm.h>
 #include <xf86drmMode.h>
--- origsrc/libdrm-2.4.105/tests/nouveau/threaded.c	2021-04-07 23:09:24.183843000 +0900
+++ src/libdrm-2.4.105/tests/nouveau/threaded.c	2021-04-14 23:01:37.040971800 +0900
@@ -80,7 +80,11 @@ int main(int argc, char *argv[])
 	struct nouveau_bo *bo;
 	pthread_t t1, t2;
 
+#if defined(RTLD_NEXT)
 	old_ioctl = dlsym(RTLD_NEXT, "ioctl");
+#else
+	return 1;
+#endif
 
 	if (argc < 2) {
 		fd = drmOpenWithType("nouveau", NULL, DRM_NODE_RENDER);
--- origsrc/libdrm-2.4.105/xf86drm.h	2021-04-07 23:09:24.183843000 +0900
+++ src/libdrm-2.4.105/xf86drm.h	2021-04-14 22:50:08.483440400 +0900
@@ -47,7 +47,7 @@ extern "C" {
 #define DRM_MAX_MINOR   16
 #endif
 
-#if defined(__linux__)
+#if defined(__linux__) || defined(__CYGWIN__)
 
 #define DRM_IOCTL_NR(n)		_IOC_NR(n)
 #define DRM_IOC_VOID		_IOC_NONE

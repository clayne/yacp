--- origsrc/draco-1.5.2/cmake/draco_install.cmake	2022-02-18 07:06:05.000000000 +0900
+++ src/draco-1.5.2/cmake/draco_install.cmake	2022-04-25 02:11:16.581756300 +0900
@@ -36,23 +36,43 @@ macro(draco_setup_install_target)
 
   # CMake config: draco-config.cmake
   set(DRACO_INCLUDE_DIR "${includes_path}")
-  configure_package_config_file(
-    "${draco_root}/cmake/draco-config.cmake.template"
-    "${draco_build}/draco-config.cmake"
-    INSTALL_DESTINATION "${data_path}/cmake")
-  install(
-    FILES "${draco_build}/draco-config.cmake"
-    DESTINATION "${data_path}/cmake")
 
-  # CMake version: draco-version.cmake
-  write_basic_package_version_file(
-    "${draco_build}/draco-version.cmake"
-    VERSION ${DRACO_VERSION}
-    COMPATIBILITY AnyNewerVersion)
-  install(
-      FILES "${draco_build}/draco-version.cmake"
+  if (CYGWIN)
+    configure_package_config_file(
+      "${draco_root}/cmake/draco-config.cmake.template"
+      "${draco_build}/draco-config.cmake"
+      INSTALL_DESTINATION "${libs_path}/cmake/draco")
+    install(
+      FILES "${draco_build}/draco-config.cmake"
+      DESTINATION "${libs_path}/cmake/draco")
+
+    # CMake version: draco-version.cmake
+    write_basic_package_version_file(
+      "${draco_build}/draco-version.cmake"
+      VERSION ${DRACO_VERSION}
+      COMPATIBILITY AnyNewerVersion)
+    install(
+        FILES "${draco_build}/draco-version.cmake"
+        DESTINATION "${libs_path}/cmake/draco")
+  else()
+    configure_package_config_file(
+      "${draco_root}/cmake/draco-config.cmake.template"
+      "${draco_build}/draco-config.cmake"
+      INSTALL_DESTINATION "${data_path}/cmake")
+    install(
+      FILES "${draco_build}/draco-config.cmake"
       DESTINATION "${data_path}/cmake")
 
+    # CMake version: draco-version.cmake
+    write_basic_package_version_file(
+      "${draco_build}/draco-version.cmake"
+      VERSION ${DRACO_VERSION}
+      COMPATIBILITY AnyNewerVersion)
+    install(
+        FILES "${draco_build}/draco-version.cmake"
+        DESTINATION "${data_path}/cmake")
+  endif()
+
   foreach(file ${draco_sources})
     if(file MATCHES "h$")
       list(APPEND draco_api_includes ${file})
@@ -86,10 +106,10 @@ macro(draco_setup_install_target)
   if(MSVC)
     install(TARGETS draco DESTINATION "${libs_path}")
   else()
-    install(TARGETS draco_static DESTINATION "${libs_path}")
-
     if(BUILD_SHARED_LIBS)
-      install(TARGETS draco_shared DESTINATION "${libs_path}")
+      install(TARGETS draco_shared RUNTIME DESTINATION bin ARCHIVE DESTINATION "${libs_path}")
+    else()
+      install(TARGETS draco_static DESTINATION "${libs_path}")
     endif()
   endif()
 
--- origsrc/draco-1.5.2/cmake/draco_tests.cmake	2022-02-18 07:06:05.000000000 +0900
+++ src/draco-1.5.2/cmake/draco_tests.cmake	2022-04-25 01:52:30.338470600 +0900
@@ -93,41 +93,47 @@ endif()
 
 macro(draco_setup_test_targets)
   if(DRACO_TESTS)
-    draco_setup_googletest()
-
-    if(NOT (EXISTS ${draco_gtest_all} AND EXISTS ${draco_gtest_main}))
-      message(FATAL_ERROR
-              "googletest missing, run git submodule update --init")
+    find_package(gtest)
+    if (GTEST_FOUND)
+      add_library(draco_gtest ALIAS GTest::gtest)
+      add_library(draco_gtest_main ALIAS GTest::gtest_main)
+    else()
+      draco_setup_googletest()
+
+      if(NOT (EXISTS ${draco_gtest_all} AND EXISTS ${draco_gtest_main}))
+        message(FATAL_ERROR
+                "googletest missing, run git submodule update --init")
+      endif()
+
+      list(APPEND draco_test_defines GTEST_HAS_PTHREAD=0)
+
+      draco_add_library(TEST
+                        NAME
+                        draco_gtest
+                        TYPE
+                        STATIC
+                        SOURCES
+                        ${draco_gtest_all}
+                        DEFINES
+                        ${draco_defines}
+                        ${draco_test_defines}
+                        INCLUDES
+                        ${draco_test_include_paths})
+
+      draco_add_library(TEST
+                        NAME
+                        draco_gtest_main
+                        TYPE
+                        STATIC
+                        SOURCES
+                        ${draco_gtest_main}
+                        DEFINES
+                        ${draco_defines}
+                        ${draco_test_defines}
+                        INCLUDES
+                        ${draco_test_include_paths})
     endif()
 
-    list(APPEND draco_test_defines GTEST_HAS_PTHREAD=0)
-
-    draco_add_library(TEST
-                      NAME
-                      draco_gtest
-                      TYPE
-                      STATIC
-                      SOURCES
-                      ${draco_gtest_all}
-                      DEFINES
-                      ${draco_defines}
-                      ${draco_test_defines}
-                      INCLUDES
-                      ${draco_test_include_paths})
-
-    draco_add_library(TEST
-                      NAME
-                      draco_gtest_main
-                      TYPE
-                      STATIC
-                      SOURCES
-                      ${draco_gtest_main}
-                      DEFINES
-                      ${draco_defines}
-                      ${draco_test_defines}
-                      INCLUDES
-                      ${draco_test_include_paths})
-
     set(DRACO_TEST_DATA_DIR "${draco_root}/testdata")
     set(DRACO_TEST_TEMP_DIR "${draco_build}/draco_test_temp")
     file(MAKE_DIRECTORY "${DRACO_TEST_TEMP_DIR}")
@@ -145,6 +151,7 @@ macro(draco_setup_test_targets)
                          ${draco_defines}
                          ${draco_test_defines}
                          INCLUDES
+                         ${draco_include_paths}
                          ${draco_test_include_paths}
                          LIB_DEPS
                          ${draco_dependency}
@@ -159,6 +166,7 @@ macro(draco_setup_test_targets)
                          ${draco_defines}
                          ${draco_test_defines}
                          INCLUDES
+                         ${draco_include_paths}
                          ${draco_test_include_paths}
                          LIB_DEPS
                          ${draco_dependency}

--- origsrc/curlpp-0.8.1/CMakeLists.txt	2017-03-07 17:02:24.000000000 +0900
+++ src/curlpp-0.8.1/CMakeLists.txt	2025-01-16 17:26:11.413018100 +0900
@@ -87,26 +87,11 @@ add_library(${PROJECT_NAME} SHARED ${Hea
 target_link_libraries(${PROJECT_NAME} ${CURL_LIBRARIES} ${CONAN_LIBS})
 set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 1 VERSION 1.0.0)
 
-add_library(${PROJECT_NAME}_static STATIC ${HeaderFileList} ${SourceFileList})
-
-# Make sure that on unix-platforms shared and static libraries have
-# the same root name, but different suffixes.
-#
-#  (solution taken from https://cmake.org/Wiki/CMake_FAQ#How_do_I_make_my_shared_and_static_libraries_have_the_same_root_name.2C_but_different_suffixes.3F)
-# 
-# Making shared and static libraries have the same root name, but different suffixes
-SET_TARGET_PROPERTIES(${PROJECT_NAME}_static PROPERTIES OUTPUT_NAME ${PROJECT_NAME})
-# Now the library target "curlpp_static" will be named "curlpp.lib" with MS tools.
-# This conflicts with the "curlpp.lib" import library corresponding to "curlpp.dll",
-# so we add a "lib" prefix (which is default on other platforms anyway):
-SET_TARGET_PROPERTIES(${PROJECT_NAME}_static PROPERTIES PREFIX "lib")
-target_link_libraries(${PROJECT_NAME}_static ${CURL_LIBRARIES} ${CONAN_LIBS})
-
 # install headers
 install(DIRECTORY include/utilspp/ DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/utilspp")
 install(DIRECTORY include/curlpp/ DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/curlpp")
 
-install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_static
+install(TARGETS ${PROJECT_NAME}
         RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
         LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
         ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
--- origsrc/curlpp-0.8.1/extras/curlpp.pc.in	2025-01-16 17:25:13.192797400 +0900
+++ src/curlpp-0.8.1/extras/curlpp.pc.in	2025-01-16 17:37:39.900037800 +0900
@@ -6,7 +6,7 @@ libdir=${exec_prefix}/@libdir@
 
 Name: curlpp
 Description: cURLpp is a libcurl C++ wrapper
-Version: @VERSION@                           
+Version: @CURLPP_VERSION@                           
 Libs: -L${libdir} -lcurlpp @LDFLAGS@ @LIBS@
 Cflags: -I${includedir} @CURLPP_CXXFLAGS@
 # libcurl is required as non-private because CurlHandle.inl uses curl_easy_setopt.

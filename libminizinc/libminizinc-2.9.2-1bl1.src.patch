--- origsrc/libminizinc-2.9.2/CMakeLists.txt	2025-03-06 14:31:21.000000000 +0900
+++ src/libminizinc-2.9.2/CMakeLists.txt	2025-04-15 09:38:26.747678900 +0900
@@ -103,3 +103,10 @@ include(cmake/support/config_output.cmak
 # -------------------------------------------------------------------------------------------------------------------
 #  -- Support Actions
 include(cmake/support/format.cmake)
+
+set(prefix ${CMAKE_INSTALL_PREFIX})
+set(exec_prefix ${CMAKE_INSTALL_PREFIX})
+set(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+set(includedir ${CMAKE_INSTALL_PREFIX}/include)
+configure_file(${CMAKE_SOURCE_DIR}/libminizinc.pc.in ${CMAKE_BINARY_DIR}/libminizinc.pc @ONLY)
+install(FILES ${CMAKE_BINARY_DIR}/libminizinc.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/libminizinc-2.9.2/cmake/support/compiler_setup.cmake	2025-03-06 14:31:21.000000000 +0900
+++ src/libminizinc-2.9.2/cmake/support/compiler_setup.cmake	2025-04-15 09:38:26.747678900 +0900
@@ -44,20 +44,22 @@ int main (int argc, char* argv[])
 }
 " HAS_PIDPATH)
 
-check_cxx_source_compiles("
-#include <windows.h>
-int main (int argc, char* argv[]) {
-  char path[MAX_PATH];
-  (void) GetModuleFileName(NULL, path, MAX_PATH);
-  return 0;
-}" HAS_GETMODULEFILENAME)
+if (WIN32)
+  check_cxx_source_compiles("
+  #include <windows.h>
+  int main (int argc, char* argv[]) {
+    char path[MAX_PATH];
+    (void) GetModuleFileName(NULL, path, MAX_PATH);
+    return 0;
+  }" HAS_GETMODULEFILENAME)
 
-check_cxx_source_compiles("
-#include <windows.h>
-int main (int argc, char* argv[]) {
-  (void) GetFileAttributes(NULL);
-  return 0;
-}" HAS_GETFILEATTRIBUTES)
+  check_cxx_source_compiles("
+  #include <windows.h>
+  int main (int argc, char* argv[]) {
+    (void) GetFileAttributes(NULL);
+    return 0;
+  }" HAS_GETFILEATTRIBUTES)
+endif()
 
 check_cxx_source_compiles("
 #include <string.h>
--- origsrc/libminizinc-2.9.2/cmake/targets/libmzn.cmake	2025-03-06 14:31:21.000000000 +0900
+++ src/libminizinc-2.9.2/cmake/targets/libmzn.cmake	2025-04-15 09:38:26.747678900 +0900
@@ -129,6 +129,10 @@ add_library(mzn
 )
 target_link_libraries(mzn ${CMAKE_THREAD_LIBS_INIT} ${CMAKE_DL_LIBS})
 
+if (CYGWIN)
+  set_target_properties(mzn PROPERTIES SOVERSION "${PROJECT_VERSION_MAJOR}")
+endif()
+
 ### Add Solver Interfaces to the MiniZinc library when available
 include(cmake/targets/libminizinc_atlantis.cmake)
 include(cmake/targets/libminizinc_chuffed.cmake)
--- origsrc/libminizinc-2.9.2/lib/model.cpp	2025-03-06 14:31:21.000000000 +0900
+++ src/libminizinc-2.9.2/lib/model.cpp	2025-04-15 09:38:26.747678900 +0900
@@ -205,7 +205,7 @@ bool can_increment_type(const Type& t, P
       return t.st() == Type::ST_PLAIN || t.bt() != Type::BT_INT;
     case PBT_BIF:
       return t.bt() != Type::BT_FLOAT;
-    case PBT_I:
+    default:
       return false;
   }
   throw InternalError("Invalid BaseType");
--- origsrc/libminizinc-2.9.2/libminizinc.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/libminizinc-2.9.2/libminizinc.pc.in	2025-04-15 09:38:26.747678900 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: libminizinc
+Description: Medium-level constraint modelling language
+Version: @PROJECT_VERSION@
+Libs: -L${libdir} -lmzn
+Cflags: -I${includedir}

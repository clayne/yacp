--- origsrc/scarab-3.13.1/CMakeLists.txt	2025-09-06 08:05:33.000000000 +0900
+++ src/scarab-3.13.1/CMakeLists.txt	2025-09-10 21:28:11.025082100 +0900
@@ -76,16 +76,24 @@ set( PUBLIC_EXT_LIBS )
 set( PRIVATE_EXT_LIBS )
 
 # logging via spdlog
+find_package(PkgConfig REQUIRED)
+pkg_check_modules(SPDLOG spdlog)
 add_compile_definitions( SPDLOG_ACTIVE_LEVEL=SPDLOG_LEVEL_TRACE )
-set( SPDLOG_BUILD_SHARED TRUE )
-set( SPDLOG_INSTALL TRUE )
-FetchContent_Declare( spdlog
-    GIT_REPOSITORY https://github.com/project8/spdlog.git
-    GIT_TAG v1.x_p8
-)
-FetchContent_MakeAvailable( spdlog )
-list( APPEND PUBLIC_EXT_LIBS spdlog::spdlog )
-
+if (SPDLOG_FOUND)
+    add_compile_options( ${SPDLOG_CFLAGS} )
+    add_compile_definitions( SPDLOG_LEVEL_NOTICE=SPDLOG_LEVEL_INFO )
+    add_compile_definitions( SPDLOG_LOGGER_NOTICE=SPDLOG_LOGGER_INFO )
+    list(APPEND PUBLIC_EXT_LIBS ${SPDLOG_LIBRARIES})
+else()
+    set( SPDLOG_BUILD_SHARED TRUE )
+    set( SPDLOG_INSTALL TRUE )
+    FetchContent_Declare( spdlog
+        GIT_REPOSITORY https://github.com/project8/spdlog.git
+        GIT_TAG v1.x_p8
+    )
+    FetchContent_MakeAvailable( spdlog )
+    list( APPEND PUBLIC_EXT_LIBS spdlog::spdlog )
+endif()
 
 if( Scarab_BUILD_CODEC_JSON )
     set( RAPIDJSON_FILE_BUFFER_SIZE 65536 CACHE STRING "Buffer size for reading and writing files using RapidJSON (in Bytes)" )
@@ -215,3 +223,9 @@ pbuilder_do_package_config(
     OUTPUT_FILE ScarabConfig.cmake
 )
 
+set(prefix ${CMAKE_INSTALL_PREFIX})
+set(exec_prefix ${CMAKE_INSTALL_PREFIX})
+set(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+set(includedir ${CMAKE_INSTALL_PREFIX}/include)
+configure_file(${CMAKE_SOURCE_DIR}/scarab.pc.in ${CMAKE_BINARY_DIR}/scarab.pc @ONLY)
+install(FILES ${CMAKE_BINARY_DIR}/scarab.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/scarab-3.13.1/cmake/PackageBuilderMacros.cmake	2025-09-06 08:05:33.000000000 +0900
+++ src/scarab-3.13.1/cmake/PackageBuilderMacros.cmake	2025-09-10 09:00:39.470511200 +0900
@@ -228,7 +228,9 @@ function( pbuilder_add_library )
             "$<INSTALL_INTERFACE:${TOP_PROJECT_INCLUDE_INSTALL_SUBDIR}${SM_INCLUDE_SUBDIR}>"
     )
 
-
+    if (DEFINED SOVERSION)
+        set_target_properties(${FULL_LIB_TARGET} PROPERTIES SOVERSION "${SOVERSION}")
+    endif()
 endfunction()
 
 function( pbuilder_link_library )
--- origsrc/scarab-3.13.1/library/utility/signal_handler.cc	2025-09-06 08:05:33.000000000 +0900
+++ src/scarab-3.13.1/library/utility/signal_handler.cc	2025-09-10 09:00:39.486551000 +0900
@@ -13,7 +13,9 @@
 #include "error.hh"
 #include "logger.hh"
 
+#if !defined(__CYGWIN__)
 #include <execinfo.h>
+#endif
 #include <stdexcept>
 #include <thread>
 
@@ -443,7 +445,7 @@ namespace scarab
     void signal_handler::print_stack_trace( bool a_use_logging )
     {
         // no mutex locking needed here
-#ifndef _WIN32 // stack trace printing not implemented for windows
+#if !defined(_WIN32) && !defined(__CYGWIN__) // stack trace printing not implemented for windows
         void* t_bt_array[50];
         int t_size = backtrace( t_bt_array, 50 );
 
--- origsrc/scarab-3.13.1/library/version/version_semantic.cc	2025-09-06 08:05:33.000000000 +0900
+++ src/scarab-3.13.1/library/version/version_semantic.cc	2025-09-10 09:00:39.488570000 +0900
@@ -20,7 +20,7 @@
 #include <mach-o/dyld.h> // for extracting the exe name
 #include <unistd.h> // for gethostname and getlogin_r
 #include <pwd.h> // for struct passwd
-#elif __linux
+#elif __linux || defined(__CYGWIN__)
 #include <unistd.h> // for readlink, gethostname and getlogin_r
 #include <pwd.h> // for struct passwd
 #endif
@@ -249,7 +249,7 @@ namespace scarab
         char t_exe_buf[ 2048 ];
         uint32_t t_exe_bufsize = sizeof( t_exe_buf );
         if( _NSGetExecutablePath( t_exe_buf, &t_exe_bufsize ) != 0 )
-#elif __linux
+#elif __linux || defined(__CYGWIN__)
         const size_t t_exe_bufsize = 2048;
         char t_exe_buf[ t_exe_bufsize ];
         ssize_t t_exe_name_len = readlink( "/proc/self/exe", t_exe_buf, t_exe_bufsize );
--- origsrc/scarab-3.13.1/scarab.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/scarab-3.13.1/scarab.pc.in	2025-09-10 09:00:39.489233200 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: scarab
+Description: Variety of utilities primarily aimed at the C++ packages developed by the Project 8 collaboration
+Version: @PROJECT_VERSION@
+Libs: -L${libdir} -lScarab
+Cflags: -I${includedir}
--- origsrc/scarab-3.13.1/testing/CMakeLists.txt	2025-09-06 08:05:33.000000000 +0900
+++ src/scarab-3.13.1/testing/CMakeLists.txt	2025-09-10 09:00:39.491264400 +0900
@@ -4,8 +4,11 @@
 
 ##########
 
-# Install Catch2
+find_package(pkgconfig REQUIRED)
+pkg_check_modules(CATCH2 catch2)
 
+# Install Catch2
+if (NOT CATCH2_FOUND)
 include( FetchContent )
 
 FetchContent_Declare(
@@ -16,6 +19,8 @@ FetchContent_Declare(
 
 FetchContent_MakeAvailable( Catch2 )
 list( APPEND CMAKE_MODULE_PATH ${catch2_SOURCE_DIR}/extras )
+set(CATCH2_LIBRARIES Catch2::Catch2)
+endif()
 
 ##########
 
@@ -103,7 +108,7 @@ pbuilder_executable(
     EXECUTABLE run_tests
     SOURCES ${testing_SOURCES}
     PROJECT_LIBRARIES ${testing_LIB_DEPENDENCIES}
-    PRIVATE_EXTERNAL_LIBRARIES Catch2::Catch2
+    PRIVATE_EXTERNAL_LIBRARIES ${CATCH2_LIBRARIES}
 )
 
 ##########
@@ -129,12 +134,13 @@ list( APPEND programs "run_tests" )
 ##########
 
 # Installation
-
+if (NOT CATCH2_FOUND)
 pbuilder_component_install_and_export( 
     COMPONENT Catch2
     LIBTARGETS Catch2
     NAMESPACE Catch2::
 )
+endif()
 
 #message(STATUS "##### programs: ${programs}")
 pbuilder_component_install_and_export( 
--- origsrc/scarab-3.13.1/testing/applications/CMakeLists.txt	2025-09-06 08:05:33.000000000 +0900
+++ src/scarab-3.13.1/testing/applications/CMakeLists.txt	2025-09-10 10:42:12.486393300 +0900
@@ -23,18 +23,18 @@ pbuilder_executables( SOURCES ${testing_
 set( programs ${programs} PARENT_SCOPE )
 
 if( Scarab_ENABLE_TESTING )
-    add_test( NAME app_with_authentication COMMAND test_app_with_authentication WORKING_DIRECOTRY ${BIN_INSTALL_DIR} )
-    add_test( NAME app_with_callback COMMAND test_app_with_callback WORKING_DIRECTORY ${BIN_INSTALL_DIR} )
-    add_test( NAME app_with_options COMMAND test_app_with_options -f 5 -s "hello" -t "world" WORKING_DIRECTORY ${BIN_INSTALL_DIR} )
-    add_test( NAME app_with_subcommands_get COMMAND test_app_with_subcommands get WORKING_DIRECTORY ${BIN_INSTALL_DIR} )
-    add_test( NAME app_with_subcommands_set COMMAND test_app_with_subcommands set value=10 WORKING_DIRECTORY ${BIN_INSTALL_DIR} )
-    add_test( NAME basic_application COMMAND test_basic_application WORKING_DIRECTORY ${BIN_INSTALL_DIR} )
-    add_test( NAME raise_sigabrt COMMAND test_raise_sigabrt WORKING_DIRECTORY ${BIN_INSTALL_DIR} )
-    add_test( NAME raise_sigint COMMAND test_raise_sigint WORKING_DIRECTORY ${BIN_INSTALL_DIR} )
-    add_test( NAME raise_sigquit COMMAND test_raise_sigquit WORKING_DIRECTORY ${BIN_INSTALL_DIR} )
-    add_test( NAME raise_sigterm COMMAND test_raise_sigterm WORKING_DIRECTORY ${BIN_INSTALL_DIR} )
-    add_test( NAME static_initialization COMMAND test_static_initialization WORKING_DIRECTORY ${BIN_INSTALL_DIR} )
-    add_test( NAME unhandled_exception COMMAND test_unhandled_exception WORKING_DIRECTORY ${BIN_INSTALL_DIR} )
+    add_test( NAME app_with_authentication COMMAND test_app_with_authentication)
+    add_test( NAME app_with_callback COMMAND test_app_with_callback)
+    add_test( NAME app_with_options COMMAND test_app_with_options -f 5 -s "hello" -t "world")
+    add_test( NAME app_with_subcommands_get COMMAND test_app_with_subcommands get)
+    add_test( NAME app_with_subcommands_set COMMAND test_app_with_subcommands set value=10)
+    add_test( NAME basic_application COMMAND test_basic_application)
+    add_test( NAME raise_sigabrt COMMAND test_raise_sigabrt)
+    add_test( NAME raise_sigint COMMAND test_raise_sigint)
+    add_test( NAME raise_sigquit COMMAND test_raise_sigquit)
+    add_test( NAME raise_sigterm COMMAND test_raise_sigterm)
+    add_test( NAME static_initialization COMMAND test_static_initialization)
+    add_test( NAME unhandled_exception COMMAND test_unhandled_exception)
 
     set_tests_properties( unhandled_exception PROPERTIES WILL_FAIL TRUE )
 endif()
